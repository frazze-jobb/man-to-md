1c1
< ## pcrepattern(3) - Perl-compatible regular expressions
---
> ## pcre2pattern(3) - Perl-compatible regular expressions (revised API)
3c3
< PCRE 8.40, 23 October 2016
---
> PCRE2 10.45, 21 Sepbember 2024
6c6
< <a name="pcre-regular-expression-details"></a>
---
> <a name="pcre2-regular-expression-details"></a>
8c8
< ## Pcre Regular Expression Details
---
> ## Pcre2 Regular Expression Details
11c11
< The syntax and semantics of the regular expressions that are supported by PCRE
---
> The syntax and semantics of the regular expressions that are supported by PCRE2
13,15c13,15
< `pcresyntax`
< page. PCRE tries to match Perl syntax and semantics as closely as it can. PCRE
< also supports some alternative regular expression syntax (which does not
---
> `pcre2syntax`
> page. PCRE2 tries to match Perl syntax and semantics as closely as it can.
> PCRE2 also supports some alternative regular expression syntax (which does not
19,33c19,32
< Perl's regular expressions are described in its own documentation, and
< regular expressions in general are covered in a number of books, some of which
< have copious examples. Jeffrey Friedl's "Mastering Regular Expressions",
< published by O'Reilly, covers regular expressions in great detail. This
< description of PCRE's regular expressions is intended as reference material.
< 
< This document discusses the patterns that are supported by PCRE when one its
< main matching functions, `pcre\_exec()` (8-bit) or `pcre[16|32]\_exec()`
< (16- or 32-bit), is used. PCRE also has alternative matching functions,
< `pcre\_dfa\_exec()` and `pcre[16|32\_dfa\_exec()`, which match using a
< different algorithm that is not Perl-compatible. Some of the features discussed
< below are not available when DFA matching is used. The advantages and
< disadvantages of the alternative functions, and how they differ from the normal
< functions, are discussed in the
< `pcrematching`
---
> Perl's regular expressions are described in its own documentation, and regular
> expressions in general are covered in a number of books, some of which have
> copious examples. Jeffrey Friedl's "Mastering Regular Expressions", published
> by O'Reilly, covers regular expressions in great detail. This description of
> PCRE2's regular expressions is intended as reference material.
> 
> This document discusses the regular expression patterns that are supported by
> PCRE2 when its main matching function, `pcre2\_match()`, is used. PCRE2 also
> has an alternative matching function, `pcre2\_dfa\_match()`, which matches
> using a different algorithm that is not Perl-compatible. Some of the features
> discussed below are not available when DFA matching is used. The advantages and
> disadvantages of the alternative function, and how it differs from the normal
> function, are discussed in the
> `pcre2matching`
41c40
< A number of options that can be passed to `pcre\_compile()` can also be set
---
> A number of options that can be passed to `pcre2\_compile()` can also be set
53,72c52,62
< The original operation of PCRE was on strings of one-byte characters. However,
< there is now also support for UTF-8 strings in the original library, an
< extra library that supports 16-bit and UTF-16 character strings, and a
< third library that supports 32-bit and UTF-32 character strings. To use these
< features, PCRE must be built to include appropriate support. When using UTF
< strings you must either call the compiling function with the PCRE_UTF8,
< PCRE_UTF16, or PCRE_UTF32 option, or the pattern must start with one of
< these special sequences:
< 
< ```text
< (*UTF8)
< (*UTF16)
< (*UTF32)
< (*UTF)
< ```
< (*UTF) is a generic sequence that can be used with any of the libraries.
< Starting a pattern with such a sequence is equivalent to setting the relevant
< option. How setting a UTF mode affects pattern matching is mentioned in several
< places below. There is also a summary of features in the
< `pcreunicode`
---
> In the 8-bit and 16-bit PCRE2 libraries, characters may be coded either as
> single code units, or as multiple UTF-8 or UTF-16 code units. UTF-32 can be
> specified for the 32-bit library, in which case it constrains the character
> values to valid Unicode code points. To process UTF strings, PCRE2 must be
> built to include Unicode support (which is the default). When using UTF strings
> you must either call the compiling function with one or both of the PCRE2_UTF
> or PCRE2_MATCH_INVALID_UTF options, or the pattern must start with the special
> sequence (*UTF), which is equivalent to setting the relevant PCRE2_UTF. How
> setting a UTF mode affects pattern matching is mentioned in several places
> below. There is also a summary of features in the
> `pcre2unicode`
76,78c66,68
< restrict them to non-UTF data for security reasons. If the PCRE_NEVER_UTF
< option is set at compile time, (*UTF) etc. are not allowed, and their
< appearance causes an error.
---
> restrict them to non-UTF data for security reasons. If the PCRE2_NEVER_UTF
> option is passed to `pcre2\_compile()`, (*UTF) is not allowed, and its
> appearance in a pattern causes an error.
86c76
< This has the same effect as setting the PCRE_UCP option: it causes sequences
---
> This has the same effect as setting the PCRE2_UCP option: it causes sequences
88,89c78,99
< instead of recognizing only characters with codes less than 128 via a lookup
< table.
---
> instead of recognizing only characters with codes less than 256 via a lookup
> table. If also causes upper/lower casing operations to use Unicode properties
> for characters with code points greater than 127, even when UTF is not set.
> These behaviours can be changed within the pattern; see the section entitled
> "Internal Option Setting"
> below.
> 
> Some applications that allow their users to supply patterns may wish to
> restrict them for security reasons. If the PCRE2_NEVER_UCP option is passed to
> `pcre2\_compile()`, (*UCP) is not allowed, and its appearance in a pattern
> causes an error.
> 
> <a name="locking-out-empty-string-matching"></a>
> 
> _Locking out empty string matching_
> 
> 
> Starting a pattern with (*NOTEMPTY) or (*NOTEMPTY_ATSTART) has the same effect
> as passing the PCRE2_NOTEMPTY or PCRE2_NOTEMPTY_ATSTART option to whichever
> matching function is subsequently called to match the pattern. These options
> lock out the matching of empty strings, either entirely, or only at the start
> of the subject.
97,100c107,111
< the PCRE_NO_AUTO_POSSESS option at compile time. This stops PCRE from making
< quantifiers possessive when what follows cannot match the repeated item. For
< example, by default a+b is treated as a++b. For more details, see the
< `pcreapi`
---
> the PCRE2_NO_AUTO_POSSESS option, or calling `pcre2\_set\_optimize()` with
> a PCRE2_AUTO_POSSESS_OFF directive. This stops PCRE2 from making quantifiers
> possessive when what follows cannot match the repeated item. For example, by
> default a+b is treated as a++b. For more details, see the
> `pcre2api`
109,112c120,123
< PCRE_NO_START_OPTIMIZE option either at compile or matching time. This disables
< several optimizations for quickly reaching "no match" results. For more
< details, see the
< `pcreapi`
---
> PCRE2_NO_START_OPTIMIZE option, or calling `pcre2\_set\_optimize()` with
> a PCRE2_START_OPTIMIZE_OFF directive. This disables several optimizations for
> quickly reaching "no match" results. For more details, see the
> `pcre2api`
114a126,189
> <a name="disabling-automatic-anchoring"></a>
> 
> _Disabling automatic anchoring_
> 
> 
> If a pattern starts with (*NO_DOTSTAR_ANCHOR), it has the same effect as
> setting the PCRE2_NO_DOTSTAR_ANCHOR option, or calling `pcre2\_set\_optimize()`
> with a PCRE2_DOTSTAR_ANCHOR_OFF directive. This disables optimizations that
> apply to patterns whose top-level branches all start with .* (match any number
> of arbitrary characters). For more details, see the
> `pcre2api`
> documentation.
> 
> <a name="disabling-jit-compilation"></a>
> 
> _Disabling JIT compilation_
> 
> 
> If a pattern that starts with (*NO_JIT) is successfully compiled, an attempt by
> the application to apply the JIT optimization by calling
> `pcre2\_jit\_compile()` is ignored.
> 
> <a name="setting-match-resource-limits"></a>
> 
> _Setting match resource limits_
> 
> 
> The `pcre2\_match()` function contains a counter that is incremented every
> time it goes round its main loop. The caller of `pcre2\_match()` can set a
> limit on this counter, which therefore limits the amount of computing resource
> used for a match. The maximum depth of nested backtracking can also be limited;
> this indirectly restricts the amount of heap memory that is used, but there is
> also an explicit memory limit that can be set.
> 
> These facilities are provided to catch runaway matches that are provoked by
> patterns with huge matching trees. A common example is a pattern with nested
> unlimited repeats applied to a long string that does not match. When one of
> these limits is reached, `pcre2\_match()` gives an error return. The limits
> can also be set by items at the start of the pattern of the form
> 
> ```text
> (*LIMIT_HEAP=d)
> (*LIMIT_MATCH=d)
> (*LIMIT_DEPTH=d)
> ```
> where d is any number of decimal digits. However, the value of the setting must
> be less than the value set (or defaulted) by the caller of `pcre2\_match()`
> for it to have any effect. In other words, the pattern writer can lower the
> limits set by the programmer, but not raise them. If there is more than one
> setting of one of these limits, the lower value is used. The heap limit is
> specified in kibibytes (units of 1024 bytes).
> 
> Prior to release 10.30, LIMIT_DEPTH was called LIMIT_RECURSION. This name is
> still recognized for backwards compatibility.
> 
> The heap limit applies only when the `pcre2\_match()` or
> `pcre2\_dfa\_match()` interpreters are used for matching. It does not apply
> to JIT. The match limit is used (but in a different way) when JIT is being
> used, or when `pcre2\_dfa\_match()` is called, to limit computing resource
> usage by those matching functions. The depth limit is ignored by JIT but is
> relevant for DFA matching, which uses function recursion for recursions within
> the pattern and for lookaround assertions and atomic groups. In this case, the
> depth limit controls the depth of such recursion.
> 
120c195
< PCRE supports five different conventions for indicating line breaks in
---
> PCRE2 supports six different conventions for indicating line breaks in
122,124c197,199
< character, the two-character sequence CRLF, any of the three preceding, or any
< Unicode newline sequence. The
< `pcreapi`
---
> character, the two-character sequence CRLF, any of the three preceding, any
> Unicode newline sequence, or the NUL character (binary zero). The
> `pcre2api`
127,128c202,203
< about newlines, and shows how to set the newline convention in the
< _options_ arguments for the compiling and matching functions.
---
> about newlines, and shows how to set the newline convention when calling
> `pcre2\_compile()`.
131c206
< string with one of the following five sequences:
---
> string with one of the following sequences:
137a213
> - **(*NUL)** - the NUL character (binary zero)
151,153c227,230
< PCRE_DOTALL is not set, and the behaviour of \eN. However, it does not affect
< what the \eR escape sequence matches. By default, this is any Unicode newline
< sequence, for Perl compatibility. However, this can be changed; see the
---
> PCRE2_DOTALL is not set, and the behaviour of \eN when not followed by an
> opening brace. However, it does not affect what the \eR escape sequence
> matches. By default, this is any Unicode newline sequence, for Perl
> compatibility. However, this can be changed; see the next section and the
159,161c236
< <a name="setting-match-and-recursion-limits"></a>
< 
< _Setting match and recursion limits_
---
> <a name="specifying-what-er-matches"></a>
162a238
> _Specifying what \eR matches_
164,171d239
< The caller of `pcre\_exec()` can set a limit on the number of times the
< internal `match()` function is called and on the maximum depth of
< recursive calls. These facilities are provided to catch runaway matches that
< are provoked by patterns with huge matching trees (a typical example is a
< pattern with nested unlimited repeats) and to avoid running out of system stack
< by too much recursion. When one of these limits is reached, `pcre\_exec()`
< gives an error return. The limits can also be set by items at the start of the
< pattern of the form
173,181c241,245
< ```text
< (*LIMIT_MATCH=d)
< (*LIMIT_RECURSION=d)
< ```
< where d is any number of decimal digits. However, the value of the setting must
< be less than the value set (or defaulted) by the caller of `pcre\_exec()`
< for it to have any effect. In other words, the pattern writer can lower the
< limits set by the programmer, but not raise them. If there is more than one
< setting of one of these limits, the lower value is used.
---
> It is possible to restrict \eR to match only CR, LF, or CRLF (instead of the
> complete set of Unicode line endings) by setting the option PCRE2_BSR_ANYCRLF
> at compile time. This effect can also be achieved by starting a pattern with
> (*BSR_ANYCRLF). For completeness, (*BSR_UNICODE) is also recognized,
> corresponding to PCRE2_BSR_UNICODE.
188,190c252,254
< PCRE can be compiled to run in an environment that uses EBCDIC as its character
< code rather than ASCII or Unicode (typically a mainframe system). In the
< sections below, character code values are ASCII or Unicode; in an EBCDIC
---
> PCRE2 can be compiled to run in an environment that uses EBCDIC as its
> character code instead of ASCII or Unicode (typically a mainframe system). In
> the sections below, character code values are ASCII or Unicode; in an EBCDIC
207,219c271,285
< caseless matching is specified (the PCRE_CASELESS option), letters are matched
< independently of case. In a UTF mode, PCRE always understands the concept of
< case for characters whose values are less than 128, so caseless matching is
< always possible. For characters with higher values, the concept of case is
< supported if PCRE is compiled with Unicode property support, but not otherwise.
< If you want to use caseless matching for characters 128 and above, you must
< ensure that PCRE is compiled with Unicode property support as well as with
< UTF support.
< 
< The power of regular expressions comes from the ability to include alternatives
< and repetitions in the pattern. These are encoded in the pattern by the use of
< _metacharacters_, which do not stand for themselves but instead are
< interpreted in some special way.
---
> caseless matching is specified (the PCRE2_CASELESS option or (?i) within the
> pattern), letters are matched independently of case. Note that there are two
> ASCII characters, K and S, that, in addition to their lower case ASCII
> equivalents, are case-equivalent with Unicode U+212A (Kelvin sign) and U+017F
> (long S) respectively when either PCRE2_UTF or PCRE2_UCP is set, unless the
> PCRE2_EXTRA_CASELESS_RESTRICT option is in force (either passed to
> `pcre2\_compile()` or set by (*CASELESS_RESTRICT) or (?r) within the
> pattern). If the PCRE2_EXTRA_TURKISH_CASING option is in force (either passed
> to `pcre2\_compile()` or set by (*TURKISH_CASING) within the pattern), then
> the 'i' letters are matched according to Turkish and Azeri languages.
> 
> The power of regular expressions comes from the ability to include wild cards,
> character classes, alternatives, and repetitions in the pattern. These are
> encoded in the pattern by the use of _metacharacters_, which do not stand
> for themselves but instead are interpreted in some special way.
232,236c298,299
< - **`(`** - start subpattern
< - **`)`** - end subpattern
< - **`?`** - extends the meaning of (
< also 0 or 1 quantifier
< also quantifier minimizer
---
> - **`(`** - start group or control verb
> - **`)`** - end group or control verb
238,240c301,312
< - **`+`** - 1 or more quantifier
< also "possessive quantifier"
< - **`{`** - start min/max quantifier
---
> - **`+`** - 1 or more quantifier; also "possessive quantifier"
> - **`?`** - 0 or 1 quantifier; also quantifier minimizer
> - **`{`** - potential start of min/max quantifier
> 
> Brace characters { and } are also used to enclose data for constructions such
> as \eg{2} or \ek{name}. In almost all uses of braces, space and/or horizontal
> tab characters that follow { or precede } are allowed and are ignored. In the
> case of quantifiers, they may also appear before or after the comma. The
> exception to this is \eu{...} which is an ECMAScript compatibility feature
> that is recognized only when the PCRE2_EXTRA_ALT_BSUX option is set. ECMAScript
> does not ignore such white space; it causes the item to be interpreted as
> literal.
248,249c320
< - **`[`** - POSIX character class (only if followed by POSIX
< syntax)
---
> - **`[`** - POSIX character class (if followed by POSIX syntax)
251a323,335
> If a pattern is compiled with the PCRE2_EXTENDED option, most white space in
> the pattern, other than in a character class, within a \eQ...\eE sequence, or
> between a # outside a character class and the next newline, inclusive, is
> ignored. An escaping backslash can be used to include a white space or a #
> character as part of the pattern. If the PCRE2_EXTENDED_MORE option is set, the
> same applies, but in addition unescaped space and horizontal tab characters are
> ignored inside a character class. Note: only these two characters are ignored,
> not the full set of pattern white space characters that are ignored outside a
> character class. Option settings can be changed within a pattern; see the
> section entitled
> "Internal Option Setting"
> below.
> 
260c344
< character that is not a number or a letter, it takes away any special meaning
---
> character that is not a digit or a letter, it takes away any special meaning
264,283c348,366
< For example, if you want to match a * character, you write \e* in the pattern.
< This escaping action applies whether or not the following character would
< otherwise be interpreted as a metacharacter, so it is always safe to precede a
< non-alphanumeric with backslash to specify that it stands for itself. In
< particular, if you want to match a backslash, you write \e\e.
< 
< In a UTF mode, only ASCII numbers and letters have any special meaning after a
< backslash. All other characters (in particular, those whose codepoints are
< greater than 127) are treated as literals.
< 
< If a pattern is compiled with the PCRE_EXTENDED option, most white space in the
< pattern (other than in a character class), and characters between a # outside a
< character class and the next newline, inclusive, are ignored. An escaping
< backslash can be used to include a white space or # character as part of the
< pattern.
< 
< If you want to remove the special meaning from a sequence of characters, you
< can do so by putting them between \eQ and \eE. This is different from Perl in
< that $ and @ are handled as literals in \eQ...\eE sequences in PCRE, whereas in
< Perl, $ and @ cause variable interpolation. Note the following examples:
---
> For example, if you want to match a * character, you must write \e* in the
> pattern. This escaping action applies whether or not the following character
> would otherwise be interpreted as a metacharacter, so it is always safe to
> precede a non-alphanumeric with backslash to specify that it stands for itself.
> In particular, if you want to match a backslash, you write \e\e.
> 
> Only ASCII digits and letters have any special meaning after a backslash. All
> other characters (in particular, those whose code points are greater than 127)
> are treated as literals.
> 
> If you want to treat all characters in a sequence as literals, you can do so by
> putting them between \eQ and \eE. Note that this includes white space even when
> the PCRE2_EXTENDED option is set so that most other white space is ignored. The
> behaviour is different from Perl in that $ and @ are handled as literals in
> \eQ...\eE sequences in PCRE2, whereas in Perl, $ and @ cause variable
> interpolation. Also, Perl does "double-quotish backslash interpolation" on any
> backslashes between \eQ and \eE which, its documentation says, "may lead to
> confusing results". PCRE2 treats a backslash between \eQ and \eE just like any
> other character. Note the following examples:
285c368
< - **Pattern** - PCRE matches   Perl matches
---
> - **Pattern** - PCRE2 matches   Perl matches
289a373,374
> - **`\eQA\eB\eE`** - A\eB            A\eB
> - **`\eQ\e\eE`** - \e              \e\eE
295,296c380,388
< a character class, this causes an error, because the character class is not
< terminated.
---
> a character class, this causes an error, because the character class is then
> not terminated by a closing square bracket.
> 
> Another difference from Perl is that any appearance of \eQ or \eE inside what
> might otherwise be a quantifier causes PCRE2 not to recognize the sequence as a
> quantifier. Perl recognizes a quantifier if (redundantly) either of the numbers
> is inside \eQ...\eE, but not if the separating comma is. When not recognized as
> a quantifier a sequence such as {\eQ1\eE,2} is treated as the literal string
> "{1,2}".
305,308c397,400
< non-printing characters, apart from the binary zero that terminates a pattern,
< but when a pattern is being prepared by text editing, it is often easier to use
< one of the following escape sequences than the binary character it represents.
< In an ASCII or Unicode environment, these escapes are as follows:
---
> non-printing characters in a pattern, but when a pattern is being prepared by
> text editing, it is often easier to use one of the following escape sequences
> instead of the binary character it represents. In an ASCII or Unicode
> environment, these escapes are as follows:
311c403
< - **`\ecx`** - "control-x", where x is any ASCII character
---
> - **`\ecx`** - "control-x", where x is a non-control ASCII character
315c407
< - **`\er`** - carriage return (hex 0D)
---
> - **`\er`** - carriage return (hex 0D) (but see below)
319c411
< \eo{ddd..} character with octal code ddd..
---
> - **`\eo{ddd..}`** - character with octal code ddd..
321,322c413,419
< \ex{hhh..} character with hex code hhh.. (non-JavaScript mode)
< - **`\euhhhh`** - character with hex code hhhh (JavaScript mode only)
---
> - **`\ex{hhh..}`** - character with hex code hhh..
> \eN{U+hhh..} character with Unicode hex code point hhh..
> ```
> A description of how back references work is given
> later,
> following the discussion of
> parenthesized groups.
324,338c421,476
< The precise effect of \ecx on ASCII characters is as follows: if x is a lower
< case letter, it is converted to upper case. Then bit 6 of the character (hex
< 40) is inverted. Thus \ecA to \ecZ become hex 01 to hex 1A (A is 41, Z is 5A),
< but \ec{ becomes hex 3B ({ is 7B), and \ec; becomes hex 7B (; is 3B). If the
< data item (byte or 16-bit value) following \ec has a value greater than 127, a
< compile-time error occurs. This locks out non-ASCII characters in all modes.
< 
< When PCRE is compiled in EBCDIC mode, \ea, \ee, \ef, \en, \er, and \et
< generate the appropriate EBCDIC code values. The \ec escape is processed
< as specified for Perl in the `perlebcdic` document. The only characters
< that are allowed after \ec are A-Z, a-z, or one of @, [, \e, ], ^, _, or ?. Any
< other character provokes a compile-time error. The sequence \ec@ encodes
< character code 0; after \ec the letters (in either case) encode characters 1-26
< (hex 01 to hex 1A); [, \e, ], ^, and _ encode characters 27-31 (hex 1B to hex
< 1F), and \ec? becomes either 255 (hex FF) or 95 (hex 5F).
---
> By default, after \ex that is not followed by {, one or two hexadecimal
> digits are read (letters can be in upper or lower case). If the character that
> follows \ex is neither { nor a hexadecimal digit, an error occurs. This is
> different from Perl's default behaviour, which generates a NUL character, but
> is in line with the behaviour of Perl's 'strict' mode in re.
> 
> Any number of hexadecimal digits may appear between \ex{ and }. If a character
> other than a hexadecimal digit appears between \ex{ and }, or if there is no
> terminating }, an error occurs.
> 
> Characters whose code points are less than 256 can be defined by either of the
> two syntaxes for \ex or by an octal sequence. There is no difference in the way
> they are handled. For example, \exdc is exactly the same as \ex{dc} or \e334.
> However, using the braced versions does make such sequences easier to read.
> 
> Support is available for some ECMAScript (aka JavaScript) escape sequences via
> two compile-time options. If PCRE2_ALT_BSUX is set, the sequence \ex followed
> by { is not recognized. Only if \ex is followed by two hexadecimal digits is it
> recognized as a character escape. Otherwise it is interpreted as a literal "x"
> character. In this mode, support for code points greater than 256 is provided
> by \eu, which must be followed by four hexadecimal digits; otherwise it is
> interpreted as a literal "u" character.
> 
> PCRE2_EXTRA_ALT_BSUX has the same effect as PCRE2_ALT_BSUX and, in addition,
> \eu{hhh..} is recognized as the character specified by hexadecimal code point.
> There may be any number of hexadecimal digits, but unlike other places that
> also use curly brackets, spaces are not allowed and would result in the string
> being interpreted as a literal. This syntax is from ECMAScript 6.
> 
> The \eN{U+hhh..} escape sequence is recognized only when PCRE2 is operating in
> UTF mode. Perl also uses \eN{name} to specify characters by Unicode name; PCRE2
> does not support this. Note that when \eN is not followed by an opening brace
> (curly bracket) it has an entirely different meaning, matching any character
> that is not a newline.
> 
> There are some legacy applications where the escape sequence \er is expected to
> match a newline. If the PCRE2_EXTRA_ESCAPED_CR_IS_LF option is set, \er in a
> pattern is converted to \en so that it matches a LF (linefeed) instead of a CR
> (carriage return) character.
> 
> An error occurs if \ec is not followed by a character whose ASCII code point
> is in the range 32 to 126. The precise effect of \ecx is as follows: if x is a
> lower case letter, it is converted to upper case. Then bit 6 of the character
> (hex 40) is inverted. Thus \ecA to \ecZ become hex 01 to hex 1A (A is 41, Z is
> 5A), but \ec{ becomes hex 3B ({ is 7B), and \ec; becomes hex 7B (; is 3B). If
> the code unit following \ec has a code point less than 32 or greater than 126,
> a compile-time error occurs.
> 
> When PCRE2 is compiled in EBCDIC mode, \eN{U+hhh..} is not supported. \ea, \ee,
> \ef, \en, \er, and \et generate the appropriate EBCDIC code values. The \ec
> escape is processed as specified for Perl in the `perlebcdic` document. The
> only characters that are allowed after \ec are A-Z, a-z, or one of @, [, \e, ],
> ^, _, or ?. Any other character provokes a compile-time error. The sequence
> \ec@ encodes character code 0; after \ec the letters (in either case) encode
> characters 1-26 (hex 01 to hex 1A); [, \e, ], ^, and _ encode characters 27-31
> (hex 1B to hex 1F), and \ec? becomes either 255 (hex FF) or 95 (hex 5F).
350c488,492
< values, PCRE makes \ec? generate 95; otherwise it generates 255.
---
> values, PCRE2 makes \ec? generate 95; otherwise it generates 255.
> 
> <a name="octal-escapes-and-back-references"></a>
> 
> _Octal escapes and back references_
352,356d493
< After \e0 up to two further octal digits are read. If there are fewer than two
< digits, just those that are present are used. Thus the sequence \e0\ex\e015
< specifies two binary zeros followed by a CR character (code value 13). Make
< sure you supply two digits after the initial zero if the pattern character that
< follows is itself an octal digit.
359,362c496,515
< braces. An error occurs if this is not the case. This escape is a recent
< addition to Perl; it provides way of specifying character code points as octal
< numbers greater than 0777, and it also allows octal numbers and back references
< to be unambiguously specified.
---
> braces. An error occurs if this is not the case. This escape provides a way of
> specifying character code points as octal numbers greater than 0777, and it
> also allows octal numbers and backreferences to be unambiguously distinguished.
> 
> If braces are not used, after \e0 up to two further octal digits are read.
> However, if the PCRE2_EXTRA_NO_BS0 option is set, at least one more octal digit
> must follow \e0 (use \e00 to generate a NUL character). Make sure you supply
> two digits after the initial zero if the pattern character that follows is
> itself an octal digit.
> 
> Inside a character class, when a backslash is followed by any octal digit, up
> to three octal digits are read to generate a code point. Any subsequent digits
> stand for themselves. The sequences \e8 and \e9 are treated as the literal
> characters "8" and "9".
> 
> Outside a character class, Perl's handling of a backslash followed by a digit
> other than 0 is complicated by ambiguity, and Perl has changed over time,
> causing PCRE2 also to change. From PCRE2 release 10.45 there is an option
> called PCRE2_EXTRA_PYTHON_OCTAL that causes PCRE2 to use Python's unambiguous
> rules. The next two subsections describe the two sets of rules.
365,377c518,523
< digit greater than zero. Instead, use \eo{} or \ex{} to specify character
< numbers, and \eg{} to specify back references. The following paragraphs
< describe the old, ambiguous syntax.
< 
< The handling of a backslash followed by a digit other than 0 is complicated,
< and Perl has changed in recent releases, causing PCRE also to change. Outside a
< character class, PCRE reads the digit and any following digits as a decimal
< number. If the number is less than 8, or if there have been at least that many
< previous capturing left parentheses in the expression, the entire sequence is
< taken as a _back reference_. A description of how this works is given
< later,
< following the discussion of
< parenthesized subpatterns.
---
> digit greater than zero. Instead, use \eo{...} or \ex{...} to specify numerical
> character code points, and \eg{...} to specify backreferences.
> 
> <a name="perl-rules-for-non-class-backslash-1-9"></a>
> 
> _Perl rules for non-class backslash 1-9_
379,383c525,530
< Inside a character class, or if the decimal number following \e is greater than
< 7 and there have not been that many capturing subpatterns, PCRE handles \e8 and
< \e9 as the literal characters "8" and "9", and otherwise re-reads up to three
< octal digits following the backslash, using them to generate a data character.
< Any subsequent digits stand for themselves. For example:
---
> 
> All the digits that follow the backslash are read as a decimal number. If the
> number is less than 10, begins with the digit 8 or 9, or if there are at least
> that many previous capture groups in the expression, the entire sequence is
> taken as a back reference. Otherwise, up to three octal digits are read to form
> a character code. For example:
387,389c534,536
< previous capturing subpatterns
< - **`\e7`** - is always a back reference
< - **`\e11`** - might be a back reference, or another way of
---
> previous capture groups
> - **`\e7`** - is always a backreference
> - **`\e11`** - might be a backreference, or another way of
393c540
< - **`\e113`** - might be a back reference, otherwise the
---
> - **`\e113`** - might be a backreference, otherwise the
395c542
< - **`\e377`** - might be a back reference, otherwise
---
> - **`\e377`** - might be a backreference, otherwise
397,399c544,545
< - **`\e81`** - is either a back reference, or the two
< characters "8" and "1"
< ```
---
> - **`\e81`** - is always a backreference
> 
404,419c550,562
< By default, after \ex that is not followed by {, from zero to two hexadecimal
< digits are read (letters can be in upper or lower case). Any number of
< hexadecimal digits may appear between \ex{ and }. If a character other than
< a hexadecimal digit appears between \ex{ and }, or if there is no terminating
< }, an error occurs.
< 
< If the PCRE_JAVASCRIPT_COMPAT option is set, the interpretation of \ex is
< as just described only when it is followed by two hexadecimal digits.
< Otherwise, it matches a literal "x" character. In JavaScript mode, support for
< code points greater than 256 is provided by \eu, which must be followed by
< four hexadecimal digits; otherwise it matches a literal "u" character.
< 
< Characters whose value is less than 256 can be defined by either of the two
< syntaxes for \ex (or by \eu in JavaScript mode). There is no difference in the
< way they are handled. For example, \exdc is exactly the same as \ex{dc} (or
< \eu00dc in JavaScript mode).
---
> <a name="python-rules-for-non_class-backslash-1-9"></a>
> 
> _Python rules for non_class backslash 1-9_
> 
> 
> If there are at least three octal digits after the backslash, exactly three are
> read as an octal code point number, but the value must be no greater than
> \e377, even in modes where higher code point values are supported. Any
> subsequent digits stand for themselves. If there are fewer than three octal
> digits, the sequence is taken as a decimal back reference. Thus, for example,
> \e12 is always a back reference, independent of how many captures there are in
> the pattern. An error is generated for a reference to a non-existent capturing
> group.
429,431c572,577
< - **8-bit non-UTF mode** - less than 0x100- **8-bit UTF-8 mode** - less than 0x10ffff and a valid codepoint- **16-bit non-UTF mode** - less than 0x10000- **16-bit UTF-16 mode** - less than 0x10ffff and a valid codepoint- **32-bit non-UTF mode** - less than 0x100000000- **32-bit UTF-32 mode** - less than 0x10ffff and a valid codepoint
< Invalid Unicode codepoints are the range 0xd800 to 0xdfff (the so-called
< "surrogate" codepoints), and 0xffef.
---
> - **8-bit non-UTF mode** - no greater than 0xff- **16-bit non-UTF mode** - no greater than 0xffff- **32-bit non-UTF mode** - no greater than 0xffffffff- **All UTF modes** - no greater than 0x10ffff and a valid code point
> Invalid Unicode code points are all those in the range 0xd800 to 0xdfff (the
> so-called "surrogate" code points). The check for these can be disabled by the
> caller of `pcre2\_compile()` by setting the option
> PCRE2_EXTRA_ALLOW_SURROGATE_ESCAPES. However, this is possible only in UTF-8
> and UTF-32 modes, because these values are not representable in UTF-16.
442,446c588,591
< \eN is not allowed in a character class. \eB, \eR, and \eX are not special
< inside a character class. Like other unrecognized escape sequences, they are
< treated as the literal characters "B", "R", and "X" by default, but cause an
< error if the PCRE_EXTRA option is set. Outside a character class, these
< sequences have different meanings.
---
> When not followed by an opening brace, \eN is not allowed in a character class.
> \eB, \eR, and \eX are not special inside a character class. Like other
> unrecognized alphabetic escape sequences, they cause an error. Outside a
> character class, these sequences have different meanings.
453,457c598,603
< In Perl, the sequences \el, \eL, \eu, and \eU are recognized by its string
< handler and used to modify the case of following characters. By default, PCRE
< does not support these escape sequences. However, if the PCRE_JAVASCRIPT_COMPAT
< option is set, \eU matches a "U" character, and \eu can be used to define a
< character by code point, as described in the previous section.
---
> In Perl, the sequences \eF, \el, \eL, \eu, and \eU are recognized by its string
> handler and used to modify the case of following characters. By default, PCRE2
> does not support these escape sequences in patterns. However, if either of the
> PCRE2_ALT_BSUX or PCRE2_EXTRA_ALT_BSUX options is set, \eU matches a "U"
> character, and \eu can be used to define a character by code point, as
> described above.
459c605
< <a name="absolute-and-relative-back-references"></a>
---
> <a name="absolute-and-relative-backreferences"></a>
461c607
< _Absolute and relative back references_
---
> _Absolute and relative backreferences_
464,466c610,612
< The sequence \eg followed by an unsigned or a negative number, optionally
< enclosed in braces, is an absolute or relative back reference. A named back
< reference can be coded as \eg{name}. Back references are discussed
---
> The sequence \eg followed by a signed or unsigned number, optionally enclosed
> in braces, is an absolute or relative backreference. A named backreference
> can be coded as \eg{name}. Backreferences are discussed
469c615
< parenthesized subpatterns.
---
> parenthesized groups.
478c624
< syntax for referencing a subpattern as a "subroutine". Details are discussed
---
> syntax for referencing a capture group as a subroutine. Details are discussed
481c627
< synonymous. The former is a back reference; the latter is a
---
> synonymous. The former is a backreference; the latter is a
495a642
> - **`\eN`** - any character that is not a newline
503,504c650
< There is also the single sequence \eN, which matches a non-newline character.
< This is the same as
---
> The \eN escape sequence has the same meaning as
506,507c652,657
< when PCRE_DOTALL is not set. Perl also uses \eN to match characters by name;
< PCRE does not support this.
---
> when PCRE2_DOTALL is not set, but setting PCRE2_DOTALL does not change the
> meaning of \eN. Note that when \eN is followed by an opening brace it has a
> different meaning. See the section entitled
> "Non-printing characters"
> above for details. Perl also uses \eN{name} to specify characters by Unicode
> name; PCRE2 does not support this.
516,522c666,669
< For compatibility with Perl, \es did not used to match the VT character (code
< 11), which made it different from the the POSIX "space" class. However, Perl
< added VT at release 5.18, and PCRE followed suit at release 8.34. The default
< \es characters are now HT (9), LF (10), VT (11), FF (12), CR (13), and space
< (32), which are defined as white space in the "C" locale. This list may vary if
< locale-specific matching is taking place. For example, in some locales the
< "non-breaking space" character (\exA0) is recognized as white space, and in
---
> The default \es characters are HT (9), LF (10), VT (11), FF (12), CR (13), and
> space (32), which are defined as white space in the "C" locale. This list may
> vary if locale-specific matching is taking place. For example, in some locales
> the "non-breaking space" character (\exA0) is recognized as white space, and in
526c673
< By default, the definition of letters and digits is controlled by PCRE's
---
> By default, the definition of letters and digits is controlled by PCRE2's
531c678
< `pcreapi`
---
> `pcre2api`
538,539c685,686
< \es, or \ew, and always match \eD, \eS, and \eW, although this may vary for
< characters in the range 128-255 when locale-specific matching is happening.
---
> \es, or \ew, and always match \eD, \eS, and \eW, although this may be different
> for characters in the range 128-255 when locale-specific matching is happening.
541,544c688,690
< support was available, mainly for efficiency reasons. If PCRE is compiled with
< Unicode property support, and the PCRE_UCP option is set, the behaviour is
< changed so that Unicode properties are used to determine character types, as
< follows:
---
> support was available, mainly for efficiency reasons. If the PCRE2_UCP option
> is set, the behaviour is changed so that Unicode properties are used to
> determine character types, as follows:
549c695
< \ew  any character that matches \ep{L} or \ep{N}, plus underscore
---
> \ew  any character that matches \ep{L}, \ep{N}, \ep{Mn}, or \ep{Pc}
550a697,700
> The addition of \ep{Mn} (non-spacing mark) and the replacement of an explicit
> test for underscore with a test for \ep{Pc} (connector punctuation) happened in
> PCRE2 release 10.43. This brings PCRE2 into line with Perl.
> 
553c703
< any Unicode letter, and underscore. Note also that PCRE_UCP affects \eb, and
---
> other character categories. Note also that PCRE2_UCP affects \eb, and
555c705
< is noticeably slower when PCRE_UCP is set.
---
> is noticeably slower when PCRE2_UCP is set.
557,560c707,715
< The sequences \eh, \eH, \ev, and \eV are features that were added to Perl at
< release 5.10. In contrast to the other sequences, which match only ASCII
< characters by default, these always match certain high-valued code points,
< whether or not PCRE_UCP is set. The horizontal space characters are:
---
> The effect of PCRE2_UCP on any one of these escape sequences can be negated by
> the options PCRE2_EXTRA_ASCII_BSD, PCRE2_EXTRA_ASCII_BSS, and
> PCRE2_EXTRA_ASCII_BSW, respectively. These options can be set and reset within
> a pattern by means of an internal option setting
> (see below).
> 
> The sequences \eh, \eH, \ev, and \eV, in contrast to the other sequences, which
> match only ASCII characters by default, always match a specific list of code
> points, whether or not PCRE2_UCP is set. The horizontal space characters are:
566,567c721,722
< In 8-bit, non-UTF-8 mode, only the characters with codepoints less than 256 are
< relevant.
---
> In 8-bit, non-UTF-8 mode, only the characters with code points less than 256
> are relevant.
586,587c741,742
< line, U+0085). The two-character sequence is treated as a single unit that
< cannot be split.
---
> line, U+0085). Because this is an atomic group, the two-character sequence is
> treated as a single unit that cannot be split.
589c744
< In other modes, two additional characters whose codepoints are greater than 255
---
> In other modes, two additional characters whose code points are greater than 255
591,592c746
< Unicode character property support is not needed for these characters to be
< recognized.
---
> Unicode support is not needed for these characters to be recognized.
595,600c749,754
< complete set of Unicode line endings) by setting the option PCRE_BSR_ANYCRLF
< either at compile time or when the pattern is matched. (BSR is an abbreviation
< for "backslash R".) This can be made the default when PCRE is built; if this is
< the case, the other behaviour can be requested via the PCRE_BSR_UNICODE option.
< It is also possible to specify these settings by starting a pattern string with
< one of the following sequences:
---
> complete set of Unicode line endings) by setting the option PCRE2_BSR_ANYCRLF
> at compile time. (BSR is an abbreviation for "backslash R".) This can be made
> the default when PCRE2 is built; if this is the case, the other behaviour can
> be requested via the PCRE2_BSR_UNICODE option. It is also possible to specify
> these settings by starting a pattern string with one of the following
> sequences:
605,610c759,763
< These override the default and the options given to the compiling function, but
< they can themselves be overridden by options given to a matching function. Note
< that these special settings, which are not Perl-compatible, are recognized only
< at the very start of a pattern, and that they must be in upper case. If more
< than one of them is present, the last one is used. They can be combined with a
< change of newline convention; for example, a pattern can start with:
---
> These override the default and the options given to the compiling function.
> Note that these special settings, which are not Perl-compatible, are recognized
> only at the very start of a pattern, and that they must be in upper case. If
> more than one of them is present, the last one is used. They can be combined
> with a change of newline convention; for example, a pattern can start with:
615,618c768,770
< They can also be combined with the (*UTF8), (*UTF16), (*UTF32), (*UTF) or
< (*UCP) special sequences. Inside a character class, \eR is treated as an
< unrecognized escape sequence, and so matches the letter "R" by default, but
< causes an error if PCRE_EXTRA is set.
---
> They can also be combined with the (*UTF) or (*UCP) special sequences. Inside a
> character class, \eR is treated as an unrecognized escape sequence, and causes
> an error.
625,629c777,791
< When PCRE is built with Unicode character property support, three additional
< escape sequences that match characters with specific properties are available.
< When in 8-bit non-UTF-8 mode, these sequences are of course limited to testing
< characters whose codepoints are less than 256, but they do work in this mode.
< The extra escape sequences are:
---
> When PCRE2 is built with Unicode support (the default), three additional escape
> sequences that match characters with specific properties are available. They
> can be used in any mode, though in 8-bit and 16-bit non-UTF modes these
> sequences are of course limited to testing characters whose code points are
> less than U+0100 or U+10000, respectively. In 32-bit non-UTF mode, code points
> greater than 0x10ffff (the Unicode limit) may be encountered. These are all
> treated as being in the Unknown script and with an unassigned type.
> 
> Matching characters by Unicode property is not fast, because PCRE2 has to do a
> multistage table lookup in order to find a character's property. That is why
> the traditional escape sequences such as \ed and \ew do not use Unicode
> properties in PCRE2 by default, though you can make them do so by setting the
> PCRE2_UCP option or by starting the pattern with (*UCP).
> 
> The extra escape sequences that provide property support are:
635,641c797,825
< The property names represented by _xx_ above are limited to the Unicode
< script names, the general category properties, "Any", which matches any
< character (including newline), and some special PCRE properties (described
< in the
< next section).
< Other Perl properties such as "InMusicalSymbols" are not currently supported by
< PCRE. Note that \eP{Any} does not match any characters, so always causes a
---
> For compatibility with Perl, negation can be specified by including a
> circumflex between the opening brace and the property. For example, \ep{^Lu} is
> the same as \eP{Lu}.
> 
> In accordance with Unicode's "loose matching" rules, ASCII white space
> characters, hyphens, and underscores are ignored in the properties represented
> by _xx_ above. As well as the space character, ASCII white space can be
> tab, linefeed, vertical tab, formfeed, or carriage return.
> 
> Some properties are specified as a name only; others as a name and a value,
> separated by a colon or an equals sign. The names and values consist of ASCII
> letters and digits (with one Perl-specific exception, see below). They are not
> case sensitive. Note, however, that the escapes themselves, \ep and \eP,
> _are_ case sensitive. There are abbreviations for many names. The following
> examples are all equivalent:
> 
> ```text
> \ep{bidiclass=al}
> \ep{BC=al}
> \ep{ Bidi_Class : AL }
> \ep{ Bi-di class = Al }
> \eP{ ^ Bi-di class = Al }
> ```
> There is support for Unicode script names, Unicode general category properties,
> "Any", which matches any character (including newline), Bidi_Class, a number of
> binary (yes/no) properties, and some special PCRE2 properties (described
> below).
> Certain other Perl properties such as "InMusicalSymbols" are not supported by
> PCRE2. Note that \eP{Any} does not match any characters, so always causes a
644,646c828,849
< Sets of Unicode characters are defined as belonging to certain scripts. A
< character from one of these sets can be matched using a script name. For
< example:
---
> <a name="script-properties-for-ep-and-ep"></a>
> 
> _Script properties for \ep and \eP_
> 
> 
> There are three different syntax forms for matching a script. Each Unicode
> character has a basic script and, optionally, a list of other scripts ("Script
> Extensions") with which it is commonly used. Using the Adlam script as an
> example, \ep{sc:Adlam} matches characters whose basic script is Adlam, whereas
> \ep{scx:Adlam} matches, in addition, characters that have Adlam in their
> extensions list. The full names "script" and "script extensions" for the
> property types are recognized and, as for all property specifications, an
> equals sign is an alternative to the colon. If a script name is given without a
> property type, for example, \ep{Adlam}, it is treated as \ep{scx:Adlam}. Perl
> changed to this interpretation at release 5.26 and PCRE2 changed at release
> 10.40.
> 
> Unassigned characters (and in non-UTF 32-bit mode, characters with code points
> greater than 0x10FFFF) are assigned the "Unknown" script. Others that are not
> part of an identified script are lumped together as "Common". The current list
> of recognized script names and their 4-character abbreviations can be obtained
> by running this command:
649,653c852,857
< \ep{Greek}
< \eP{Han}
< ```
< Those that are not part of an identified script are lumped together as
< "Common". The current list of scripts is:
---
> pcre2test -LS
> 
> 
> <a name="the-general-category-property-for-ep-and-ep"></a>
> 
> _The general category property for \ep and \eP_
655,779d858
< Arabic,
< Armenian,
< Avestan,
< Balinese,
< Bamum,
< Bassa_Vah,
< Batak,
< Bengali,
< Bopomofo,
< Brahmi,
< Braille,
< Buginese,
< Buhid,
< Canadian_Aboriginal,
< Carian,
< Caucasian_Albanian,
< Chakma,
< Cham,
< Cherokee,
< Common,
< Coptic,
< Cuneiform,
< Cypriot,
< Cyrillic,
< Deseret,
< Devanagari,
< Duployan,
< Egyptian_Hieroglyphs,
< Elbasan,
< Ethiopic,
< Georgian,
< Glagolitic,
< Gothic,
< Grantha,
< Greek,
< Gujarati,
< Gurmukhi,
< Han,
< Hangul,
< Hanunoo,
< Hebrew,
< Hiragana,
< Imperial_Aramaic,
< Inherited,
< Inscriptional_Pahlavi,
< Inscriptional_Parthian,
< Javanese,
< Kaithi,
< Kannada,
< Katakana,
< Kayah_Li,
< Kharoshthi,
< Khmer,
< Khojki,
< Khudawadi,
< Lao,
< Latin,
< Lepcha,
< Limbu,
< Linear_A,
< Linear_B,
< Lisu,
< Lycian,
< Lydian,
< Mahajani,
< Malayalam,
< Mandaic,
< Manichaean,
< Meetei_Mayek,
< Mende_Kikakui,
< Meroitic_Cursive,
< Meroitic_Hieroglyphs,
< Miao,
< Modi,
< Mongolian,
< Mro,
< Myanmar,
< Nabataean,
< New_Tai_Lue,
< Nko,
< Ogham,
< Ol_Chiki,
< Old_Italic,
< Old_North_Arabian,
< Old_Permic,
< Old_Persian,
< Old_South_Arabian,
< Old_Turkic,
< Oriya,
< Osmanya,
< Pahawh_Hmong,
< Palmyrene,
< Pau_Cin_Hau,
< Phags_Pa,
< Phoenician,
< Psalter_Pahlavi,
< Rejang,
< Runic,
< Samaritan,
< Saurashtra,
< Sharada,
< Shavian,
< Siddham,
< Sinhala,
< Sora_Sompeng,
< Sundanese,
< Syloti_Nagri,
< Syriac,
< Tagalog,
< Tagbanwa,
< Tai_Le,
< Tai_Tham,
< Tai_Viet,
< Takri,
< Tamil,
< Telugu,
< Thaana,
< Thai,
< Tibetan,
< Tifinagh,
< Tirhuta,
< Ugaritic,
< Vai,
< Warang_Citi,
< Yi.
782,789c861,864
< a two-letter abbreviation. For compatibility with Perl, negation can be
< specified by including a circumflex between the opening brace and the property
< name. For example, \ep{^Lu} is the same as \eP{Lu}.
< 
< If only one letter is specified with \ep or \eP, it includes all the general
< category properties that start with that letter. In this case, in the absence
< of negation, the curly brackets in the escape sequence are optional; these two
< examples have the same effect:
---
> a two-letter abbreviation. If only one letter is specified with \ep or \eP, it
> includes all the general category properties that start with that letter. In
> this case, in the absence of negation, the curly brackets in the escape
> sequence are optional; these two examples have the same effect:
798c873
< - **L** - Letter- **Ll** - Lower case letter- **Lm** - Modifier letter- **Lo** - Other letter- **Lt** - Title case letter- **Lu** - Upper case letter
---
> - **L** - Letter- **Lc** - Cased letter- **Ll** - Lower case letter- **Lm** - Modifier letter- **Lo** - Other letter- **Lt** - Title case letter- **Lu** - Upper case letter
804,814c879,894
< The special property L& is also supported: it matches a character that has
< the Lu, Ll, or Lt property, in other words, a letter that is not classified as
< a modifier or "other".
< 
< The Cs (Surrogate) property applies only to characters in the range U+D800 to
< U+DFFF. Such characters are not valid in Unicode strings and so
< cannot be tested by PCRE, unless UTF validity checking has been turned off
< (see the discussion of PCRE_NO_UTF8_CHECK, PCRE_NO_UTF16_CHECK and
< PCRE_NO_UTF32_CHECK in the
< `pcreapi`
< page). Perl does not support the Cs property.
---
> Perl originally used the name L& for the Lc property. This is still supported
> by Perl, but discouraged. PCRE2 also still supports it. This property matches
> any character that has the Lu, Ll, or Lt property, in other words, any letter
> that is not classified as a modifier or "other". From release 10.45 of PCRE2
> the properties Lu, Ll, and Lt are all treated as Lc when case-independent
> matching is set by the PCRE2_CASELESS option or (?i) within the pattern. The
> other properties are not affected by caseless matching.
> 
> The Cs (Surrogate) property applies only to characters whose code points are in
> the range U+D800 to U+DFFF. These characters are no different to any other
> character when PCRE2 is not in UTF mode (using the 16-bit or 32-bit library).
> However, they are not valid in Unicode strings and so cannot be tested by PCRE2
> in UTF mode, unless UTF validity checking has been turned off (see the
> discussion of PCRE2_NO_UTF_CHECK in the
> `pcre2api`
> page).
817c897
< are not supported by PCRE, nor is it permitted to prefix any of these
---
> are not supported by PCRE2, nor is it permitted to prefix any of these
824,826c904
< Specifying caseless matching does not affect these escape sequences. For
< example, \ep{Lu} always matches only upper case letters. This is different from
< the behaviour of current versions of Perl.
---
> <a name="binary-yesno-properties-for-ep-and-ep"></a>
828,832c906,930
< Matching characters by Unicode property is not fast, because PCRE has to do a
< multistage table lookup in order to find a character's property. That is why
< the traditional escape sequences such as \ed and \ew do not use Unicode
< properties in PCRE by default, though you can make them do so by setting the
< PCRE_UCP option or by starting the pattern with (*UCP).
---
> _Binary (yes/no) properties for \ep and \eP_
> 
> 
> Unicode defines a number of binary properties, that is, properties whose only
> values are true or false. You can obtain a list of those that are recognized by
> \ep and \eP, along with their abbreviations, by running this command:
> 
> ```text
> pcre2test -LP
> 
> 
> <a name="the-bidi_class-property-for-ep-and-ep"></a>
> 
> _The Bidi_Class property for \ep and \eP_
> 
> 
> - **`\ep{Bidi_Class:&lt;class&gt;}`** - matches a character with the given class
> - **`\ep{BC:&lt;class&gt;}`** - matches a character with the given class
> 
> The recognized classes are:
> 
> - **AL** - Arabic letter- **AN** - Arabic number- **B** - paragraph separator- **BN** - boundary neutral- **CS** - common separator- **EN** - European number- **ES** - European separator- **ET** - European terminator- **FSI** - first strong isolate- **L** - left-to-right- **LRE** - left-to-right embedding- **LRI** - left-to-right isolate- **LRO** - left-to-right override- **NSM** - non-spacing mark- **ON** - other neutral- **PDF** - pop directional format- **PDI** - pop directional isolate- **R** - right-to-left- **RLE** - right-to-left embedding- **RLI** - right-to-left isolate- **RLO** - right-to-left override- **S** - segment separator- **WS** - white space
> As in all property specifications, an equals sign may be used instead of a
> colon and the class names are case-insensitive. Only the short names listed
> above are recognized; PCRE2 does not at present support any long alternatives.
842,856c940,946
< Up to and including release 8.31, PCRE matched an earlier, simpler definition
< that was equivalent to
< 
< ```text
< (?&gt;\ePM\epM*)
< 
< That is, it matched a character without the "mark" property, followed by zero
< or more characters with the "mark" property. Characters with the "mark"
< property are typically non-spacing accents that affect the preceding character.
< 
< This simple definition was extended in Unicode to include more complicated
< kinds of composite character by giving each character a grapheme breaking
< property, and creating rules that use these properties to define the boundaries
< of extended grapheme clusters. In releases of PCRE later than 8.31, \eX matches
< one of these clusters.
---
> Unicode supports various kinds of composite character by giving each character
> a grapheme breaking property, and having rules that use these properties to
> define the boundaries of extended grapheme clusters. The rules are defined in
> Unicode Standard Annex 29, "Unicode Text Segmentation". Unicode 11.0.0
> abandoned the use of some previous properties that had been used for emojis.
> Instead it introduced various emoji-specific properties. PCRE2 uses only the
> Extended Pictographic property.
870,871c960,962
< 4. Do not end before extending characters or spacing marks. Characters with
< the "mark" property always have the "extend" grapheme breaking property.
---
> 4. Do not end before extending characters or spacing marks or the zero-width
> joiner (ZWJ) character. Characters with the "mark" property always have the
> "extend" grapheme breaking property.
875c966,970
< 6. Otherwise, end the cluster.
---
> 6. Do not end within emoji modifier sequences or emoji ZWJ (zero-width
> joiner) sequences. An emoji ZWJ sequence consists of a character with the
> Extended_Pictographic property, optionally followed by one or more characters
> with the Extend property, followed by the ZWJ character, followed by another
> Extended_Pictographic character.
877c972,974
< <a name="pcres-additional-properties"></a>
---
> 7. Do not break within emoji flag sequences. That is, do not break between
> regional indicator (RI) characters if there are an odd number of RI characters
> before the break point.
879c976
< _PCRE's additional properties_
---
> 8. Otherwise, end the cluster.
880a978
> <a name="pcre2s-additional-properties"></a>
882c980,983
< As well as the standard Unicode properties described above, PCRE supports four
---
> _PCRE2's additional properties_
> 
> 
> As well as the standard Unicode properties described above, PCRE2 supports four
884,885c985,986
< and \es to use Unicode properties. PCRE uses these non-standard, non-Perl
< properties internally when PCRE_UCP is set. However, they may also be used
---
> and \es to use Unicode properties. PCRE2 uses these non-standard, non-Perl
> properties internally when PCRE2_UCP is set. However, they may also be used
891,894c992,996
< carriage return, and any other character that has the Z (separator) property.
< Xsp is the same as Xps; it used to exclude vertical tab, for Perl
< compatibility, but Perl changed, and so PCRE followed at release 8.34. Xwd
< matches the same characters as Xan, plus underscore.
---
> carriage return, and any other character that has the Z (separator) property
> (this includes the space character). Xsp is the same as Xps; in PCRE1 it used
> to exclude vertical tab, for Perl compatibility, but Perl changed. Xwd matches
> the same characters as Xan, plus those that match Mn (non-spacing mark) or Pc
> (connector punctuation, which includes underscore).
910,911c1012,1014
< The escape sequence \eK causes any previously matched characters not to be
< included in the final matched sequence. For example, the pattern:
---
> In normal use, the escape sequence \eK causes any previously matched characters
> not to be included in the final matched sequence that is returned. For example,
> the pattern:
916,921c1019,1031
< matches "foobar", but reports that it has matched "bar". This feature is
< similar to a lookbehind assertion
< (described below).
< However, in this case, the part of the subject before the real match does not
< have to be of fixed length, as lookbehind assertions do. The use of \eK does
< not interfere with the setting of
---
> matches "foobar", but reports that it has matched "bar". \eK does not interact
> with anchoring in any way. The pattern:
> 
> ```text
> ^foo\eKbar
> 
> matches only when the subject begins with "foobar" (in single line mode),
> though it again reports the matched string as "bar". This feature is similar to
> a lookbehind assertion
> (described below),
> but the part of the pattern that precedes \eK is not constrained to match a
> limited number of characters, as is required for a lookbehind assertion. The
> use of \eK does not interfere with the setting of
930,931c1040,1044
< Perl documents that the use of \eK within assertions is "not well defined". In
< PCRE, \eK is acted upon when it occurs inside positive assertions, but is
---
> From version 5.32.0 Perl forbids the use of \eK in lookaround assertions. From
> release 10.38 PCRE2 also forbids this by default. However, the
> PCRE2_EXTRA_ALLOW_LOOKAROUND_BSK option can be used when calling
> `pcre2\_compile()` to re-enable the previous behaviour. When this option is
> set, \eK is acted upon when it occurs inside positive assertions, but is
934c1047,1055
< match.
---
> match. Using \eK in a lookbehind assertion at the start of a pattern can also
> lead to odd effects. For example, consider this pattern:
> 
> ```text
> (?&lt;=\eKfoo)bar
> 
> If the subject is "foobar", a call to `pcre2\_match()` with a starting
> offset of 3 succeeds and reports the matching string as "foobar", that is, the
> start of the reported match is earlier than where the match started.
944c1065
< subpatterns for more complicated assertions is described
---
> groups for more complicated assertions is described
957,960c1078,1079
< character. If any other of these assertions appears in a character class, by
< default it matches the corresponding literal character (for example, \eB
< matches the letter B). However, if the PCRE_EXTRA option is set, an "invalid
< escape sequence" error is generated instead.
---
> character. If any other of these assertions appears in a character class, an
> "invalid escape sequence" error is generated.
965,970c1084,1089
< first or last character matches \ew, respectively. In a UTF mode, the meanings
< of \ew and \eW can be changed by setting the PCRE_UCP option. When this is
< done, it also affects \eb and \eB. Neither PCRE nor Perl has a separate "start
< of word" or "end of word" metasequence. However, whatever follows \eb normally
< determines which it is. For example, the fragment \eba matches "a" at the start
< of a word.
---
> first or last character matches \ew, respectively. When PCRE2 is built with
> Unicode support, the meanings of \ew and \eW can be changed by setting the
> PCRE2_UCP option. When this is done, it also affects \eb and \eB. Neither PCRE2
> nor Perl has a separate "start of word" or "end of word" metasequence. However,
> whatever follows \eb normally determines which it is. For example, the fragment
> \eba matches "a" at the start of a word.
976c1095
< PCRE_NOTBOL or PCRE_NOTEOL options, which affect only the behaviour of the
---
> PCRE2_NOTBOL or PCRE2_NOTEOL options, which affect only the behaviour of the
978,981c1097,1101
< argument of `pcre\_exec()` is non-zero, indicating that matching is to start
< at a point other than the beginning of the subject, \eA can never match. The
< difference between \eZ and \ez is that \eZ matches before a newline at the end
< of the string as well as at the very end, whereas \ez matches only at the end.
---
> argument of `pcre2\_match()` is non-zero, indicating that matching is to
> start at a point other than the beginning of the subject, \eA can never match.
> The difference between \eZ and \ez is that \eZ matches before a newline at the
> end of the string as well as at the very end, whereas \ez matches only at the
> end.
984,994c1104,1114
< start point of the match, as specified by the _startoffset_ argument of
< `pcre\_exec()`. It differs from \eA when the value of _startoffset_ is
< non-zero. By calling `pcre\_exec()` multiple times with appropriate
< arguments, you can mimic Perl's /g option, and it is in this kind of
< implementation where \eG can be useful.
< 
< Note, however, that PCRE's interpretation of \eG, as the start of the current
< match, is subtly different from Perl's, which defines it as the end of the
< previous match. In Perl, these can be different when the previously matched
< string was empty. Because PCRE does just one match at a time, it cannot
< reproduce this behaviour.
---
> start point of the matching process, as specified by the _startoffset_
> argument of `pcre2\_match()`. It differs from \eA when the value of
> _startoffset_ is non-zero. By calling `pcre2\_match()` multiple times
> with appropriate arguments, you can mimic Perl's /g option, and it is in this
> kind of implementation where \eG can be useful.
> 
> Note, however, that PCRE2's implementation of \eG, being true at the starting
> character of the matching process, is subtly different from Perl's, which
> defines it as true at the end of the previous match. In Perl, these can be
> different when the previously matched string was empty. Because PCRE2 does just
> one match at a time, it cannot reproduce this behaviour.
1007c1127,1131
< characters from the subject string.
---
> characters from the subject string. These two metacharacters are concerned with
> matching the starts and ends of lines. If the newline convention is set so that
> only the two-character sequence CRLF is recognized as a newline, isolated CR
> and LF characters are treated as ordinary data characters, and are not
> recognized as newlines.
1012,1014c1136,1138
< `pcre\_exec()` is non-zero, circumflex can never match if the PCRE_MULTILINE
< option is unset. Inside a character class, circumflex has an entirely different
< meaning
---
> `pcre2\_match()` is non-zero, or if PCRE2_NOTBOL is set, circumflex can
> never match if the PCRE2_MULTILINE option is unset. Inside a character class,
> circumflex has an entirely different meaning
1027,1030c1151,1155
< the end of the string (by default). Note, however, that it does not actually
< match the newline. Dollar need not be the last character of the pattern if a
< number of alternatives are involved, but it should be the last item in any
< branch in which it appears. Dollar has no special meaning in a character class.
---
> the end of the string (by default), unless PCRE2_NOTEOL is set. Note, however,
> that it does not actually match the newline. Dollar need not be the last
> character of the pattern if a number of alternatives are involved, but it
> should be the last item in any branch in which it appears. Dollar has no
> special meaning in a character class.
1033c1158
< the string, by setting the PCRE_DOLLAR_ENDONLY option at compile time. This
---
> the string, by setting the PCRE2_DOLLAR_ENDONLY option at compile time. This
1036,1042c1161,1167
< The meanings of the circumflex and dollar characters are changed if the
< PCRE_MULTILINE option is set. When this is the case, a circumflex matches
< immediately after internal newlines as well as at the start of the subject
< string. It does not match after a newline that ends the string. A dollar
< matches before any newlines in the string, as well as at the very end, when
< PCRE_MULTILINE is set. When newline is specified as the two-character
< sequence CRLF, isolated CR and LF characters do not indicate newlines.
---
> The meanings of the circumflex and dollar metacharacters are changed if the
> PCRE2_MULTILINE option is set. When this is the case, a dollar character
> matches before any newlines in the string, as well as at the very end, and a
> circumflex matches immediately after internal newlines as well as at the start
> of the subject string. It does not match after a newline that ends the string,
> for compatibility with Perl. However, this can be changed by setting the
> PCRE2_ALT_CIRCUMFLEX option.
1048,1049c1173,1183
< when the _startoffset_ argument of `pcre\_exec()` is non-zero. The
< PCRE_DOLLAR_ENDONLY option is ignored if PCRE_MULTILINE is set.
---
> when the _startoffset_ argument of `pcre2\_match()` is non-zero. The
> PCRE2_DOLLAR_ENDONLY option is ignored if PCRE2_MULTILINE is set.
> 
> When the newline convention (see
> "Newline conventions"
> below) recognizes the two-character sequence CRLF as a newline, this is
> preferred, even if the single characters CR and LF are also recognized as
> newlines. For example, if the newline convention is "any", a multiline mode
> circumflex matches before "xyz" in the string "abc\er\enxyz" rather than after
> CR, even though CR on its own is a valid newline. (It also matches at the very
> start of the string, of course.)
1053c1187
< \eA it is always anchored, whether or not PCRE_MULTILINE is set.
---
> \eA it is always anchored, whether or not PCRE2_MULTILINE is set.
1062c1196,1198
< line.
---
> line. One or more characters may be specified as line terminators (see
> "Newline conventions"
> above).
1064,1074c1200,1210
< When a line ending is defined as a single character, dot never matches that
< character; when the two-character sequence CRLF is used, dot does not match CR
< if it is immediately followed by LF, but otherwise it matches all characters
< (including isolated CRs and LFs). When any Unicode line endings are being
< recognized, dot does not match CR or LF or any of the other line ending
< characters.
< 
< The behaviour of dot with regard to newlines can be changed. If the PCRE_DOTALL
< option is set, a dot matches any one character, without exception. If the
< two-character sequence CRLF is present in the subject string, it takes two dots
< to match it.
---
> Dot never matches a single line-ending character. When the two-character
> sequence CRLF is the only line ending, dot does not match CR if it is
> immediately followed by LF, but otherwise it matches all characters (including
> isolated CRs and LFs). When ANYCRLF is selected for line endings, no occurrences
> of CR of LF match dot. When all Unicode line endings are being recognized, dot
> does not match CR or LF or any of the other line ending characters.
> 
> The behaviour of dot with regard to newlines can be changed. If the
> PCRE2_DOTALL option is set, a dot matches any one character, without exception.
> If the two-character sequence CRLF is present in the subject string, it takes
> two dots to match it.
1080,1101c1216,1229
< The escape sequence \eN behaves like a dot, except that it is not affected by
< the PCRE_DOTALL option. In other words, it matches any character except one
< that signifies the end of a line. Perl also uses \eN to match characters by
< name; PCRE does not support this.
< 
< <a name="matching-a-single-data-unit"></a>
< 
< ## Matching a Single Data Unit
< 
< 
< Outside a character class, the escape sequence \eC matches any one data unit,
< whether or not a UTF mode is set. In the 8-bit library, one data unit is one
< byte; in the 16-bit library it is a 16-bit unit; in the 32-bit library it is
< a 32-bit unit. Unlike a dot, \eC always
< matches line-ending characters. The feature is provided in Perl in order to
< match individual bytes in UTF-8 mode, but it is unclear how it can usefully be
< used. Because \eC breaks up characters into individual data units, matching one
< unit with \eC in a UTF mode means that the rest of the string may start with a
< malformed UTF character. This has undefined results, because PCRE assumes that
< it is dealing with valid UTF strings (and by default it checks this at the
< start of processing unless the PCRE_NO_UTF8_CHECK, PCRE_NO_UTF16_CHECK or
< PCRE_NO_UTF32_CHECK option is used).
---
> The escape sequence \eN when not followed by an opening brace behaves like a
> dot, except that it is not affected by the PCRE2_DOTALL option. In other words,
> it matches any character except one that signifies the end of a line.
> 
> When \eN is followed by an opening brace it has a different meaning. See the
> section entitled
> "Non-printing characters"
> above for details. Perl also uses \eN{name} to specify characters by Unicode
> name; PCRE2 does not support this.
> 
> <a name="matching-a-single-code-unit"></a>
> 
> ## Matching a Single Code Unit
> 
1103c1231,1249
< PCRE does not allow \eC to appear in lookbehind assertions
---
> Outside a character class, the escape sequence \eC matches any one code unit,
> whether or not a UTF mode is set. In the 8-bit library, one code unit is one
> byte; in the 16-bit library it is a 16-bit unit; in the 32-bit library it is a
> 32-bit unit. Unlike a dot, \eC always matches line-ending characters. The
> feature is provided in Perl in order to match individual bytes in UTF-8 mode,
> but it is unclear how it can usefully be used.
> 
> Because \eC breaks up characters into individual code units, matching one unit
> with \eC in UTF-8 or UTF-16 mode means that the rest of the string may start
> with a malformed UTF character. This has undefined results, because PCRE2
> assumes that it is matching character by character in a valid UTF string (by
> default it checks the subject string's validity at the start of processing
> unless the PCRE2_NO_UTF_CHECK or PCRE2_MATCH_INVALID_UTF option is used).
> 
> An application can lock out the use of \eC by setting the
> PCRE2_NEVER_BACKSLASH_C option when compiling a pattern. It is also possible to
> build PCRE2 with the use of \eC permanently disabled.
> 
> PCRE2 does not allow \eC to appear in lookbehind assertions
1105,1106c1251,1259
< in a UTF mode, because this would make it impossible to calculate the length of
< the lookbehind.
---
> in UTF-8 or UTF-16 modes, because this would make it impossible to calculate
> the length of the lookbehind. Neither the alternative matching function
> `pcre2\_dfa\_match()` nor the JIT optimizer support \eC in these UTF modes.
> The former gives a match-time error; the latter fails to optimize and so the
> match is always run using the interpreter.
> 
> In the 32-bit library, however, \eC is always supported (when not explicitly
> locked out) because it always matches a single code unit, whether or not UTF-32
> is specified.
1108,1109c1261,1262
< In general, the \eC escape sequence is best avoided. However, one
< way of using it that avoids the problem of malformed UTF characters is to use a
---
> In general, the \eC escape sequence is best avoided. However, one way of using
> it that avoids the problem of malformed UTF-8 or UTF-16 characters is to use a
1119,1121c1272,1274
< A group that starts with (?| resets the capturing parentheses numbers in each
< alternative (see
< "Duplicate Subpattern Numbers"
---
> In this example, a group that starts with (?| resets the capturing parentheses
> numbers in each alternative (see
> "Duplicate Group Numbers"
1125c1278
< groups.
---
> \eC groups.
1134,1145c1287,1298
< However, if the PCRE_JAVASCRIPT_COMPAT option is set, a lone closing square
< bracket causes a compile-time error. If a closing square bracket is required as
< a member of the class, it should be the first data character in the class
< (after an initial circumflex, if present) or escaped with a backslash.
< 
< A character class matches a single character in the subject. In a UTF mode, the
< character may be more than one data unit long. A matched character must be in
< the set of characters defined by the class, unless the first character in the
< class definition is a circumflex, in which case the subject character must not
< be in the set defined by the class. If a circumflex is actually required as a
< member of the class, ensure it is not the first character, or escape it with a
< backslash.
---
> If a closing square bracket is required as a member of the class, it should be
> the first data character in the class (after an initial circumflex, if present)
> or escaped with a backslash. This means that, by default, an empty class cannot
> be defined. However, if the PCRE2_ALLOW_EMPTY_CLASS option is set, a closing
> square bracket at the start does end the (empty) class.
> 
> A character class matches a single character in the subject. A matched
> character must be in the set of characters defined by the class, unless the
> first character in the class definition is a circumflex, in which case the
> subject character must not be in the set defined by the class. If a circumflex
> is actually required as a member of the class, ensure it is not the first
> character, or escape it with a backslash.
1155,1168c1308,1315
< In UTF-8 (UTF-16, UTF-32) mode, characters with values greater than 255 (0xffff)
< can be included in a class as a literal string of data units, or by using the
< \ex{ escaping mechanism.
< 
< When caseless matching is set, any letters in a class represent both their
< upper case and lower case versions, so for example, a caseless [aeiou] matches
< "A" as well as "a", and a caseless [^aeiou] does not match "A", whereas a
< caseful version would. In a UTF mode, PCRE always understands the concept of
< case for characters whose values are less than 128, so caseless matching is
< always possible. For characters with higher values, the concept of case is
< supported if PCRE is compiled with Unicode property support, but not otherwise.
< If you want to use caseless matching in a UTF mode for characters 128 and
< above, you must ensure that PCRE is compiled with Unicode property support as
< well as with UTF support.
---
> Characters in a class may be specified by their code points using \eo, \ex, or
> \eN{U+hh..} in the usual way. When caseless matching is set, any letters in a
> class represent both their upper case and lower case versions, so for example,
> a caseless [aeiou] matches "A" as well as "a", and a caseless [^aeiou] does not
> match "A", whereas a caseful version would. Note that there are two ASCII
> characters, K and S, that, in addition to their lower case ASCII equivalents,
> are case-equivalent with Unicode U+212A (Kelvin sign) and U+017F (long S)
> respectively when either PCRE2_UTF or PCRE2_UCP is set.
1172,1173c1319,1333
< whatever setting of the PCRE_DOTALL and PCRE_MULTILINE options is used. A class
< such as [^a] always matches one of these characters.
---
> whatever setting of the PCRE2_DOTALL and PCRE2_MULTILINE options is used. A
> class such as [^a] always matches one of these characters.
> 
> The generic character type escape sequences \ed, \eD, \eh, \eH, \ep, \eP, \es,
> \eS, \ev, \eV, \ew, and \eW may appear in a character class, and add the
> characters that they match to the class. For example, [\edABCDEF] matches any
> hexadecimal digit. In UTF modes, the PCRE2_UCP option affects the meanings of
> \ed, \es, \ew and their upper case partners, just as it does when they appear
> outside a character class, as described in the section entitled
> "Generic character types"
> above. The escape sequence \eb has a different meaning inside a character
> class; it matches the backspace character. The sequences \eB, \eR, and \eX are
> not special inside a character class. Like any other unrecognized escape
> sequences, they cause an error. The same is true for \eN when not followed by
> an opening brace.
1179,1181c1339,1347
< indicating a range, typically as the first or last character in the class, or
< immediately after a range. For example, [b-d-z] matches letters in the range b
< to d, a hyphen character, or z.
---
> indicating a range, typically as the first or last character in the class,
> or immediately after a range. For example, [b-d-z] matches letters in the range
> b to d, a hyphen character, or z.
> 
> Perl treats a hyphen as a literal if it appears before or after a POSIX class
> (see below) or before or after a character type escape such as \ed or \eH.
> However, unless the hyphen is the last character in the class, Perl outputs a
> warning in its warning mode, as this is most likely a user error. As PCRE2 has
> no facility for warning, an error is given in these cases.
1191,1198c1357,1372
< An error is generated if a POSIX character class (see below) or an escape
< sequence other than one that defines a single character appears at a point
< where a range ending character is expected. For example, [z-\exff] is valid,
< but [A-\ed] and [A-[:digit:]] are not.
< 
< Ranges operate in the collating sequence of character values. They can also be
< used for characters specified numerically, for example [\e000-\e037]. Ranges
< can include any characters that are valid for the current mode.
---
> Ranges normally include all code points between the start and end characters,
> inclusive. They can also be used for code points specified numerically, for
> example [\e000-\e037]. Ranges can include any characters that are valid for the
> current mode. In any UTF mode, the so-called "surrogate" characters (those
> whose code points lie between 0xd800 and 0xdfff inclusive) may not be specified
> explicitly by default (the PCRE2_EXTRA_ALLOW_SURROGATE_ESCAPES option disables
> this check). However, ranges such as [\ex{d7ff}-\ex{e000}], which include the
> surrogates, are always permitted.
> 
> There is a special case in EBCDIC environments for ranges whose end points are
> both specified as literal letters in the same case. For compatibility with
> Perl, EBCDIC code points within the range that are not letters are omitted. For
> example, [h-k] matches only four characters, even though the codes for h and k
> are 0x88 and 0x92, a range of 11 code points. However, if the range is
> specified numerically, for example, [\ex88-\ex92] or [h-\ex92], all code points
> are included.
1204,1219c1378
< characters in both cases. In UTF modes, PCRE supports the concept of case for
< characters with values greater than 128 only when it is compiled with Unicode
< property support.
< 
< The character escape sequences \ed, \eD, \eh, \eH, \ep, \eP, \es, \eS, \ev,
< \eV, \ew, and \eW may appear in a character class, and add the characters that
< they match to the class. For example, [\edABCDEF] matches any hexadecimal
< digit. In UTF modes, the PCRE_UCP option affects the meanings of \ed, \es, \ew
< and their upper case partners, just as it does when they appear outside a
< character class, as described in the section entitled
< "Generic character types"
< above. The escape sequence \eb has a different meaning inside a character
< class; it matches the backspace character. The sequences \eB, \eN, \eR, and \eX
< are not special inside a character class. Like any other unrecognized escape
< sequences, they are treated as the literal characters "B", "N", "R", and "X" by
< default, but cause an error if the PCRE_EXTRA option is set.
---
> characters in both cases.
1234a1394,1440
> <a name="uts18-extended-character-classes"></a>
> 
> ## Uts#18 Extended Character Classes
> 
> The PCRE2_ALT_EXTENDED_CLASS option enables an alternative to Perl's "(?[...])"
> syntax, allowing instead extended class behaviour inside ordinary "[...]"
> character classes. This altered syntax for "[...]" classes is loosely described
> by the Unicode standard UTS#18.
> 
> Firstly, in Perl syntax, an expression such as "[a[]" is a character class
> with two literal characters "a" and "[", but in UTS#18 extended classes the "["
> character becomes an additional metacharacter within classes, denoting the start
> of a nested class, so a literal "[" must be escaped as "\e[".
> 
> Secondly, within the UTS#18 extended syntax, there are additional operators
> "||", "&&" and "--" which denote character class union, intersection, and
> subtraction respectively. In standard Perl syntax, these would simply be
> needlessly-repeated literals (except for "-" which can denote a range). These
> operators can be used in constructs such as "[\ep{L}--[QW]]" for "Unicode
> letters, other than Q and W". A literal "-" at the end of a range must be
> escaped (so while "[--1]" in Perl syntax is the range from hyphen to "1", it
> must be escaped as "[\e--1]" in UTS#18 extended classes).
> 
> The specific rules in PCRE2 are that classes can be nested:
> "[...[B]...[^C]...]". The individual class items (literal characters, literal
> ranges, properties such as \ed or \ep{...}, and nested classes) can be
> combined by juxtaposition or by an operator "||", "&&", or "--".
> Juxtaposition is the implicit union operator, and binds more tightly than any
> explicit operator. Precedence between the explicit operators is not defined,
> so mixing operators is a syntax error (thus "[A&&B--C]" is an error, but
> "[A&&[B--C]]" is accepted).
> 
> This is an emerging syntax which is being adopted gradually across the regex
> ecosystem: for example JavaScript adopted the "/v" flag in ECMAScript 2024;
> Python's "re" module reserves the syntax for future use with a FutureWarning
> for unescaped use of "[" as a literal within character classes. Due to UTS#18
> providing insufficient guidance, engines interpret the syntax differently.
> Rust's "regex" crate and Python's "regex" PyPi module both implement UTS#18
> extended classes, but with slight incompatibilities ("[A||B&&C]" is parsed as
> "[A||[B&&C]]" in Python's "regex" but as "[[A||B]&&C]" in Rust's "regex").
> 
> PCRE2's syntax adds syntax restrictions similar to ECMASCript's /v flag, so
> that all the extended classes accepted as valid by PCRE2 have the property
> that they are interpreted either with the same behaviour, or as invalid, by
> all other major engines. Please file an issue if you are aware of cross-engine
> differences in behaviour between PCRE2 and another major engine.
> 
1241c1447
< enclosed by [: and :] within the enclosing square brackets. PCRE also supports
---
> enclosed by [: and :] within the enclosing square brackets. PCRE2 also supports
1250c1456
< - **alnum** - letters and digits- **alpha** - letters- **ascii** - character codes 0 - 127- **blank** - space or tab only- **cntrl** - control characters- **digit** - decimal digits (same as \ed)- **graph** - printing characters, excluding space- **lower** - lower case letters- **print** - printing characters, including space- **punct** - printing characters, excluding letters and digits and space- **space** - white space (the same as \es from PCRE 8.34)- **upper** - upper case letters- **word** - "word" characters (same as \ew)- **xdigit** - hexadecimal digits
---
> - **alnum** - letters and digits- **alpha** - letters- **ascii** - character codes 0 - 127- **blank** - space or tab only- **cntrl** - control characters- **digit** - decimal digits (same as \ed)- **graph** - printing characters, excluding space- **lower** - lower case letters- **print** - printing characters, including space- **punct** - printing characters, excluding letters and digits and space- **space** - white space (the same as \es from PCRE2 8.34)- **upper** - upper case letters- **word** - "word" characters (same as \ew)- **xdigit** - hexadecimal digits
1253,1256c1459,1460
< characters may be different; there may be fewer or more of them. "Space" used
< to be different to \es, which did not include VT, for Perl compatibility.
< However, Perl changed at release 5.18, and PCRE followed at release 8.34.
< "Space" and \es now match the same set of characters.
---
> characters may be different; there may be fewer or more of them. "Space" and
> \es match the same set of characters, as do "word" and \ew.
1265c1469
< matches "1", "2", or any non-digit. PCRE (and Perl) also recognize the POSIX
---
> matches "1", "2", or any non-digit. PCRE2 (and Perl) also recognize the POSIX
1269,1273c1473,1478
< By default, characters with values greater than 128 do not match any of the
< POSIX character classes. However, if the PCRE_UCP option is passed to
< `pcre\_compile()`, some of the classes are changed so that Unicode character
< properties are used. This is achieved by replacing certain POSIX classes by
< other sequences, as follows:
---
> By default, characters with values greater than 127 do not match any of the
> POSIX character classes, although this may be different for characters in the
> range 128-255 when locale-specific matching is happening. However, in UCP mode,
> unless certain options are set (see below), some of the classes are changed so
> that Unicode character properties are used. This is achieved by replacing
> POSIX classes with other sequences, as follows:
1278a1484
> [:cntrl:]  becomes  \ep{Cc}
1285c1491
< Negated versions, such as [:^alpha:] use \eP instead of \ep. Three other POSIX
---
> Negated versions, such as [:^alpha:] use \eP instead of \ep. Four other POSIX
1301,1305c1507,1522
< plus those characters whose code points are less than 128 that have the S
< (Symbol) property.
< ```
< The other POSIX classes are unchanged, and match only characters with code
< points less than 128.
---
> plus those characters with code points less than 256 that have the S (Symbol)
> property.
> * [:xdigit:]  
> In addition to the ASCII hexadecimal digits, this also matches the "fullwidth"
> versions of those characters, whose Unicode code points start at U+FF10. This
> is a change that was made in PCRE release 10.43 for Perl compatibility.
> ```
> The other POSIX classes are unchanged by PCRE2_UCP, and match only characters
> with code points less than 256.
> 
> There are two options that can be used to restrict the POSIX classes to ASCII
> characters when PCRE2_UCP is set. The option PCRE2_EXTRA_ASCII_DIGIT affects
> just [:digit:] and [:xdigit:]. Within a pattern, this can be set and unset by
> (?aT) and (?-aT). The PCRE2_EXTRA_ASCII_POSIX option disables UCP processing
> for all POSIX classes, including [:digit:] and [:xdigit:]. Within a pattern,
> (?aP) and (?-aP) set and unset both these options for consistency.
1314c1531
< word". PCRE treats these items as follows:
---
> word". PCRE2 treats these items as follows:
1328c1545,1547
< used above in order to give exactly the POSIX behaviour.
---
> used above in order to give exactly the POSIX behaviour. Note also that the
> PCRE2_UCP option changes the meaning of \ew (and therefore \eb) by default, so
> it also affects these POSIX sequences.
1344c1563
< that succeeds is used. If the alternatives are within a subpattern
---
> that succeeds is used. If the alternatives are within a group
1347c1566
< alternative in the subpattern.
---
> alternative in the group.
1354,1357c1573,1577
< The settings of the PCRE_CASELESS, PCRE_MULTILINE, PCRE_DOTALL, and
< PCRE_EXTENDED options (which are Perl-compatible) can be changed from within
< the pattern by a sequence of Perl option letters enclosed between "(?" and ")".
< The option letters are
---
> The settings of several options can be changed within a pattern by a sequence
> of letters enclosed between "(?" and ")". The following are Perl-compatible,
> and are described in detail in the
> `pcre2api`
> documentation. The option letters are:
1360,1363c1580,1585
< i  for PCRE_CASELESS
< m  for PCRE_MULTILINE
< s  for PCRE_DOTALL
< x  for PCRE_EXTENDED
---
> i  for PCRE2_CASELESS
> m  for PCRE2_MULTILINE
> n  for PCRE2_NO_AUTO_CAPTURE
> s  for PCRE2_DOTALL
> x  for PCRE2_EXTENDED
> xx for PCRE2_EXTENDED_MORE
1366,1379c1588,1628
< unset these options by preceding the letter with a hyphen, and a combined
< setting and unsetting such as (?im-sx), which sets PCRE_CASELESS and
< PCRE_MULTILINE while unsetting PCRE_DOTALL and PCRE_EXTENDED, is also
< permitted. If a letter appears both before and after the hyphen, the option is
< unset.
< 
< The PCRE-specific options PCRE_DUPNAMES, PCRE_UNGREEDY, and PCRE_EXTRA can be
< changed in the same way as the Perl-compatible options by using the characters
< J, U and X respectively.
< 
< When one of these option changes occurs at top level (that is, not inside
< subpattern parentheses), the change applies to the remainder of the pattern
< that follows. An option change within a subpattern (see below for a description
< of subpatterns) affects only that part of the subpattern that follows it, so
---
> unset these options by preceding the relevant letters with a hyphen, for
> example (?-im). The two "extended" options are not independent; unsetting
> either one cancels the effects of both of them.
> 
> A combined setting and unsetting such as (?im-sx), which sets PCRE2_CASELESS
> and PCRE2_MULTILINE while unsetting PCRE2_DOTALL and PCRE2_EXTENDED, is also
> permitted. Only one hyphen may appear in the options string. If a letter
> appears both before and after the hyphen, the option is unset. An empty options
> setting "(?)" is allowed. Needless to say, it has no effect.
> 
> If the first character following (? is a circumflex, it causes all of the above
> options to be unset. Letters may follow the circumflex to cause some options to
> be re-instated, but a hyphen may not appear.
> 
> Some PCRE2-specific options can be changed by the same mechanism using these
> pairs or individual letters:
> 
> ```text
> aD for PCRE2_EXTRA_ASCII_BSD
> aS for PCRE2_EXTRA_ASCII_BSS
> aW for PCRE2_EXTRA_ASCII_BSW
> aP for PCRE2_EXTRA_ASCII_POSIX and PCRE2_EXTRA_ASCII_DIGIT
> aT for PCRE2_EXTRA_ASCII_DIGIT
> r  for PCRE2_EXTRA_CASELESS_RESTRICT
> J  for PCRE2_DUPNAMES
> U  for PCRE2_UNGREEDY
> ```
> However, except for 'r', these are not unset by (?^), which is equivalent to
> (?-imnrsx). If 'a' is not followed by any of the upper case letters shown
> above, it sets (or unsets) all the ASCII options.
> 
> PCRE2_EXTRA_ASCII_DIGIT has no additional effect when PCRE2_EXTRA_ASCII_POSIX
> is set, but including it in (?aP) means that (?-aP) suppresses all ASCII
> restrictions for POSIX classes.
> 
> When one of these option changes occurs at top level (that is, not inside group
> parentheses), the change applies until a subsequent change, or the end of the
> pattern. An option change within a group (see below for a description of
> groups) affects only that part of the group that follows it. At the end of the
> group these options are reset to the state they were before the group. For
> example,
1384,1387c1633,1635
< matches abc and aBc and no other strings (assuming PCRE_CASELESS is not used).
< By this means, options can be made to have different settings in different
< parts of the pattern. Any changes made in one alternative do carry on
< into subsequent branches within the same subpattern. For example,
---
> matches abc and aBc and no other strings (assuming PCRE2_CASELESS is not set
> externally). Any changes made in one alternative do carry on into subsequent
> branches within the same group. For example,
1397,1401c1645,1659
< `Note:` There are other PCRE-specific options that can be set by the
< application when the compiling or matching functions are called. In some cases
< the pattern can contain special leading sequences such as (*CRLF) to override
< what the application has set or what has been defaulted. Details are given in
< the section entitled
---
> As a convenient shorthand, if any option settings are required at the start of
> a non-capturing group (see the next section), the option letters may
> appear between the "?" and the ":". Thus the two patterns
> 
> ```text
> (?i:saturday|sunday)
> (?:(?i)saturday|sunday)
> ```
> match exactly the same set of strings.
> 
> `Note:` There are other PCRE2-specific options, applying to the whole
> pattern, which can be set by the application when the compiling function is
> called. In addition, the pattern can contain special leading sequences such as
> (*CRLF) to override what the application has set or what has been defaulted.
> Details are given in the section entitled
1403,1408c1661,1665
< above. There are also the (*UTF8), (*UTF16),(*UTF32), and (*UCP) leading
< sequences that can be used to set UTF and Unicode property modes; they are
< equivalent to setting the PCRE_UTF8, PCRE_UTF16, PCRE_UTF32 and the PCRE_UCP
< options, respectively. The (*UTF) sequence is a generic version that can be
< used with any of the libraries. However, the application can set the
< PCRE_NEVER_UTF option, which locks out the use of the (*UTF) sequences.
---
> above. There are also the (*UTF) and (*UCP) leading sequences that can be used
> to set UTF and Unicode property modes; they are equivalent to setting the
> PCRE2_UTF and PCRE2_UCP options, respectively. However, the application can set
> the PCRE2_NEVER_UTF or PCRE2_NEVER_UCP options, which lock out the use of the
> (*UTF) and (*UCP) sequences.
1410c1667
< <a name="subpatterns"></a>
---
> <a name="groups"></a>
1412c1669
< ## Subpatterns
---
> ## Groups
1415,1416c1672,1673
< Subpatterns are delimited by parentheses (round brackets), which can be nested.
< Turning part of a pattern into a subpattern does two things:
---
> Groups are delimited by parentheses (round brackets), which can be nested.
> Turning part of a pattern into a group does two things:
1426,1430c1683,1687
< 2. It sets up the subpattern as a capturing subpattern. This means that, when
< the whole pattern matches, that portion of the subject string that matched the
< subpattern is passed back to the caller via the _ovector_ argument of the
< matching function. (This applies only to the traditional matching functions;
< the DFA matching functions do not support capturing.)
---
> 2. It creates a "capture group". This means that, when the whole pattern
> matches, the portion of the subject string that matched the group is passed
> back to the caller, separately from the portion that matched the whole pattern.
> (This applies only to the traditional matching function; the DFA matching
> function does not support capturing.)
1433,1434c1690,1691
< numbers for the capturing subpatterns. For example, if the string "the red
< king" is matched against the pattern
---
> numbers for capture groups. For example, if the string "the red king" is
> matched against the pattern
1443,1447c1700,1704
< There are often times when a grouping subpattern is required without a
< capturing requirement. If an opening parenthesis is followed by a question mark
< and a colon, the subpattern does not do any capturing, and is not counted when
< computing the number of any subsequent capturing subpatterns. For example, if
< the string "the white queen" is matched against the pattern
---
> There are often times when grouping is required without capturing. If an
> opening parenthesis is followed by a question mark and a colon, the group
> does not do any capturing, and is not counted when computing the number of any
> subsequent capture groups. For example, if the string "the white queen"
> is matched against the pattern
1453c1710
< 2. The maximum number of capturing subpatterns is 65535.
---
> 2. The maximum number of capture groups is 65535.
1456,1457c1713,1714
< a non-capturing subpattern, the option letters may appear between the "?" and
< the ":". Thus the two patterns
---
> a non-capturing group, the option letters may appear between the "?" and the
> ":". Thus the two patterns
1464,1465c1721,1722
< from left to right, and options are not reset until the end of the subpattern
< is reached, an option setting in one branch does affect subsequent branches, so
---
> from left to right, and options are not reset until the end of the group is
> reached, an option setting in one branch does affect subsequent branches, so
1468c1725
< <a name="duplicate-subpattern-numbers"></a>
---
> <a name="duplicate-group-numbers"></a>
1470c1727
< ## Duplicate Subpattern Numbers
---
> ## Duplicate Group Numbers
1473,1476c1730,1732
< Perl 5.10 introduced a feature whereby each alternative in a subpattern uses
< the same numbers for its capturing parentheses. Such a subpattern starts with
< (?| and is itself a non-capturing subpattern. For example, consider this
< pattern:
---
> Perl 5.10 introduced a feature whereby each alternative in a group uses the
> same numbers for its capturing parentheses. Such a group starts with (?| and is
> itself a non-capturing group. For example, consider this pattern:
1487c1743
< parentheses that follow the subpattern start after the highest number used in
---
> parentheses that follow the whole group start after the highest number used in
1496,1498c1752,1753
< A back reference to a numbered subpattern uses the most recent value that is
< set for that number by any subpattern. The following pattern matches "abcabc"
< or "defdef":
---
> A backreference to a capture group uses the most recent value that is set for
> the group. The following pattern matches "abcabc" or "defdef":
1503c1758
< In contrast, a subroutine call to a numbered subpattern always refers to the
---
> In contrast, a subroutine call to a capture group always refers to the
1509a1765,1767
> A relative reference such as (?-1) is no different: it is just a convenient way
> of computing an absolute group number.
> 
1512,1513c1770,1771
< for a subpattern's having matched refers to a non-unique number, the test is
< true if any of the subpatterns of that number have matched.
---
> for a group's having matched refers to a non-unique number, the test is
> true if any group with that number has matched.
1516c1774,1778
< duplicate named subpatterns, as described in the next section.
---
> duplicate named groups, as described in the next section.
> 
> <a name="named-capture-groups"></a>
> 
> ## Named Capture Groups
1518d1779
< <a name="named-subpatterns"></a>
1520c1781,1786
< ## Named Subpatterns
---
> Identifying capture groups by number is simple, but it can be very hard to keep
> track of the numbers in complicated patterns. Furthermore, if an expression is
> modified, the numbers may change. To help with this difficulty, PCRE2 supports
> the naming of capture groups. This feature was not added to Perl until release
> 5.10. Python had the feature earlier, and PCRE1 introduced it at release 4.0,
> using the Python syntax. PCRE2 supports both the Perl and the Python syntax.
1521a1788,1794
> In PCRE2, a capture group can be named in one of three ways: (?&lt;name&gt;...) or
> (?'name'...) as in Perl, or (?P&lt;name&gt;...) as in Python. Names may be up to 128
> code units long. When PCRE2_UTF is not set, they may contain only ASCII
> alphanumeric characters and underscores, but must start with a non-digit. When
> PCRE2_UTF is set, the syntax of group names is extended to allow any Unicode
> letter or Unicode decimal digit. In other words, group names must match one of
> these patterns:
1523,1535c1796,1800
< Identifying capturing parentheses by number is simple, but it can be very hard
< to keep track of the numbers in complicated regular expressions. Furthermore,
< if an expression is modified, the numbers may change. To help with this
< difficulty, PCRE supports the naming of subpatterns. This feature was not
< added to Perl until release 5.10. Python had the feature earlier, and PCRE
< introduced it at release 4.0, using the Python syntax. PCRE now supports both
< the Perl and the Python syntax. Perl allows identically numbered subpatterns to
< have different names, but PCRE does not.
< 
< In PCRE, a subpattern can be named in one of three ways: (?&lt;name&gt;...) or
< (?'name'...) as in Perl, or (?P&lt;name&gt;...) as in Python. References to capturing
< parentheses from other parts of the pattern, such as
< back references,
---
> - **`^[_A-Za-z][_A-Za-z0-9]*\ez`** - when PCRE2_UTF is not set
> ^[_\ep{L}][_\ep{L}\ep{Nd}]*\ez  when PCRE2_UTF is set
> ```
> References to capture groups from other parts of the pattern, such as
> backreferences,
1539c1804,1822
< can be made by name as well as by number.
---
> can all be made by name as well as by number.
> 
> Named capture groups are allocated numbers as well as names, exactly as
> if the names were not present. In both PCRE2 and Perl, capture groups
> are primarily identified by numbers; any names are just aliases for these
> numbers. The PCRE2 API provides function calls for extracting the complete
> name-to-number translation table from a compiled pattern, as well as
> convenience functions for extracting captured substrings by name.
> 
> `Warning:` When more than one capture group has the same number, as
> described in the previous section, a name given to one of them applies to all
> of them. Perl allows identically numbered groups to have different names.
> Consider this pattern, where there are two capture groups, both numbered 1:
> 
> ```text
> (?|(?&lt;AA&gt;aa)|(?&lt;BB&gt;bb))
> 
> Perl allows this, with both names AA and BB as aliases of group 1. Thus, after
> a successful match, both names yield the same value (either "aa" or "bb").
1541,1555c1824,1827
< Names consist of up to 32 alphanumeric characters and underscores, but must
< start with a non-digit. Named capturing parentheses are still allocated numbers
< as well as names, exactly as if the names were not present. The PCRE API
< provides function calls for extracting the name-to-number translation table
< from a compiled pattern. There is also a convenience function for extracting a
< captured substring by name.
< 
< By default, a name must be unique within a pattern, but it is possible to relax
< this constraint by setting the PCRE_DUPNAMES option at compile time. (Duplicate
< names are also always permitted for subpatterns with the same number, set up as
< described in the previous section.) Duplicate names can be useful for patterns
< where only one instance of the named parentheses can match. Suppose you want to
< match the name of a weekday, either as a 3-letter abbreviation or as the full
< name, and in both cases you want to extract the abbreviation. This pattern
< (ignoring the line breaks) does the job:
---
> In an attempt to reduce confusion, PCRE2 does not allow the same group number
> to be associated with more than one name. The example above provokes a
> compile-time error. However, there is still scope for confusion. Consider this
> pattern:
1557a1830,1855
> (?|(?&lt;AA&gt;aa)|(bb))
> 
> Although the second group number 1 is not explicitly named, the name AA is
> still an alias for any group 1. Whether the pattern matches "aa" or "bb", a
> reference by name to group AA yields the matched string.
> 
> By default, a name must be unique within a pattern, except that duplicate names
> are permitted for groups with the same number, for example:
> 
> ```text
> (?|(?&lt;AA&gt;aa)|(?&lt;AA&gt;bb))
> 
> The duplicate name constraint can be disabled by setting the PCRE2_DUPNAMES
> option at compile time, or by the use of (?J) within the pattern, as described
> in the section entitled
> "Internal Option Setting"
> above.
> 
> Duplicate names can be useful for patterns where only one instance of the named
> capture group can match. Suppose you want to match the name of a weekday,
> either as a 3-letter abbreviation or as the full name, and in both cases you
> want to extract the abbreviation. This pattern (ignoring the line breaks) does
> the job:
> 
> ```text
> (?J)
1564,1566c1862,1867
< There are five capturing substrings, but only one is ever set after a match.
< (An alternative way of solving this problem is to use a "branch reset"
< subpattern, as described in the previous section.)
---
> There are five capture groups, but only one is ever set after a match. The
> convenience functions for extracting the data by name returns the substring for
> the first (and in this example, the only) group of that name that matched. This
> saves searching to find which numbered group it was. (An alternative way of
> solving this problem is to use a "branch reset" group, as described in the
> previous section.)
1568,1576c1869,1873
< The convenience function for extracting the data by name returns the substring
< for the first (and in this example, the only) subpattern of that name that
< matched. This saves searching to find which numbered subpattern it was.
< 
< If you make a back reference to a non-unique named subpattern from elsewhere in
< the pattern, the subpatterns to which the name refers are checked in the order
< in which they appear in the overall pattern. The first one that is set is used
< for the reference. For example, this pattern matches both "foofoo" and
< "barbar" but not "foobar" or "barfoo":
---
> If you make a backreference to a non-unique named group from elsewhere in the
> pattern, the groups to which the name refers are checked in the order in which
> they appear in the overall pattern. The first one that is set is used for the
> reference. For example, this pattern matches both "foofoo" and "barbar" but not
> "foobar" or "barfoo":
1579c1876
< (?:(?&lt;n&gt;foo)|(?&lt;n&gt;bar))\ek&lt;n&gt;
---
> (?J)(?:(?&lt;n&gt;foo)|(?&lt;n&gt;bar))\ek&lt;n&gt;
1582c1879
< If you make a subroutine call to a non-unique named subpattern, the one that
---
> If you make a subroutine call to a non-unique named group, the one that
1584,1585c1881
< duplicate numbers (see the previous section) this is the one with the lowest
< number.
---
> duplicate numbers this is the one with the lowest number.
1590,1595c1886,1891
< below), either to check whether a subpattern has matched, or to check for
< recursion, all subpatterns with the same name are tested. If the condition is
< true for any one of them, the overall condition is true. This is the same
< behaviour as testing by number. For further details of the interfaces for
< handling named subpatterns, see the
< `pcreapi`
---
> below), either to check whether a capture group has matched, or to check for
> recursion, all groups with the same name are tested. If the condition is true
> for any one of them, the overall condition is true. This is the same behaviour
> as testing by number. For further details of the interfaces for handling named
> capture groups, see the
> `pcre2api`
1598,1604d1893
< `Warning:` You cannot use different names to distinguish between two
< subpatterns with the same number because PCRE uses only the numbers when
< matching. For this reason, an error is given at compile time if different names
< are given to subpatterns with the same number. However, you can always give the
< same name to subpatterns with the same number, even when PCRE_DUPNAMES is not
< set.
< 
1610c1899
< Repetition is specified by quantifiers, which can follow any of the following
---
> Repetition is specified by quantifiers, which may follow any one of these
1617d1905
< the \eX escape sequence
1619c1907,1908
< an escape such as \ed or \epL that matches a single character
---
> the \eX escape sequence
> any escape sequence that matches a single character
1621,1628c1910,1918
< a back reference (see next section)
< a parenthesized subpattern (including assertions)
< a subroutine call to a subpattern (recursive or otherwise)
< ```
< The general repetition quantifier specifies a minimum and maximum number of
< permitted matches, by giving the two numbers in curly brackets (braces),
< separated by a comma. The numbers must be less than 65536, and the first must
< be less than or equal to the second. For example:
---
> a backreference
> a parenthesized group (including lookaround assertions)
> a subroutine call (recursive or otherwise)
> ```
> If a quantifier does not follow a repeatable item, an error occurs. The
> general repetition quantifier specifies a minimum and maximum number of
> permitted matches by giving two numbers in curly brackets (braces), separated
> by a comma. The numbers must be less than 65536, and the first must be less
> than or equal to the second. For example,
1641c1931
< matches at least 3 successive vowels, but may match many more, while
---
> matches at least 3 successive vowels, but may match many more, whereas
1646,1649c1936,1944
< matches exactly 8 digits. An opening curly bracket that appears in a position
< where a quantifier is not allowed, or one that does not match the syntax of a
< quantifier, is taken as a literal character. For example, {,6} is not a
< quantifier, but a literal string of four characters.
---
> matches exactly 8 digits. If the first number is omitted, the lower limit is
> taken as zero; in this case the upper limit must be present.
> 
> ```text
> X{,4} is interpreted as X{0,4}
> 
> This is a change in behaviour that happened in Perl 5.34.0 and PCRE2 10.43. In
> earlier versions such a sequence was not interpreted as a quantifier. Other
> regular expression engines may behave either way.
1651c1946,1953
< In UTF modes, quantifiers apply to characters rather than to individual data
---
> If the characters that follow an opening brace do not match the syntax of a
> quantifier, the brace is taken as a literal character. In particular, this
> means that {,} is a literal string of three characters.
> 
> Note that not every opening brace is potentially the start of a quantifier
> because braces are used in other items such as \eN{U+345} or \ek{name}.
> 
> In UTF modes, quantifiers apply to characters rather than to individual code
1655c1957
< several data units long (and they may be of different lengths).
---
> several code units long (and they may be of different lengths).
1659c1961
< subpatterns that are referenced as
---
> capture groups that are referenced as
1662,1664c1964,1966
< "Defining subpatterns for use by reference only"
< below). Items other than subpatterns that have a {0} quantifier are omitted
< from the compiled pattern.
---
> "Defining capture groups for use by reference only"
> below). Except for parenthesized groups, items that have a {0} quantifier are
> omitted from the compiled pattern.
1673,1674c1975,1976
< It is possible to construct infinite loops by following a subpattern that can
< match no characters with a quantifier that has no upper limit, for example:
---
> It is possible to construct infinite loops by following a group that can match
> no characters with a quantifier that has no upper limit, for example:
1679c1981
< Earlier versions of Perl and PCRE used to give an error at compile time for
---
> Earlier versions of Perl and PCRE1 used to give an error at compile time for
1681,1688c1983,1992
< patterns are now accepted, but if any repetition of the subpattern does in fact
< match no characters, the loop is forcibly broken.
< 
< By default, the quantifiers are "greedy", that is, they match as much as
< possible (up to the maximum number of permitted times), without causing the
< rest of the pattern to fail. The classic example of where this gives problems
< is in trying to match comments in C programs. These appear between /* and */
< and within the comment, individual * and / characters may appear. An attempt to
---
> patterns are now accepted, but whenever an iteration of such a group matches no
> characters, matching moves on to the next item in the pattern instead of
> repeatedly matching an empty string. This does not prevent backtracking into
> any of the iterations if a subsequent item fails to match.
> 
> By default, quantifiers are "greedy", that is, they match as much as possible
> (up to the maximum number of permitted repetitions), without causing the rest
> of the pattern to fail. The classic example of where this gives problems is in
> trying to match comments in C programs. These appear between /* and */ and
> within the comment, individual * and / characters may appear. An attempt to
1700,1702c2004
< item.
< 
< However, if a quantifier is followed by a question mark, it ceases to be
---
> item. However, if a quantifier is followed by a question mark, it ceases to be
1709,1712c2011,2014
< does the right thing with the C comments. The meaning of the various
< quantifiers is not otherwise changed, just the preferred number of matches.
< Do not confuse this use of question mark with its use as a quantifier in its
< own right. Because it has two uses, it can sometimes appear doubled, as in
---
> does the right thing with C comments. The meaning of the various quantifiers is
> not otherwise changed, just the preferred number of matches. Do not confuse
> this use of question mark with its use as a quantifier in its own right.
> Because it has two uses, it can sometimes appear doubled, as in
1720c2022
< If the PCRE_UNGREEDY option is set (an option that is not available in Perl),
---
> If the PCRE2_UNGREEDY option is set (an option that is not available in Perl),
1725c2027
< When a parenthesized subpattern is quantified with a minimum repeat count that
---
> When a parenthesized group is quantified with a minimum repeat count that
1729c2031
< If a pattern starts with .* or .{0,} and the PCRE_DOTALL option (equivalent
---
> If a pattern starts with .* or .{0,} and the PCRE2_DOTALL option (equivalent
1733c2035
< overall match at any position after the first. PCRE normally treats such a
---
> overall match at any position after the first. PCRE2 normally treats such a
1737,1738c2039,2040
< worth setting PCRE_DOTALL in order to obtain this optimization, or
< alternatively using ^ to indicate anchoring explicitly.
---
> worth setting PCRE2_DOTALL in order to obtain this optimization, or
> alternatively, using ^ to indicate anchoring explicitly.
1741c2043
< is inside capturing parentheses that are the subject of a back reference
---
> is inside capturing parentheses that are the subject of a backreference
1759c2061,2063
< (*PRUNE) and (*SKIP) also disable this optimization.
---
> (*PRUNE) and (*SKIP) also disable this optimization. To do so explicitly,
> either pass the compile option PCRE2_NO_DOTSTAR_ANCHOR, or call
> `pcre2\_set\_optimize()` with a PCRE2_DOTSTAR_ANCHOR_OFF directive.
1761,1762c2065,2066
< When a capturing subpattern is repeated, the value captured is the substring
< that matched the final iteration. For example, after
---
> When a capture group is repeated, the value captured is the substring that
> matched the final iteration. For example, after
1768,1770c2072,2073
< "tweedledee". However, if there are nested capturing subpatterns, the
< corresponding captured values may have been set in previous iterations. For
< example, after
---
> "tweedledee". However, if there are nested capture groups, the corresponding
> captured values may have been set in previous iterations. For example, after
1773c2076
< /(a|(b))+/
---
> (a|(b))+
1798c2101
< that once a subpattern has matched, it is not to be re-evaluated in this way.
---
> that once a group has matched, it is not to be re-evaluated in this way.
1807,1808c2110,2117
< This kind of parenthesis "locks up" the  part of the pattern it contains once
< it has matched, and a failure further into the pattern is prevented from
---
> Perl 5.28 introduced an experimental alphabetic form starting with (* which may
> be easier to remember:
> 
> ```text
> (*atomic:\ed+)foo
> 
> This kind of parenthesized group "locks up" the part of the pattern it contains
> once it has matched, and a failure further into the pattern is prevented from
1812,1820c2121,2129
< An alternative description is that a subpattern of this type matches the string
< of characters that an identical standalone pattern would match, if anchored at
< the current point in the subject string.
< 
< Atomic grouping subpatterns are not capturing subpatterns. Simple cases such as
< the above example can be thought of as a maximizing repeat that must swallow
< everything it can. So, while both \ed+ and \ed+? are prepared to adjust the
< number of digits they match in order to make the rest of the pattern match,
< (?&gt;\ed+) can only match an entire sequence of digits.
---
> An alternative description is that a group of this type matches exactly the
> string of characters that an identical standalone pattern would match, if
> anchored at the current point in the subject string.
> 
> Atomic groups are not capture groups. Simple cases such as the above example
> can be thought of as a maximizing repeat that must swallow everything it can.
> So, while both \ed+ and \ed+? are prepared to adjust the number of digits they
> match in order to make the rest of the pattern match, (?&gt;\ed+) can only match
> an entire sequence of digits.
1823c2132
< subpatterns, and can be nested. However, when the subpattern for an atomic
---
> expressions, and can be nested. However, when the contents of an atomic
1838c2147
< Possessive quantifiers are always greedy; the setting of the PCRE_UNGREEDY
---
> Possessive quantifiers are always greedy; the setting of the PCRE2_UNGREEDY
1847,1848c2156,2157
< package, and PCRE copied it from there. It ultimately found its way into Perl
< at release 5.10.
---
> package, and PCRE1 copied it from there. It found its way into Perl at release
> 5.10.
1850c2159
< PCRE has an optimization that automatically "possessifies" certain simple
---
> PCRE2 has an optimization that automatically "possessifies" certain simple
1853,1857c2162,2168
< 
< When a pattern contains an unlimited repeat inside a subpattern that can itself
< be repeated an unlimited number of times, the use of an atomic group is the
< only way to avoid some failing matches taking a very long time indeed. The
< pattern
---
> This feature can be disabled by the PCRE2_NO_AUTO_POSSESS option, by calling
> `pcre2\_set\_optimize()` with a PCRE2_AUTO_POSSESS_OFF directive, or by
> starting the pattern with (*NO_AUTO_POSSESS).
> 
> When a pattern contains an unlimited repeat inside a group that can itself be
> repeated an unlimited number of times, the use of an atomic group is the only
> way to avoid some failing matches taking a very long time indeed. The pattern
1872c2183
< than a single character at the end, because both PCRE and Perl have an
---
> than a single character at the end, because both PCRE2 and Perl have an
1883c2194
< <a name="back-references"></a>
---
> <a name="backreferences"></a>
1885c2196
< ## Back References
---
> ## Backreferences
1889,1899c2200,2209
< possibly further digits) is a back reference to a capturing subpattern earlier
< (that is, to its left) in the pattern, provided there have been that many
< previous capturing left parentheses.
< 
< However, if the decimal number following the backslash is less than 10, it is
< always taken as a back reference, and causes an error only if there are not
< that many capturing left parentheses in the entire pattern. In other words, the
< parentheses that are referenced need not be to the left of the reference for
< numbers less than 10. A "forward back reference" of this type can make sense
< when a repetition is involved and the subpattern to the right has participated
< in an earlier iteration.
---
> possibly further digits) is a backreference to a capture group earlier (that
> is, to its left) in the pattern, provided there have been that many previous
> capture groups.
> 
> However, if the decimal number following the backslash is less than 8, it is
> always taken as a backreference, and causes an error only if there are not that
> many capture groups in the entire pattern. In other words, the group that is
> referenced need not be to the left of the reference for numbers less than 8. A
> "forward backreference" of this type can make sense when a repetition is
> involved and the group to the right has participated in an earlier iteration.
1901,1902c2211,2212
< It is not possible to have a numerical "forward back reference" to a subpattern
< whose number is 10 or more using this syntax because a sequence such as \e50 is
---
> It is not possible to have a numerical "forward backreference" to a group whose
> number is 8 or more using this syntax because a sequence such as \e50 is
1906,1908c2216,2218
< for further details of the handling of digits following a backslash. There is
< no such problem when named parentheses are used. A back reference to any
< subpattern is possible using named parentheses (see below).
---
> for further details of the handling of digits following a backslash. Other
> forms of backreferencing do not suffer from this restriction. In particular,
> there is no problem when named capture groups are used (see below).
1911,1913c2221,2223
< backslash is to use the \eg escape sequence. This escape must be followed by an
< unsigned number or a negative number, optionally enclosed in braces. These
< examples are all identical:
---
> backslash is to use the \eg escape sequence. This escape must be followed by a
> signed or unsigned number, optionally enclosed in braces. These examples are
> all identical:
1922,1923c2232
< the reference. A negative number is a relative reference. Consider this
< example:
---
> the reference. A signed number is a relative reference. Consider this example:
1928,1937c2237,2259
< The sequence \eg{-1} is a reference to the most recently started capturing
< subpattern before \eg, that is, is it equivalent to \e2 in this example.
< Similarly, \eg{-2} would be equivalent to \e1. The use of relative references
< can be helpful in long patterns, and also in patterns that are created by
< joining together fragments that contain references within themselves.
< 
< A back reference matches whatever actually matched the capturing subpattern in
< the current subject string, rather than anything matching the subpattern
< itself (see
< "Subpatterns as subroutines"
---
> The sequence \eg{-1} is a reference to the capture group whose number is one
> less than the number of the next group to be started, so in this example (where
> the next group would be numbered 3) is it equivalent to \e2, and \eg{-2} would
> be equivalent to \e1. Note that if this construct is inside a capture group,
> that group is included in the count, so in this example \eg{-2} also refers to
> group 1:
> 
> ```text
> (A)(\eg{-2}B)
> 
> The use of relative references can be helpful in long patterns, and also in
> patterns that are created by joining together fragments that contain references
> within themselves.
> 
> The sequence \eg{+1} is a reference to the next capture group that is started
> after this item, and \eg{+2} refers to the one after that, and so on. This kind
> of forward reference can be useful in patterns that repeat. Perl does not
> support the use of + in this way.
> 
> A backreference matches whatever actually most recently matched the capture
> group in the current subject string, rather than anything at all that matches
> the group (see
> "Groups as subroutines"
1945c2267
< back reference, the case of letters is relevant. For example,
---
> backreference, the case of letters is relevant. For example,
1951c2273
< capturing subpattern is matched caselessly.
---
> capture group is matched caselessly.
1953,1958c2275,2280
< There are several different ways of writing back references to named
< subpatterns. The .NET syntax \ek{name} and the Perl syntax \ek&lt;name&gt; or
< \ek'name' are supported, as is the Python syntax (?P=name). Perl 5.10's unified
< back reference syntax, in which \eg can be used for both numeric and named
< references, is also supported. We could rewrite the above example in any of
< the following ways:
---
> There are several different ways of writing backreferences to named capture
> groups. The .NET syntax is \ek{name}, the Python syntax is (?=name), and the
> original Perl syntax is \ek&lt;name&gt; or \ek'name'. All of these are now supported
> by both Perl and PCRE2. Perl 5.10's unified backreference syntax, in which \eg
> can be used for both numeric and named references, is also supported by PCRE2.
> We could rewrite the above example in any of the following ways:
1966c2288
< A subpattern that is referenced by name may appear in the pattern before or
---
> A capture group that is referenced by name may appear in the pattern before or
1969,1971c2291,2293
< There may be more than one back reference to the same subpattern. If a
< subpattern has not actually been used in a particular match, any back
< references to it always fail by default. For example, the pattern
---
> There may be more than one backreference to the same group. If a group has not
> actually been used in a particular match, backreferences to it always fail by
> default. For example, the pattern
1977c2299
< PCRE_JAVASCRIPT_COMPAT option is set at compile time, a back reference to an
---
> PCRE2_MATCH_UNSET_BACKREF option is set at compile time, a backreference to an
1980,1984c2302,2306
< Because there may be many capturing parentheses in a pattern, all digits
< following a backslash are taken as part of a potential back reference number.
< If the pattern continues with a digit character, some delimiter must be used to
< terminate the back reference. If the PCRE_EXTENDED option is set, this can be
< white space. Otherwise, the \eg{ syntax or an empty comment (see
---
> Because there may be many capture groups in a pattern, all digits following a
> backslash are taken as part of a potential backreference number. If the pattern
> continues with a digit character, some delimiter must be used to terminate the
> backreference. If the PCRE2_EXTENDED or PCRE2_EXTENDED_MORE option is set, this
> can be white space. Otherwise, the \eg{} syntax or an empty comment (see
1988c2310
< <a name="recursive-back-references"></a>
---
> <a name="recursive-backreferences"></a>
1990c2312
< _Recursive back references_
---
> _Recursive backreferences_
1993,1996c2315,2317
< A back reference that occurs inside the parentheses to which it refers fails
< when the subpattern is first used, so, for example, (a\e1) never matches.
< However, such references can be useful inside repeated subpatterns. For
< example, the pattern
---
> A backreference that occurs inside the group to which it refers fails when the
> group is first used, so, for example, (a\e1) never matches. However, such
> references can be useful inside repeated groups. For example, the pattern
2002,2006c2323,2327
< the subpattern, the back reference matches the character string corresponding
< to the previous iteration. In order for this to work, the pattern must be such
< that the first iteration does not need to match the back reference. This can be
< done using alternation, as in the example above, or by a quantifier with a
< minimum of zero.
---
> the group, the backreference matches the character string corresponding to the
> previous iteration. In order for this to work, the pattern must be such that
> the first iteration does not need to match the backreference. This can be done
> using alternation, as in the example above, or by a quantifier with a minimum
> of zero.
2008,2009c2329,2330
< Back references of this type cause the group that they reference to be treated
< as an
---
> For versions of PCRE2 less than 10.25, backreferences of this type used to
> cause the group that they reference to be treated as an
2011,2012c2332,2333
< Once the whole group has been matched, a subsequent matching failure cannot
< cause backtracking into the middle of the group.
---
> This restriction no longer applies, and backtracking into such groups can occur
> as normal.
2019,2021c2340,2342
< An assertion is a test on the characters following or preceding the current
< matching point that does not actually consume any characters. The simple
< assertions coded as \eb, \eB, \eA, \eG, \eZ, \ez, ^ and $ are described
---
> An assertion is a test that does not consume any characters. The test must
> succeed for the match to continue. The simple assertions coded as \eb, \eB,
> \eA, \eG, \eZ, \ez, ^ and $ are described
2024,2054c2345,2353
< More complicated assertions are coded as subpatterns. There are two kinds:
< those that look ahead of the current position in the subject string, and those
< that look behind it. An assertion subpattern is matched in the normal way,
< except that it does not cause the current matching position to be changed.
< 
< Assertion subpatterns are not capturing subpatterns. If such an assertion
< contains capturing subpatterns within it, these are counted for the purposes of
< numbering the capturing subpatterns in the whole pattern. However, substring
< capturing is carried out only for positive assertions. (Perl sometimes, but not
< always, does do capturing in negative assertions.)
< 
< WARNING: If a positive assertion containing one or more capturing subpatterns
< succeeds, but failure to match later in the pattern causes backtracking over
< this assertion, the captures within the assertion are reset only if no higher
< numbered captures are already set. This is, unfortunately, a fundamental
< limitation of the current implementation, and as PCRE1 is now in
< maintenance-only status, it is unlikely ever to change.
< 
< For compatibility with Perl, assertion subpatterns may be repeated; though
< it makes no sense to assert the same thing several times, the side effect of
< capturing parentheses may occasionally be useful. In practice, there only three
< cases:
< 
< (1) If the quantifier is {0}, the assertion is never obeyed during matching.
< However, it may contain internal capturing parenthesized groups that are called
< from elsewhere via the
< subroutine mechanism.
< 
< (2) If quantifier is {0,n} where n is greater than zero, it is treated as if it
< were {0,1}. At run time, the rest of the pattern match is tried with and
< without the assertion, the order depending on the greediness of the quantifier.
---
> More complicated assertions are coded as parenthesized groups. If matching such
> a group succeeds, matching continues after it, but with the matching position
> in the subject string reset to what it was before the assertion was processed.
> 
> A special kind of assertion, called a "scan substring" assertion, matches a
> subpattern against a previously captured substring. This is described in the
> section entitled
> "Scan substring assertions"
> below. It is a PCRE2 extension, not compatible with Perl.
2056,2057c2355,2423
< (3) If the minimum repetition is greater than zero, the quantifier is ignored.
< The assertion is obeyed just once when encountered during matching.
---
> The other goup-based assertions are of two kinds: those that look ahead of the
> current position in the subject string, and those that look behind it, and in
> each case an assertion may be positive (must match for the assertion to be
> true) or negative (must not match for the assertion to be true).
> 
> The Perl-compatible lookaround assertions are atomic. If an assertion is true,
> but there is a subsequent matching failure, there is no backtracking into the
> assertion. However, there are some cases where non-atomic assertions can be
> useful. PCRE2 has some support for these, described in the section entitled
> "Non-atomic assertions"
> below, but they are not Perl-compatible.
> 
> A lookaround assertion may appear as the condition in a
> conditional group
> (see below). In this case, the result of matching the assertion determines
> which branch of the condition is followed.
> 
> Assertion groups are not capture groups. If an assertion contains capture
> groups within it, these are counted for the purposes of numbering the capture
> groups in the whole pattern. Within each branch of an assertion, locally
> captured substrings may be referenced in the usual way. For example, a sequence
> such as (.)\eg{-1} can be used to check that two adjacent characters are the
> same.
> 
> When a branch within an assertion fails to match, any substrings that were
> captured are discarded (as happens with any pattern branch that fails to
> match). A negative assertion is true only when all its branches fail to match;
> this means that no captured substrings are ever retained after a successful
> negative assertion. When an assertion contains a matching branch, what happens
> depends on the type of assertion.
> 
> For a positive assertion, internally captured substrings in the successful
> branch are retained, and matching continues with the next pattern item after
> the assertion. For a negative assertion, a matching branch means that the
> assertion is not true. If such an assertion is being used as a condition in a
> conditional group
> (see below), captured substrings are retained, because matching continues with
> the "no" branch of the condition. For other failing negative assertions,
> control passes to the previous backtracking point, thus discarding any captured
> strings within the assertion.
> 
> Most assertion groups may be repeated; though it makes no sense to assert the
> same thing several times, the side effect of capturing in positive assertions
> may occasionally be useful. However, an assertion that forms the condition for
> a conditional group may not be quantified. PCRE2 used to restrict the
> repetition of assertions, but from release 10.35 the only restriction is that
> an unlimited maximum repetition is changed to be one more than the minimum. For
> example, {3,} is treated as {3,4}.
> 
> <a name="alphabetic-assertion-names"></a>
> 
> _Alphabetic assertion names_
> 
> 
> Traditionally, symbolic sequences such as (?= and (?&lt;= have been used to
> specify lookaround assertions. Perl 5.28 introduced some experimental
> alphabetic alternatives which might be easier to remember. They all start with
> (* instead of (? and must be written using lower case letters. PCRE2 supports
> the following synonyms:
> 
> ```text
> (*positive_lookahead:  or (*pla: is the same as (?=
> (*negative_lookahead:  or (*nla: is the same as (?!
> (*positive_lookbehind: or (*plb: is the same as (?&lt;=
> (*negative_lookbehind: or (*nlb: is the same as (?&lt;!
> ```
> For example, (*pla:foo) is the same assertion as (?=foo). In the following
> sections, the various assertions are described using the original symbolic
> forms.
2104,2109c2470,2471
< a lookbehind assertion are restricted such that all the strings it matches must
< have a fixed length. However, if there are several top-level alternatives, they
< do not all have to have the same fixed length. Thus
< 
< ```text
< (?&lt;=bullock|donkey)
---
> a lookbehind assertion are restricted such that there must be a known maximum
> to the lengths of all the strings it matches. There are two cases:
2111c2473
< is permitted, but
---
> If every top-level alternative matches a fixed length, for example
2114c2476
< (?&lt;!dogs?|cats?)
---
> (?&lt;=colour|color)
2116,2119c2478,2481
< causes an error at compile time. Branches that match different length strings
< are permitted only at the top level of a lookbehind assertion. This is an
< extension compared with Perl, which requires all branches to match the same
< length of string. An assertion such as
---
> there is a limit of 65535 characters to the lengths, which do not have to be
> the same, as this example demonstrates. This is the only kind of lookbehind
> supported by PCRE2 versions earlier than 10.43 and by the alternative matching
> function `pcre2\_dfa\_match()`.
2121,2126c2483,2485
< ```text
< (?&lt;=ab(c|de))
< 
< is not permitted, because its single top-level branch can match two different
< lengths, but it is acceptable to PCRE if rewritten to use two top-level
< branches:
---
> In PCRE2 10.43 and later, `pcre2\_match()` supports lookbehind assertions in
> which one or more top-level alternatives can match more than one string length,
> for example
2129c2488
< (?&lt;=abc|abde)
---
> (?&lt;=colou?r)
2131c2490,2492
< In some cases, the escape sequence \eK
---
> The maximum matching length for any branch of the lookbehind is limited to a
> value set by the calling program (default 255 characters). Unlimited repetition
> (for example \ed*) is not supported. In some cases, the escape sequence \eK
2133,2134c2494,2495
< can be used instead of a lookbehind assertion to get round the fixed-length
< restriction.
---
> can be used instead of a lookbehind assertion at the start of a pattern to get
> round the length limit restriction.
2136,2145c2497,2501
< The implementation of lookbehind assertions is, for each alternative, to
< temporarily move the current position back by the fixed length and then try to
< match. If there are insufficient characters before the current position, the
< assertion fails.
< 
< In a UTF mode, PCRE does not allow the \eC escape (which matches a single data
< unit even in a UTF mode) to appear in lookbehind assertions, because it makes
< it impossible to calculate the length of the lookbehind. The \eX and \eR
< escapes, which can match different numbers of data units, are also not
< permitted.
---
> In UTF-8 and UTF-16 modes, PCRE2 does not allow the \eC escape (which matches a
> single code unit even in a UTF mode) to appear in lookbehind assertions,
> because it makes it impossible to calculate the length of the lookbehind. The
> \eX and \eR escapes, which can match different numbers of code units, are never
> permitted in lookbehinds.
2149,2151c2505,2518
< as the subpattern matches a fixed-length string.
< Recursion,
< however, is not supported.
---
> as the called capture group matches a limited-length string. However,
> recursion,
> that is, a "subroutine" call into a group that is already active,
> is not supported.
> 
> PCRE2 supports backreferences in lookbehinds, but only if certain conditions
> are met. The PCRE2_MATCH_UNSET_BACKREF option must not be set, there must be no
> use of (?| in the pattern (it creates duplicate group numbers), and if the
> backreference is by name, the name must be unique. Of course, the referenced
> group must itself match a limited length substring. The following pattern
> matches words containing at least two characters that begin and end with the
> same character:
> 
>    \eb(\ew)\ew++(?&lt;=\e1)
2154,2155c2521,2522
< specify efficient matching of fixed-length strings at the end of subject
< strings. Consider a simple pattern such as
---
> specify efficient matching at the end of subject strings. Consider a simple
> pattern such as
2161c2528
< from left to right, PCRE will look for each "a" in the subject and then see if
---
> from left to right, PCRE2 will look for each "a" in the subject and then see if
2176,2179c2543,2547
< there can be no backtracking for the .*+ item; it can match only the entire
< string. The subsequent lookbehind assertion does a single test on the last four
< characters. If it fails, the match fails immediately. For long strings, this
< approach makes a significant difference to the processing time.
---
> there can be no backtracking for the .*+ item because of the possessive
> quantifier; it can match only the entire string. The subsequent lookbehind
> assertion does a single test on the last four characters. If it fails, the
> match fails immediately. For long strings, this approach makes a significant
> difference to the processing time.
2220c2588
< <a name="conditional-subpatterns"></a>
---
> <a name="non-atomic-assertions"></a>
2222c2590
< ## Conditional Subpatterns
---
> ## Non-Atomic Assertions
2225,2228c2593,2783
< It is possible to cause the matching process to obey a subpattern
< conditionally or to choose between two alternative subpatterns, depending on
< the result of an assertion, or whether a specific capturing subpattern has
< already been matched. The two possible forms of conditional subpattern are:
---
> Traditional lookaround assertions are atomic. That is, if an assertion is true,
> but there is a subsequent matching failure, there is no backtracking into the
> assertion. However, there are some cases where non-atomic positive assertions
> can be useful. PCRE2 provides these using the following syntax:
> 
> ```text
> (*non_atomic_positive_lookahead:  or (*napla: or (?*
> (*non_atomic_positive_lookbehind: or (*naplb: or (?&lt;*
> ```
> Consider the problem of finding the right-most word in a string that also
> appears earlier in the string, that is, it must appear at least twice in total.
> This pattern returns the required result as captured substring 1:
> 
> ```text
> ^(?x)(*napla: .* \eb(\ew++)) (?&gt; .*? \eb\e1\eb ){2}
> 
> For a subject such as "word1 word2 word3 word2 word3 word4" the result is
> "word3". How does it work? At the start, ^(?x) anchors the pattern and sets the
> "x" option, which causes white space (introduced for readability) to be
> ignored. Inside the assertion, the greedy .* at first consumes the entire
> string, but then has to backtrack until the rest of the assertion can match a
> word, which is captured by group 1. In other words, when the assertion first
> succeeds, it captures the right-most word in the string.
> 
> The current matching point is then reset to the start of the subject, and the
> rest of the pattern match checks for two occurrences of the captured word,
> using an ungreedy .*? to scan from the left. If this succeeds, we are done, but
> if the last word in the string does not occur twice, this part of the pattern
> fails. If a traditional atomic lookahead (?= or (*pla: had been used, the
> assertion could not be re-entered, and the whole match would fail. The pattern
> would succeed only if the very last word in the subject was found twice.
> 
> Using a non-atomic lookahead, however, means that when the last word does not
> occur twice in the string, the lookahead can backtrack and find the second-last
> word, and so on, until either the match succeeds, or all words have been
> tested.
> 
> Two conditions must be met for a non-atomic assertion to be useful: the
> contents of one or more capturing groups must change after a backtrack into the
> assertion, and there must be a backreference to a changed group later in the
> pattern. If this is not the case, the rest of the pattern match fails exactly
> as before because nothing has changed, so using a non-atomic assertion just
> wastes resources.
> 
> There is one exception to backtracking into a non-atomic assertion. If an
> (*ACCEPT) control verb is triggered, the assertion succeeds atomically. That
> is, a subsequent match failure cannot backtrack into the assertion.
> 
> Non-atomic assertions are not supported by the alternative matching function
> `pcre2\_dfa\_match()`. They are supported by JIT, but only if they do not
> contain any control verbs such as (*ACCEPT). (This may change in future). Note
> that assertions that appear as conditions for
> conditional groups
> (see below) must be atomic.
> 
> <a name="scan-substring-assertions"></a>
> 
> ## Scan Substring Assertions
> 
> 
> A special kind of assertion, not compatible with Perl, makes it possible to
> check the contents of a captured substring by matching it with a subpattern.
> Because this involves capturing, this feature is not supported by
> `pcre2\_dfa\_match()`.
> 
> A scan substring assertion starts with the sequence (*scan_substring: or
> (*scs: which is followed by a list of substring numbers (absolute or relative)
> and/or substring names enclosed in single quotes or angle brackets, all within
> parentheses. The rest of the item is the subpattern that is applied to the
> substring, as shown in these examples:
> 
> ```text
> (*scan_substring:(1)...)
> (*scs:(-2)...)
> (*scs:('AB')...)
> (*scs:(1,'AB',-2)...)
> ```
> The list of groups is checked in the order they are given, and it is the
> contents of the first one that is found to be set that are scanned. When
> PCRE2_DUPNAMES is set and there are ambiguous group names, all groups with the
> same name are checked in numerical order. A scan substring assertion fails if
> none of the groups it references have been set.
> 
> The pattern match on the substring is always anchored, that is, it must match
> from the start of the substring. There is no "bumpalong" if it does not match
> at the start. The end of the subject is temporarily reset to be the end of the
> substring, so \eZ, \ez, and $ will match there. However, the start of the
> subject is _not_ reset. This means that ^ matches only if the substring is
> actually at the start of the main subject, but it also means that lookbehind
> assertions into what precedes the substring are possible.
> 
> Here is a very simple example: find a word that contains the rare (in English)
> sequence of letters "rh" not at the start:
> 
> ```text
> \eb(\ew++)(*scs:(1).+rh)
> 
> The first group captures a word which is then scanned by the second group.
> This example does not actually need this heavyweight feature; the same match
> can be achieved with:
> 
> ```text
> \eb\ew+?rh\ew*\eb
> 
> When things are more complicated, however, scanning a captured substring can be
> a useful way to describe the required match. For exmple, there is a rather
> complicated pattern in the PCRE2 test data that checks an entire subject string
> for a palindrome, that is, the sequence of letters is the same in both
> directions. Suppose you want to search for individual words of two or more
> characters such as "level" that are palindromes:
> 
> ```text
> (\eb\ew{2,}+\eb)(*scs:(1)...palindrome-matching-pattern...)
> 
> Within a substring scanning subpattern, references to other groups work as
> normal. Capturing groups may appear, and will retain their values during
> ongoing matching if the assertion succeeds.
> 
> <a name="script-runs"></a>
> 
> ## Script Runs
> 
> 
> In concept, a script run is a sequence of characters that are all from the same
> Unicode script such as Latin or Greek. However, because some scripts are
> commonly used together, and because some diacritical and other marks are used
> with multiple scripts, it is not that simple. There is a full description of
> the rules that PCRE2 uses in the section entitled
> "Script Runs"
> in the
> `pcre2unicode`
> documentation.
> 
> If part of a pattern is enclosed between (*script_run: or (*sr: and a closing
> parenthesis, it fails if the sequence of characters that it matches are not a
> script run. After a failure, normal backtracking occurs. Script runs can be
> used to detect spoofing attacks using characters that look the same, but are
> from different scripts. The string "paypal.com" is an infamous example, where
> the letters could be a mixture of Latin and Cyrillic. This pattern ensures that
> the matched characters in a sequence of non-spaces that follow white space are
> a script run:
> 
> ```text
> \es+(*sr:\eS+)
> 
> To be sure that they are all from the Latin script (for example), a lookahead
> can be used:
> 
> ```text
> \es+(?=\ep{Latin})(*sr:\eS+)
> 
> This works as long as the first character is expected to be a character in that
> script, and not (for example) punctuation, which is allowed with any script. If
> this is not the case, a more creative lookahead is needed. For example, if
> digits, underscore, and dots are permitted at the start:
> 
> ```text
> \es+(?=[0-9_.]*\ep{Latin})(*sr:\eS+)
> 
> 
> In many cases, backtracking into a script run pattern fragment is not
> desirable. The script run can employ an atomic group to prevent this. Because
> this is a common requirement, a shorthand notation is provided by
> (*atomic_script_run: or (*asr:
> 
> ```text
> (*asr:...) is the same as (*sr:(?&gt;...))
> 
> Note that the atomic group is inside the script run. Putting it outside would
> not prevent backtracking into the script run pattern.
> 
> Support for script runs is not available if PCRE2 is compiled without Unicode
> support. A compile-time error is given if any of the above constructs is
> encountered. Script runs are not supported by the alternate matching function,
> `pcre2\_dfa\_match()` because they use the same mechanism as capturing
> parentheses.
> 
> `Warning:` The (*ACCEPT) control verb
> (see below)
> should not be used within a script run group, because it causes an immediate
> exit from the group, bypassing the script run checking.
> 
> <a name="conditional-groups"></a>
> 
> ## Conditional Groups
> 
> 
> It is possible to cause the matching process to obey a pattern fragment
> conditionally or to choose between two alternative fragments, depending on
> the result of an assertion, or whether a specific capture group has
> already been matched. The two possible forms of conditional group are:
2235,2240c2790,2795
< no-pattern (if present) is used. If there are more than two alternatives in the
< subpattern, a compile-time error occurs. Each of the two alternatives may
< itself contain nested subpatterns of any form, including conditional
< subpatterns; the restriction to two alternatives applies only at the level of
< the condition. This pattern fragment is an example where the alternatives are
< complex:
---
> no-pattern (if present) is used. An absent no-pattern is equivalent to an empty
> string (it always matches). If there are more than two alternatives in the
> group, a compile-time error occurs. Each of the two alternatives may itself
> contain nested groups of any form, including conditional groups; the
> restriction to two alternatives applies only at the level of the condition
> itself. This pattern fragment is an example where the alternatives are complex:
2246,2247c2801,2802
< There are four kinds of condition: references to subpatterns, references to
< recursion, a pseudo-condition called DEFINE, and assertions.
---
> There are five kinds of condition: references to capture groups, references to
> recursion, two pseudo-conditions called DEFINE and VERSION, and assertions.
2249c2804
< <a name="checking-for-a-used-subpattern-by-number"></a>
---
> <a name="checking-for-a-used-capture-group-by-number"></a>
2251c2806
< _Checking for a used subpattern by number_
---
> _Checking for a used capture group by number_
2255,2265c2810,2820
< condition is true if a capturing subpattern of that number has previously
< matched. If there is more than one capturing subpattern with the same number
< (see the earlier
< section about duplicate subpattern numbers),
< the condition is true if any of them have matched. An alternative notation is
< to precede the digits with a plus or minus sign. In this case, the subpattern
< number is relative rather than absolute. The most recently opened parentheses
< can be referenced by (?(-1), the next most recent by (?(-2), and so on. Inside
< loops it can also make sense to refer to subsequent groups. The next
< parentheses to be opened can be referenced as (?(+1), and so on. (The value
< zero in any of these forms is not used; it provokes a compile-time error.)
---
> condition is true if a capture group of that number has previously matched. If
> there is more than one capture group with the same number (see the earlier
> section about duplicate group numbers),
> the condition is true if any of them have matched. An alternative notation,
> which is a PCRE2 extension, not supported by Perl, is to precede the digits
> with a plus or minus sign. In this case, the group number is relative rather
> than absolute. The most recently opened capture group (which could be enclosing
> this condition) can be referenced by (?(-1), the next most recent by (?(-2),
> and so on. Inside loops it can also make sense to refer to subsequent groups.
> The next capture group to be opened can be referenced as (?(+1), and so on. The
> value zero in any of these forms is not used; it provokes a compile-time error.
2268c2823
< make it more readable (assume the PCRE_EXTENDED option) and to divide it into
---
> make it more readable (assume the PCRE2_EXTENDED option) and to divide it into
2276,2277c2831,2832
< conditional subpattern that tests whether or not the first set of parentheses
< matched. If they did, that is, if subject started with an opening parenthesis,
---
> conditional group that tests whether or not the first capture group
> matched. If it did, that is, if subject started with an opening parenthesis,
2280,2281c2835,2836
< subpattern matches nothing. In other words, this pattern matches a sequence of
< non-parentheses, optionally enclosed in parentheses.
---
> conditional group matches nothing. In other words, this pattern matches a
> sequence of non-parentheses, optionally enclosed in parentheses.
2290c2845
< <a name="checking-for-a-used-subpattern-by-name"></a>
---
> <a name="checking-for-a-used-capture-group-by-name"></a>
2292c2847
< _Checking for a used subpattern by name_
---
> _Checking for a used capture group by name_
2296,2299c2851,2855
< subpattern by name. For compatibility with earlier versions of PCRE, which had
< this facility before Perl, the syntax (?(name)...) is also recognized.
< 
< Rewriting the above example to use a named subpattern gives this:
---
> capture group by name. For compatibility with earlier versions of PCRE1, which
> had this facility before Perl, the syntax (?(name)...) is also recognized.
> Note, however, that undelimited names consisting of the letter R followed by
> digits are ambiguous (see the following section). Rewriting the above example
> to use a named group gives this:
2304c2860
< applied to all subpatterns of the same name, and is true if any one of them has
---
> applied to all groups of the same name, and is true if any one of them has
2312,2315c2868,2891
< If the condition is the string (R), and there is no subpattern with the name R,
< the condition is true if a recursive call to the whole pattern or any
< subpattern has been made. If digits or a name preceded by ampersand follow the
< letter R, for example:
---
> "Recursion" in this sense refers to any subroutine-like call from one part of
> the pattern to another, whether or not it is actually recursive. See the
> sections entitled
> "Recursive patterns"
> and
> "Groups as subroutines"
> below for details of recursion and subroutine calls.
> 
> If a condition is the string (R), and there is no capture group with the name
> R, the condition is true if matching is currently in a recursion or subroutine
> call to the whole pattern or any capture group. If digits follow the letter R,
> and there is no group with that name, the condition is true if the most recent
> call is into a group with the given number, which must exist somewhere in the
> overall pattern. This is a contrived example that is equivalent to a+b:
> 
> ```text
> ((?(R1)a+|(?1)b))
> 
> However, in both cases, if there is a capture group with a matching name, the
> condition tests for its being set, as described in the section above, instead
> of testing for recursion. For example, creating a group with the name R1 by
> adding (?&lt;R1&gt;) to the above pattern completely changes its meaning.
> 
> If a name preceded by ampersand follows the letter R, for example:
2318,2324c2894,2902
< (?(R3)...) or (?(R&name)...)
< 
< the condition is true if the most recent recursion is into a subpattern whose
< number or name is given. This condition does not check the entire recursion
< stack. If the name used in a condition of this kind is a duplicate, the test is
< applied to all subpatterns of the same name, and is true if any one of them is
< the most recent recursion.
---
> (?(R&name)...)
> 
> the condition is true if the most recent recursion is into a group of that name
> (which must exist within the pattern).
> 
> This condition does not check the entire recursion stack. It tests only the
> current level. If the name used in a condition of this kind is a duplicate, the
> test is applied to all groups of the same name, and is true if any one of
> them is the most recent recursion.
2327,2328d2904
< The syntax for recursive patterns
< is described below.
2330c2906
< <a name="defining-subpatterns-for-use-by-reference-only"></a>
---
> <a name="defining-capture-groups-for-use-by-reference-only"></a>
2332c2908
< _Defining subpatterns for use by reference only_
---
> _Defining capture groups for use by reference only_
2335,2339c2911,2915
< If the condition is the string (DEFINE), and there is no subpattern with the
< name DEFINE, the condition is always false. In this case, there may be only one
< alternative in the subpattern. It is always skipped if control reaches this
< point in the pattern; the idea of DEFINE is that it can be used to define
< subroutines that can be referenced from elsewhere. (The use of
---
> If the condition is the string (DEFINE), the condition is always false, even if
> there is a group with the name DEFINE. In this case, there may be only one
> alternative in the rest of the conditional group. It is always skipped if
> control reaches this point in the pattern; the idea of DEFINE is that it can be
> used to define subroutines that can be referenced from elsewhere. (The use of
2349c2925
< The first part of the pattern is a DEFINE group inside which a another group
---
> The first part of the pattern is a DEFINE group inside which another group
2355a2932,2951
> <a name="checking-the-pcre2-version"></a>
> 
> _Checking the PCRE2 version_
> 
> 
> Programs that link with a PCRE2 library can check the version by calling
> `pcre2\_config()` with appropriate arguments. Users of applications that do
> not have access to the underlying code cannot do this. A special "condition"
> called VERSION exists to allow such users to discover which version of PCRE2
> they are dealing with by using this condition to match a string such as
> "yesno". VERSION must be followed either by "=" or "&gt;=" and a version number.
> For example:
> 
> ```text
> (?(VERSION&gt;=10.4)yes|no)
> 
> This pattern matches "yes" if the PCRE2 version is greater or equal to 10.4, or
> "no" otherwise. The fractional part of the version number may not contain more
> than two digits.
> 
2361,2364c2957,2963
< If the condition is not in any of the above formats, it must be an assertion.
< This may be a positive or negative lookahead or lookbehind assertion. Consider
< this pattern, again containing non-significant white space, and with the two
< alternatives on the second line:
---
> If the condition is not in any of the above formats, it must be a parenthesized
> assertion. This may be a positive or negative lookahead or lookbehind
> assertion. However, it must be a traditional atomic assertion, not one of the
> non-atomic assertions.
> 
> Consider this pattern, again containing non-significant white space, and with
> the two alternatives on the second line:
2376a2976,2981
> When an assertion that is a condition contains capture groups, any
> capturing that occurs in a matching branch is retained afterwards, for both
> positive and negative assertions, because matching always continues after the
> assertion, whether it succeeds or fails. (Compare non-conditional assertions,
> for which captures are retained only for positive assertions that succeed.)
> 
2383,2386c2988,2991
< PCRE. In both cases, the start of the comment must not be in a character class,
< nor in the middle of any other sequence of related characters such as (?: or a
< subpattern name or number. The characters that make up a comment play no part
< in the pattern matching.
---
> PCRE2. In both cases, the start of the comment must not be in a character
> class, nor in the middle of any other sequence of related characters such as
> (?: or a group name or number or a Unicode property name. The characters that
> make up a comment play no part in the pattern matching.
2389,2394c2994,3000
< closing parenthesis. Nested parentheses are not permitted. If the PCRE_EXTENDED
< option is set, an unescaped # character also introduces a comment, which in
< this case continues to immediately after the next newline character or
< character sequence in the pattern. Which characters are interpreted as newlines
< is controlled by the options passed to a compiling function or by a special
< sequence at the start of the pattern, as described in the section entitled
---
> closing parenthesis. Nested parentheses are not permitted. If the
> PCRE2_EXTENDED or PCRE2_EXTENDED_MORE option is set, an unescaped # character
> also introduces a comment, which in this case continues to immediately after
> the next newline character or character sequence in the pattern. Which
> characters are interpreted as newlines is controlled by an option passed to the
> compiling function or by a special sequence at the start of the pattern, as
> described in the section entitled
2398,2399c3004,3005
< count. For example, consider this pattern when PCRE_EXTENDED is set, and the
< default newline convention is in force:
---
> count. For example, consider this pattern when PCRE2_EXTENDED is set, and the
> default newline convention (a single linefeed character) is in force:
2404c3010
< On encountering the # character, `pcre\_compile()` skips along, looking for
---
> On encountering the # character, `pcre2\_compile()` skips along, looking for
2431c3037
< Obviously, PCRE cannot support the interpolation of Perl code. Instead, it
---
> Obviously, PCRE2 cannot support the interpolation of Perl code. Instead, it
2433c3039
< individual subpattern recursion. After its introduction in PCRE and Python,
---
> individual capture group recursion. After its introduction in PCRE1 and Python,
2437,2438c3043,3044
< closing parenthesis is a recursive subroutine call of the subpattern of the
< given number, provided that it occurs inside that subpattern. (If not, it is a
---
> closing parenthesis is a recursive subroutine call of the capture group of the
> given number, provided that it occurs inside that group. (If not, it is a
2443,2444c3049,3050
< This PCRE pattern solves the nested parentheses problem (assume the
< PCRE_EXTENDED option is set so that white space is ignored):
---
> This PCRE2 pattern solves the nested parentheses problem (assume the
> PCRE2_EXTENDED option is set so that white space is ignored):
2470c3076,3091
< It is also possible to refer to subsequently opened parentheses, by writing
---
> Be aware however, that if
> duplicate capture group numbers
> are in use, relative references refer to the earliest group with the
> appropriate number. Consider, for example:
> 
> ```text
> (?|(a)|(b)) (c) (?-2)
> 
> The first two capture groups (a) and (b) are both numbered 1, and group (c)
> is number 2. When the reference (?-2) is encountered, the second most recently
> opened parentheses has the number 1, but it is the first such group (the (a)
> group) to which the recursion refers. This would be the same if an absolute
> reference (?1) was used. In other words, relative references are just a
> shorthand for computing a group number.
> 
> It is also possible to refer to subsequent capture groups, by writing
2476,2478c3097,3099
< An alternative approach is to use named parentheses instead. The Perl syntax
< for this is (?&name); PCRE's earlier syntax (?P&gt;name) is also supported. We
< could rewrite the above example as follows:
---
> An alternative approach is to use named parentheses. The Perl syntax for this
> is (?&name); PCRE1's earlier syntax (?P&gt;name) is also supported. We could
> rewrite the above example as follows:
2483c3104
< If there is more than one subpattern with the same name, the earliest one is
---
> If there is more than one group with the same name, the earliest one is
2486,2489c3107,3110
< This particular example pattern that we have been looking at contains nested
< unlimited repeats, and so the use of a possessive quantifier for matching
< strings of non-parentheses is important when applying the pattern to strings
< that do not match. For example, when this pattern is applied to
---
> The example pattern that we have been looking at contains nested unlimited
> repeats, and so the use of a possessive quantifier for matching strings of
> non-parentheses is important when applying the pattern to strings that do not
> match. For example, when this pattern is applied to
2502c3123
< `pcrecallout`
---
> `pcre2callout`
2509,2516c3130,3132
< the last value taken on at the top level. If a capturing subpattern is not
< matched at the top level, its final captured value is unset, even if it was
< (temporarily) set at a deeper level during the matching process.
< 
< If there are more than 15 capturing parentheses in a pattern, PCRE has to
< obtain extra memory to store data during a recursion, which it does by using
< `pcre\_malloc`, freeing it via `pcre\_free` afterwards. If no memory can
< be obtained, the match fails with the PCRE_ERROR_NOMEMORY error.
---
> the last value taken on at the top level. If a capture group is not matched at
> the top level, its final captured value is unset, even if it was (temporarily)
> set at a deeper level during the matching process.
2526,2530c3142,3144
< In this pattern, (?(R) is the start of a conditional subpattern, with two
< different alternatives for the recursive and non-recursive cases. The (?R) item
< is the actual recursive call.
< 
< <a name="differences-in-recursion-processing-between-pcre-and-perl"></a>
---
> In this pattern, (?(R) is the start of a conditional group, with two different
> alternatives for the recursive and non-recursive cases. The (?R) item is the
> actual recursive call.
2532,2544c3146
< _Differences in recursion processing between PCRE and Perl_
< 
< 
< Recursion processing in PCRE differs from Perl in two important ways. In PCRE
< (like Python, but unlike Perl), a recursive subpattern call is always treated
< as an atomic group. That is, once it has matched some of the subject string, it
< is never re-entered, even if it contains untried alternatives and there is a
< subsequent matching failure. This can be illustrated by the following pattern,
< which purports to match a palindromic string that contains an odd number of
< characters (for example, "a", "aba", "abcba", "abcdcba"):
< 
< ```text
< ^(.|(.)(?1)\e2)$
---
> <a name="differences-in-recursion-processing-between-pcre2-and-perl"></a>
2546,2549c3148
< The idea is that it either matches a single character, or two identical
< characters surrounding a sub-palindrome. In Perl, this pattern works; in PCRE
< it does not if the pattern is longer than three characters. Consider the
< subject string "abcba":
---
> _Differences in recursion processing between PCRE2 and Perl_
2551,2555d3149
< At the top level, the first character is matched, but as it is not at the end
< of the string, the first alternative fails; the second alternative is taken
< and the recursion kicks in. The recursive call to subpattern 1 successfully
< matches the next character ("b"). (Note that the beginning and end of line
< tests are not part of the recursion).
2557,2562c3151
< Back at the top level, the next character ("c") is compared with what
< subpattern 2 matched, which was "a". This fails. Because the recursion is
< treated as an atomic group, there are now no backtracking points, and so the
< entire match fails. (Perl is able, at this point, to re-enter the recursion and
< try the second alternative.) However, if the pattern is written with the
< alternatives in the other order, things are different:
---
> Some former differences between PCRE2 and Perl no longer exist.
2564,2565c3153,3157
< ```text
< ^((.)(?1)\e2|.)$
---
> Before release 10.30, recursion processing in PCRE2 differed from Perl in that
> a recursive subroutine call was always treated as an atomic group. That is,
> once it had matched some of the subject string, it was never re-entered, even
> if it contained untried alternatives and there was a subsequent matching
> failure. (Historical note: PCRE implemented recursion before Perl did.)
2567,2571c3159,3163
< This time, the recursing alternative is tried first, and continues to recurse
< until it runs out of characters, at which point the recursion fails. But this
< time we do have another alternative to try at the higher level. That is the big
< difference: in the previous case the remaining alternative is at a deeper
< recursion level, which PCRE cannot use.
---
> Starting with release 10.30, recursive subroutine calls are no longer treated
> as atomic. That is, they can be re-entered to try unused alternatives if there
> is a matching failure later in the pattern. This is now compatible with the way
> Perl works. If you want a subroutine call to be atomic, you must explicitly
> enclose it in an atomic group.
2573,2575c3165,3166
< To change the pattern so that it matches all palindromic strings, not just
< those with an odd number of characters, it is tempting to change the pattern to
< this:
---
> Supporting backtracking into recursions simplifies certain types of recursive
> pattern. For example, this pattern matches palindromic strings:
2580,2612c3171,3191
< Again, this works in Perl, but not in PCRE, and for the same reason. When a
< deeper recursion has matched a single character, it cannot be entered again in
< order to match an empty string. The solution is to separate the two cases, and
< write out the odd and even cases as alternatives at the higher level:
< 
< ```text
< ^(?:((.)(?1)\e2|)|((.)(?3)\e4|.))
< 
< If you want to match typical palindromic phrases, the pattern has to ignore all
< non-word characters, which can be done like this:
< 
< ```text
< ^\eW*+(?:((.)\eW*+(?1)\eW*+\e2|)|((.)\eW*+(?3)\eW*+\e4|\eW*+.\eW*+))\eW*+$
< 
< If run with the PCRE_CASELESS option, this pattern matches phrases such as "A
< man, a plan, a canal: Panama!" and it works well in both PCRE and Perl. Note
< the use of the possessive quantifier *+ to avoid backtracking into sequences of
< non-word characters. Without this, PCRE takes a great deal longer (ten times or
< more) to match typical phrases, and Perl takes so long that you think it has
< gone into a loop.
< 
< `WARNING`: The palindrome-matching patterns above work only if the subject
< string does not start with a palindrome that is shorter than the entire string.
< For example, although "abcba" is correctly matched, if the subject is "ababa",
< PCRE finds the palindrome "aba" at the start, then fails at top level because
< the end of the string does not follow. Once again, it cannot jump back into the
< recursion to try other alternatives, so the entire match fails.
< 
< The second way in which PCRE and Perl differ in their recursion processing is
< in the handling of captured values. In Perl, when a subpattern is called
< recursively or as a subpattern (see the next section), it has no access to any
< values that were captured outside the recursion, whereas in PCRE these values
< can be referenced. Consider this pattern:
---
> The second branch in the group matches a single central character in the
> palindrome when there are an odd number of characters, or nothing when there
> are an even number of characters, but in order to work it has to be able to try
> the second case when the rest of the pattern match fails. If you want to match
> typical palindromic phrases, the pattern has to ignore all non-word characters,
> which can be done like this:
> 
> ```text
> ^\eW*+((.)\eW*+(?1)\eW*+\e2|\eW*+.?)\eW*+$
> 
> If run with the PCRE2_CASELESS option, this pattern matches phrases such as "A
> man, a plan, a canal: Panama!". Note the use of the possessive quantifier *+ to
> avoid backtracking into sequences of non-word characters. Without this, PCRE2
> takes a great deal longer (ten times or more) to match typical phrases, and
> Perl takes so long that you think it has gone into a loop.
> 
> Another way in which PCRE2 and Perl used to differ in their recursion
> processing is in the handling of captured values. Formerly in Perl, when a
> group was called recursively or as a subroutine (see the next section), it
> had no access to any values that were captured outside the recursion, whereas
> in PCRE2 these values can be referenced. Consider this pattern:
2617,2633c3196,3212
< In PCRE, this pattern matches "bab". The first capturing parentheses match "b",
< then in the second group, when the back reference \e1 fails to match "b", the
< second alternative matches "a" and then recurses. In the recursion, \e1 does
< now match "b" and so the whole match succeeds. In Perl, the pattern fails to
< match because inside the recursive call \e1 cannot access the externally set
< value.
< 
< <a name="subpatterns-as-subroutines"></a>
< 
< ## Subpatterns as Subroutines
< 
< 
< If the syntax for a recursive subpattern call (either by number or by
< name) is used outside the parentheses to which it refers, it operates like a
< subroutine in a programming language. The called subpattern may be defined
< before or after the reference. A numbered reference can be absolute or
< relative, as in these examples:
---
> This pattern matches "bab". The first capturing parentheses match "b", then in
> the second group, when the backreference \e1 fails to match "b", the second
> alternative matches "a" and then recurses. In the recursion, \e1 does now match
> "b" and so the whole match succeeds. This match used to fail in Perl, but in
> later versions (I tried 5.024) it now works.
> 
> <a name="groups-as-subroutines"></a>
> 
> ## Groups as Subroutines
> 
> 
> If the syntax for a recursive group call (either by number or by name) is used
> outside the parentheses to which it refers, it operates a bit like a subroutine
> in a programming language. More accurately, PCRE2 treats the referenced group
> as an independent subpattern which it tries to match at the current matching
> position. The called group may be defined before or after the reference. A
> numbered reference can be absolute or relative, as in these examples:
2654,2658c3233,3236
< All subroutine calls, whether recursive or not, are always treated as atomic
< groups. That is, once a subroutine has matched some of the subject string, it
< is never re-entered, even if it contains untried alternatives and there is a
< subsequent matching failure. Any capturing parentheses that are set during the
< subroutine call revert to their previous values afterwards.
---
> Like recursions, subroutine calls used to be treated as atomic, but this
> changed at PCRE2 release 10.30, so backtracking into subroutine calls can now
> occur. However, any capturing parentheses that are set during the subroutine
> call revert to their previous values afterwards.
2660c3238
< Processing options such as case-independence are fixed when a subpattern is
---
> Processing options such as case-independence are fixed when a group is
2668c3246,3252
< processing option does not affect the called subpattern.
---
> processing option does not affect the called group.
> 
> The behaviour of
> backtracking control verbs
> in groups when called as subroutines is described in the section entitled
> "Backtracking verbs in subroutines"
> below.
2677,2678c3261,3262
< syntax for referencing a subpattern as a subroutine, possibly recursively. Here
< are two of the examples used above, rewritten using this syntax:
---
> syntax for calling a group as a subroutine, possibly recursively. Here are two
> of the examples used above, rewritten using this syntax:
2684c3268
< PCRE supports an extension to Oniguruma: if a number is preceded by a
---
> PCRE2 supports an extension to Oniguruma: if a number is preceded by a
2691c3275
< synonymous. The former is a back reference; the latter is a subroutine call.
---
> synonymous. The former is a backreference; the latter is a subroutine call.
2703,2712c3287,3325
< PCRE provides a similar feature, but of course it cannot obey arbitrary Perl
< code. The feature is called "callout". The caller of PCRE provides an external
< function by putting its entry point in the global variable _pcre\_callout_
< (8-bit library) or _pcre[16|32]\_callout_ (16-bit or 32-bit library).
< By default, this variable contains NULL, which disables all calling out.
< 
< Within a regular expression, (?C) indicates the points at which the external
< function is to be called. If you want to identify different callout points, you
< can put a number less than 256 after the letter C. The default value is zero.
< For example, this pattern has two callout points:
---
> PCRE2 provides a similar feature, but of course it cannot obey arbitrary Perl
> code. The feature is called "callout". The caller of PCRE2 provides an external
> function by putting its entry point in a match context using the function
> `pcre2\_set\_callout()`, and then passing that context to `pcre2\_match()`
> or `pcre2\_dfa\_match()`. If no match context is passed, or if the callout
> entry point is set to NULL, callout points will be passed over silently during
> matching. To disallow callouts in the pattern syntax, you may use the
> PCRE2_EXTRA_NEVER_CALLOUT option.
> 
> Within a regular expression, (?C&lt;arg&gt;) indicates a point at which the external
> function is to be called. There are two kinds of callout: those with a
> numerical argument and those with a string argument. (?C) on its own with no
> argument is treated as (?C0). A numerical argument allows the application to
> distinguish between different callouts. String arguments were added for release
> 10.20 to make it possible for script languages that use PCRE2 to embed short
> scripts within patterns in a similar way to Perl.
> 
> During matching, when PCRE2 reaches a callout point, the external function is
> called. It is provided with the number or string argument of the callout, the
> position in the pattern, and one item of data that is also set in the match
> block. The callout function may cause matching to proceed, to backtrack, or to
> fail.
> 
> By default, PCRE2 implements a number of optimizations at matching time, and
> one side-effect is that sometimes callouts are skipped. If you need all
> possible callouts to happen, you need to set options that disable the relevant
> optimizations. More details, including a complete description of the
> programming interface to the callout function, are given in the
> `pcre2callout`
> documentation.
> 
> <a name="callouts-with-numerical-arguments"></a>
> 
> _Callouts with numerical arguments_
> 
> 
> If you just want to have a means of identifying different callout points, put a
> number less than 256 after the letter C. For example, this pattern has two
> callout points:
2717,2721c3330,3335
< If the PCRE_AUTO_CALLOUT flag is passed to a compiling function, callouts are
< automatically installed before each item in the pattern. They are all numbered
< 255. If there is a conditional group in the pattern whose condition is an
< assertion, an additional callout is inserted just before the condition. An
< explicit callout may also be set at this position, as in this example:
---
> If the PCRE2_AUTO_CALLOUT flag is passed to `pcre2\_compile()`, numerical
> callouts are automatically installed before each item in the pattern. They are
> all numbered 255. If there is a conditional group in the pattern whose
> condition is an assertion, an additional callout is inserted just before the
> condition. An explicit callout may also be set at this position, as in this
> example:
2729,2741c3343,3357
< During matching, when PCRE reaches a callout point, the external function is
< called. It is provided with the number of the callout, the position in the
< pattern, and, optionally, one item of data originally supplied by the caller of
< the matching function. The callout function may cause matching to proceed, to
< backtrack, or to fail altogether.
< 
< By default, PCRE implements a number of optimizations at compile time and
< matching time, and one side-effect is that sometimes callouts are skipped. If
< you need all possible callouts to happen, you need to set options that disable
< the relevant optimizations. More details, and a complete description of the
< interface to the callout function, are given in the
< `pcrecallout`
< documentation.
---
> <a name="callouts-with-string-arguments"></a>
> 
> _Callouts with string arguments_
> 
> 
> A delimited string may be used instead of a number as a callout argument. The
> starting delimiter must be one of \` ' " ^ % # $ { and the ending delimiter is
> the same as the start, except for {, where the ending delimiter is }. If the
> ending delimiter is needed within the string, it must be doubled. For
> example:
> 
> ```text
> (?C'ab ''c'' d')xyz(?C{any text})pqr
> 
> The doubling is removed before the string is passed to the callout function.
2748,2762c3364,3393
< Perl 5.10 introduced a number of "Special Backtracking Control Verbs", which
< are still described in the Perl documentation as "experimental and subject to
< change or removal in a future version of Perl". It goes on to say: "Their usage
< in production code should be noted to avoid problems during upgrades." The same
< remarks apply to the PCRE features described in this section.
< 
< The new verbs make use of what was previously invalid syntax: an opening
< parenthesis followed by an asterisk. They are generally of the form
< (*VERB) or (*VERB:NAME). Some may take either form, possibly behaving
< differently depending on whether or not a name is present. A name is any
< sequence of characters that does not include a closing parenthesis. The maximum
< length of name is 255 in the 8-bit library and 65535 in the 16-bit and 32-bit
< libraries. If the name is empty, that is, if the closing parenthesis
< immediately follows the colon, the effect is as if the colon were not there.
< Any number of these verbs may occur in a pattern.
---
> There are a number of special "Backtracking Control Verbs" (to use Perl's
> terminology) that modify the behaviour of backtracking during matching. They
> are generally of the form (*VERB) or (*VERB:NAME). Some verbs take either form,
> and may behave differently depending on whether or not a name argument is
> present. The names are not required to be unique within the pattern.
> 
> By default, for compatibility with Perl, a name is any sequence of characters
> that does not include a closing parenthesis. The name is not processed in
> any way, and it is not possible to include a closing parenthesis in the name.
> This can be changed by setting the PCRE2_ALT_VERBNAMES option, but the result
> is no longer Perl-compatible.
> 
> When PCRE2_ALT_VERBNAMES is set, backslash processing is applied to verb names
> and only an unescaped closing parenthesis terminates the name. However, the
> only backslash items that are permitted are \eQ, \eE, and sequences such as
> \ex{100} that define character code points. Character type escapes such as \ed
> are faulted.
> 
> A closing parenthesis can be included in a name either as \e) or between \eQ
> and \eE. In addition to backslash processing, if the PCRE2_EXTENDED or
> PCRE2_EXTENDED_MORE option is also set, unescaped whitespace in verb names is
> skipped, and #-comments are recognized, exactly as in the rest of the pattern.
> PCRE2_EXTENDED and PCRE2_EXTENDED_MORE do not affect verb names unless
> PCRE2_ALT_VERBNAMES is also set.
> 
> The maximum length of a name is 255 in the 8-bit library and 65535 in the
> 16-bit and 32-bit libraries. If the name is empty, that is, if the closing
> parenthesis immediately follows the colon, the effect is as if the colon were
> not there. Any number of these verbs may occur in a pattern. Except for
> (*ACCEPT), they may not be quantified.
2765,2769c3396,3399
< used only when the pattern is to be matched using one of the traditional
< matching functions, because these use a backtracking algorithm. With the
< exception of (*FAIL), which behaves like a failing negative assertion, the
< backtracking control verbs cause an error if encountered by a DFA matching
< function.
---
> used only when the pattern is to be matched using the traditional matching
> function or JIT, because they use backtracking algorithms. With the exception
> of (*FAIL), which behaves like a failing negative assertion, the backtracking
> control verbs cause an error if encountered by the DFA matching function.
2775c3405
< subpatterns called as subroutines
---
> capture groups called as subroutines
2783c3413
< PCRE contains some optimizations that are used to speed up matching by running
---
> PCRE2 contains some optimizations that are used to speed up matching by running
2788,2792c3418,3422
< the start-of-match optimizations by setting the PCRE_NO_START_OPTIMIZE option
< when calling `pcre\_compile()` or `pcre\_exec()`, or by starting the
< pattern with (*NO_START_OPT). There is more discussion of this option in the
< section entitled
< "Option bits for `pcre\_exec()`"
---
> the start-of-match optimizations by setting the PCRE2_NO_START_OPTIMIZE option
> when calling `pcre2\_compile()`, by calling `pcre2\_set\_optimize()` with a
> PCRE_START_OPTIMIZE_OFF directive, or by starting the pattern with (*NO_START_OPT).
> There is more discussion of this option in the section entitled
> "Compiling a pattern"
2794c3424
< `pcreapi`
---
> `pcre2api`
2797,2798c3427,3428
< Experiments with Perl suggest that it too has similar optimizations, sometimes
< leading to anomalous results.
---
> Experiments with Perl suggest that it too has similar optimizations, and like
> PCRE2, turning them off can change the result of a match.
2805,2806c3435
< The following verbs act as soon as they are encountered. They may not be
< followed by a name.
---
> The following verbs act as soon as they are encountered.
2808c3437
<    (*ACCEPT)
---
>    (*ACCEPT) or (*ACCEPT:NAME)
2811,2812c3440,3441
< pattern. However, when it is inside a subpattern that is called as a
< subroutine, only that subpattern is ended successfully. Matching then continues
---
> pattern. However, when it is inside a capture group that is called as a
> subroutine, only that group is ended successfully. Matching then continues
2824a3454,3457
> (*ACCEPT) is the only backtracking verb that is allowed to be quantified
> because an ungreedy quantification with a minimum of zero acts only when a
> backtrack happens. Consider, for example,
> 
2826c3459
< (*FAIL) or (*F)
---
> (A(*ACCEPT)??B)C
2828,2832c3461,3477
< This verb causes a matching failure, forcing backtracking to occur. It is
< equivalent to (?!) but easier to read. The Perl documentation notes that it is
< probably useful only when combined with (?{}) or (??{}). Those are, of course,
< Perl features that are not present in PCRE. The nearest equivalent is the
< callout feature, as for example in this pattern:
---
> where A, B, and C may be complex expressions. After matching "A", the matcher
> processes "BC"; if that fails, causing a backtrack, (*ACCEPT) is triggered and
> the match succeeds. In both cases, all but C is captured. Whereas (*COMMIT)
> (see below) means "fail on backtrack", a repeated (*ACCEPT) of this type means
> "succeed on backtrack".
> 
> `Warning:` (*ACCEPT) should not be used within a script run group, because
> it causes an immediate exit from the group, bypassing the script run checking.
> 
> ```text
> (*FAIL) or (*FAIL:NAME)
> 
> This verb causes a matching failure, forcing backtracking to occur. It may be
> abbreviated to (*F). It is equivalent to (?!) but easier to read. The Perl
> documentation notes that it is probably useful only when combined with (?{}) or
> (??{}). Those are, of course, Perl features that are not present in PCRE2. The
> nearest equivalent is the callout feature, as for example in this pattern:
2839a3485,3488
> (*ACCEPT:NAME) and (*FAIL:NAME) behave the same as (*MARK:NAME)(*ACCEPT) and
> (*MARK:NAME)(*FAIL), respectively, that is, a (*MARK) is recorded just before
> the verb acts.
> 
2852,2853c3501,3502
< A name is always required with this verb. There may be as many instances of
< (*MARK) as you like in a pattern, and their names do not have to be unique.
---
> A name is always required with this verb. For all the other backtracking
> control verbs, a NAME argument is optional.
2855,2858c3504,3506
< When a match succeeds, the name of the last-encountered (*MARK:NAME),
< (*PRUNE:NAME), or (*THEN:NAME) on the matching path is passed back to the
< caller as described in the section entitled
< "Extra data for `pcre\_exec()`"
---
> When a match succeeds, the name of the last-encountered mark name on the
> matching path is passed back to the caller as described in the section entitled
> "Other information about the match"
2860,2862c3508,3517
< `pcreapi`
< documentation. Here is an example of `pcretest` output, where the /K
< modifier requests the retrieval and outputting of (*MARK) data:
---
> `pcre2api`
> documentation. This applies to all instances of (*MARK) and other verbs,
> including those inside assertions and atomic groups. However, there are
> differences in those cases when (*MARK) is used in conjunction with (*SKIP) as
> described below.
> 
> The mark name that was last encountered on the matching path is passed back. A
> verb without a NAME argument is ignored for this purpose. Here is an example of
> `pcre2test` output, where the "mark" modifier requests the retrieval and
> outputting of (*MARK) data:
2864c3519
<     re&gt; /X(*MARK:A)Y|X(*MARK:B)Z/K
---
>     re&gt; /X(*MARK:A)Y|X(*MARK:B)Z/mark
2884c3539
<     re&gt; /X(*MARK:A)Y|X(*MARK:B)Z/K
---
>     re&gt; /X(*MARK:A)Y|X(*MARK:B)Z/mark
2894c3549,3550
< probably set the PCRE_NO_START_OPTIMIZE option
---
> probably either set the PCRE2_NO_START_OPTIMIZE option or call
> `pcre2\_set\_optimize()` with a PCRE2_START_OPTIMIZE_OFF directive
2904,2911c3560,3566
< with what follows, but if there is no subsequent match, causing a backtrack to
< the verb, a failure is forced. That is, backtracking cannot pass to the left of
< the verb. However, when one of these verbs appears inside an atomic group or an
< assertion that is true, its effect is confined to that group, because once the
< group has been matched, there is never any backtracking into it. In this
< situation, backtracking can "jump back" to the left of the entire atomic group
< or assertion. (Remember also, as stated above, that this localization also
< applies in subroutine calls.)
---
> with what follows, but if there is a subsequent match failure, causing a
> backtrack to the verb, a failure is forced. That is, backtracking cannot pass
> to the left of the verb. However, when one of these verbs appears inside an
> atomic group or in an atomic lookaround assertion that is true, its effect is
> confined to that group, because once the group has been matched, there is never
> any backtracking into it. Backtracking from beyond an atomic assertion or group
> ignores the entire group, and seeks a preceding backtracking point.
2919c3574
< (*COMMIT)
---
> (*COMMIT) or (*COMMIT:NAME)
2921,2927c3576,3581
< This verb, which may not be followed by a name, causes the whole match to fail
< outright if there is a later matching failure that causes backtracking to reach
< it. Even if the pattern is unanchored, no further attempts to find a match by
< advancing the starting point take place. If (*COMMIT) is the only backtracking
< verb that is encountered, once it has been passed `pcre\_exec()` is
< committed to finding a match at the current starting point, or not at all. For
< example:
---
> This verb causes the whole match to fail outright if there is a later matching
> failure that causes backtracking to reach it. Even if the pattern is
> unanchored, no further attempts to find a match by advancing the starting point
> take place. If (*COMMIT) is the only backtracking verb that is encountered,
> once it has been passed `pcre2\_match()` is committed to finding a match at
> the current starting point, or not at all. For example:
2933,2935c3587,3592
< dynamic anchor, or "I've started, so I must finish." The name of the most
< recently passed (*MARK) in the path is passed back when (*COMMIT) forces a
< match failure.
---
> dynamic anchor, or "I've started, so I must finish."
> 
> The behaviour of (*COMMIT:NAME) is not the same as (*MARK:NAME)(*COMMIT). It is
> like (*MARK:NAME) in that the name is remembered for passing back to the
> caller. However, (*SKIP:NAME) searches only for names that are set with
> (*MARK), ignoring those set by any of the other backtracking verbs.
2942,2943c3599,3600
< unless PCRE's start-of-match optimizations are turned off, as shown in this
< output from `pcretest`:
---
> unless PCRE2's start-of-match optimizations are turned off, as shown in this
> output from `pcre2test`:
2948c3605,3607
< data&gt; xyzabc\eY
---
> data&gt;
> re&gt; /(*COMMIT)abc/no_start_optimize
> data&gt; xyzabc
2951c3610
< For this pattern, PCRE knows that any match must start with "a", so the
---
> For the first pattern, PCRE2 knows that any match must start with "a", so the
2953,2958c3612,3615
< first set of data. The match attempt then succeeds. In the second set of data,
< the escape sequence \eY is interpreted by the `pcretest` program. It causes
< the PCRE_NO_START_OPTIMIZE option to be set when `pcre\_exec()` is called.
< This disables the optimization that skips along to the first character. The
< pattern is now applied starting at "x", and so the (*COMMIT) causes the match
< to fail without trying any other starting points.
---
> first set of data. The match attempt then succeeds. The second pattern disables
> the optimization that skips along to the first character. The pattern is now
> applied starting at "x", and so the (*COMMIT) causes the match to fail without
> trying any other starting points.
2974,2976c3631,3634
< The behaviour of (*PRUNE:NAME) is the not the same as (*MARK:NAME)(*PRUNE).
< It is like (*MARK:NAME) in that the name is remembered for passing back to the
< caller. However, (*SKIP:NAME) searches only for names set with (*MARK).
---
> The behaviour of (*PRUNE:NAME) is not the same as (*MARK:NAME)(*PRUNE). It is
> like (*MARK:NAME) in that the name is remembered for passing back to the
> caller. However, (*SKIP:NAME) searches only for names set with (*MARK),
> ignoring those set by other backtracking verbs.
2985c3643
< successful match. Consider:
---
> successful match if there is a later mismatch. Consider:
2996a3655,3659
> If (*SKIP) is used to specify a new starting position that is the same as the
> starting position of the current match, or (by being inside a lookbehind)
> earlier, the position specified by (*SKIP) is ignored, and instead the normal
> "bumpalong" occurs.
> 
3000,3005c3663,3692
< When (*SKIP) has an associated name, its behaviour is modified. When it is
< triggered, the previous path through the pattern is searched for the most
< recent (*MARK) that has the same name. If one is found, the "bumpalong" advance
< is to the subject position that corresponds to that (*MARK) instead of to where
< (*SKIP) was encountered. If no (*MARK) with a matching name is found, the
< (*SKIP) is ignored.
---
> When (*SKIP) has an associated name, its behaviour is modified. When such a
> (*SKIP) is triggered, the previous path through the pattern is searched for the
> most recent (*MARK) that has the same name. If one is found, the "bumpalong"
> advance is to the subject position that corresponds to that (*MARK) instead of
> to where (*SKIP) was encountered. If no (*MARK) with a matching name is found,
> the (*SKIP) is ignored.
> 
> The search for a (*MARK) name uses the normal backtracking mechanism, which
> means that it does not see (*MARK) settings that are inside atomic groups or
> assertions, because they are never re-entered by backtracking. Compare the
> following `pcre2test` examples:
> 
>     re&gt; /a(?&gt;(*MARK:X))(*SKIP:X)(*F)|(.)/
> data: abc
>    0: a
>    1: a
> data:
>     re&gt; /a(?:(*MARK:X))(*SKIP:X)(*F)|(.)/
> data: abc
>    0: b
>    1: b
> 
> In the first example, the (*MARK) setting is in an atomic group, so it is not
> seen when (*SKIP:X) triggers, causing the (*SKIP) to be ignored. This allows
> the second branch of the pattern to be tried at the first character position.
> In the second example, the (*MARK) setting is not in an atomic group. This
> allows (*SKIP:X) to find the (*MARK) when it backtracks, and this causes a new
> matching attempt to start at the second character. This time, the (*MARK) is
> never seen because "a" does not match "b", so the matcher immediately jumps to
> the second branch of the pattern.
3008c3695
< names that are set by (*PRUNE:NAME) or (*THEN:NAME).
---
> names that are set by other backtracking verbs.
3028,3036c3715,3724
< The behaviour of (*THEN:NAME) is the not the same as (*MARK:NAME)(*THEN).
< It is like (*MARK:NAME) in that the name is remembered for passing back to the
< caller. However, (*SKIP:NAME) searches only for names set with (*MARK).
< 
< A subpattern that does not contain a | character is just a part of the
< enclosing alternative; it is not a nested alternation with only one
< alternative. The effect of (*THEN) extends beyond such a subpattern to the
< enclosing alternative. Consider this pattern, where A, B, etc. are complex
< pattern fragments that do not contain any | characters at this level:
---
> The behaviour of (*THEN:NAME) is not the same as (*MARK:NAME)(*THEN). It is
> like (*MARK:NAME) in that the name is remembered for passing back to the
> caller. However, (*SKIP:NAME) searches only for names set with (*MARK),
> ignoring those set by other backtracking verbs.
> 
> A group that does not contain a | character is just a part of the enclosing
> alternative; it is not a nested alternation with only one alternative. The
> effect of (*THEN) extends beyond such a group to the enclosing alternative.
> Consider this pattern, where A, B, etc. are complex pattern fragments that do
> not contain any | characters at this level:
3043c3731
< However, if the subpattern containing (*THEN) is given an alternative, it
---
> However, if the group containing (*THEN) is given an alternative, it
3049,3057c3737,3743
< The effect of (*THEN) is now confined to the inner subpattern. After a failure
< in C, matching moves to (*FAIL), which causes the whole subpattern to fail
< because there are no more alternatives to try. In this case, matching does now
< backtrack into A.
< 
< Note that a conditional subpattern is not considered as having two
< alternatives, because only one is ever used. In other words, the | character in
< a conditional subpattern has a different meaning. Ignoring white space,
< consider:
---
> The effect of (*THEN) is now confined to the inner group. After a failure in C,
> matching moves to (*FAIL), which causes the whole group to fail because there
> are no more alternatives to try. In this case, matching does backtrack into A.
> 
> Note that a conditional group is not considered as having two alternatives,
> because only one is ever used. In other words, the | character in a conditional
> group has a different meaning. Ignoring white space, consider:
3066c3752
< character. The conditional subpattern is part of the single alternative that
---
> character. The conditional group is part of the single alternative that
3094c3780
< appear in succession, all the the last of them has no effect. Consider this
---
> appear in succession, all but the last of them has no effect. Consider this
3109,3110c3795,3796
< PCRE differs from Perl in its handling of backtracking verbs in repeated
< groups. For example, consider:
---
> PCRE2 sometimes differs from Perl in its handling of backtracking verbs in
> repeated groups. For example, consider:
3115,3116c3801,3803
< If the subject is "abac", Perl matches, but PCRE fails because the (*COMMIT) in
< the second repeat of the group acts.
---
> If the subject is "abac", Perl matches unless its optimizations are disabled,
> but PCRE2 always fails because the (*COMMIT) in the second repeat of the group
> acts.
3123,3127c3810,3845
< (*FAIL) in an assertion has its normal effect: it forces an immediate backtrack.
< 
< (*ACCEPT) in a positive assertion causes the assertion to succeed without any
< further processing. In a negative assertion, (*ACCEPT) causes the assertion to
< fail without any further processing.
---
> (*FAIL) in any assertion has its normal effect: it forces an immediate
> backtrack. The behaviour of the other backtracking verbs depends on whether or
> not the assertion is standalone or acting as the condition in a conditional
> group.
> 
> (*ACCEPT) in a standalone positive assertion causes the assertion to succeed
> without any further processing; captured strings and a mark name (if set) are
> retained. In a standalone negative assertion, (*ACCEPT) causes the assertion to
> fail without any further processing; captured substrings and any mark name are
> discarded.
> 
> If the assertion is a condition, (*ACCEPT) causes the condition to be true for
> a positive assertion and false for a negative one; captured substrings are
> retained in both cases.
> 
> The remaining verbs act only when a later failure causes a backtrack to
> reach them. This means that, for the Perl-compatible assertions, their effect
> is confined to the assertion, because Perl lookaround assertions are atomic. A
> backtrack that occurs after such an assertion is complete does not jump back
> into the assertion. Note in particular that a (*MARK) name that is set in an
> assertion is not "seen" by an instance of (*SKIP:NAME) later in the pattern.
> 
> PCRE2 now supports non-atomic positive assertions and also "scan substring"
> assertions, as described in the sections entitled
> "Non-atomic assertions"
> and
> "Scan substring assertions"
> above. These assertions must be standalone (not used as conditions). They are
> not Perl-compatible. For these assertions, a later backtrack does jump back
> into the assertion, and therefore verbs such as (*COMMIT) can be triggered by
> backtracks from later in the pattern.
> 
> The effect of (*THEN) is not allowed to escape beyond an assertion. If there
> are no more branches to try, (*THEN) causes a positive assertion to be false,
> and a negative assertion to be true. This behaviour differs from Perl when the
> assertion has only one branch.
3130,3140c3848,3852
< positive assertion. In particular, (*THEN) skips to the next alternative in the
< innermost enclosing group that has alternations, whether or not this is within
< the assertion.
< 
< Negative assertions are, however, different, in order to ensure that changing a
< positive assertion into a negative assertion changes its result. Backtracking
< into (*COMMIT), (*SKIP), or (*PRUNE) causes a negative assertion to be true,
< without considering any further alternative branches in the assertion.
< Backtracking into (*THEN) causes it to skip to the next enclosing alternative
< within the assertion (the normal behaviour), but if the assertion does not have
< such an alternative, (*THEN) behaves like (*PRUNE).
---
> standalone positive assertion. In a conditional positive assertion,
> backtracking (from within the assertion) into (*COMMIT), (*SKIP), or (*PRUNE)
> causes the condition to be false. However, for both standalone and conditional
> negative assertions, backtracking into (*COMMIT), (*SKIP), or (*PRUNE) causes
> the assertion to be true, without considering any further alternative branches.
3147,3151c3859
< These behaviours occur whether or not the subpattern is called recursively.
< Perl's treatment of subroutines is different in some cases.
< 
< (*FAIL) in a subpattern called as a subroutine has its normal effect: it forces
< an immediate backtrack.
---
> These behaviours occur whether or not the group is called recursively.
3153c3861
< (*ACCEPT) in a subpattern called as a subroutine causes the subroutine match to
---
> (*ACCEPT) in a group called as a subroutine causes the subroutine match to
3155c3863,3864
< subroutine call.
---
> subroutine call. Perl documents this behaviour. Perl's treatment of the other
> verbs in subroutines is different in some cases.
3157,3158c3866,3867
< (*COMMIT), (*SKIP), and (*PRUNE) in a subpattern called as a subroutine cause
< the subroutine match to fail.
---
> (*FAIL) in a group called as a subroutine has its normal effect: it forces
> an immediate backtrack.
3160,3162c3869,3876
< (*THEN) skips to the next alternative in the innermost enclosing group within
< the subpattern that has alternatives. If there is no such group within the
< subpattern, (*THEN) causes the subroutine match to fail.
---
> (*COMMIT), (*SKIP), and (*PRUNE) cause the subroutine match to fail when
> triggered by being backtracked to in a group called as a subroutine. There is
> then a backtrack at the outer level.
> 
> (*THEN), when triggered, skips to the next alternative in the innermost
> enclosing group that has alternatives (its normal behaviour). However, if there
> is no such group within the subroutine's group, the subroutine match fails and
> there is a backtrack at the outer level.
3169,3170c3883,3884
< `pcreapi`(3), `pcrecallout`(3), `pcrematching`(3),
< `pcresyntax`(3), `pcre`(3), `pcre16(3)`, `pcre32(3)`.
---
> `pcre2api`(3), `pcre2callout`(3), `pcre2matching`(3),
> `pcre2syntax`(3), `pcre2`(3).
3178,3179c3892,3893
<     University Computing Service
<     Cambridge CB2 3QH, England.
---
>     Retired from University Computing Service
>     Cambridge, England.
3186,3187c3900,3901
<     Last updated: 23 October 2016
<     Copyright (c) 1997-2016 University of Cambridge.
---
>     Last updated: 21 September 2024
>     Copyright (c) 1997-2024 University of Cambridge.
