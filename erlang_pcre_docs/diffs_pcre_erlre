1c1,2
< ## pcrepattern(3) - Perl-compatible regular expressions
---
> This module contains regular expression matching functions for strings and
> binaries.
3c4,5
< PCRE 8.40, 23 October 2016
---
> The [regular expression](`m:re#module-perl-like-regular-expression-syntax`) syntax and
> semantics resemble that of Perl.
4a7,63
> The matching algorithms of the library are based on the PCRE library, but not
> all of the PCRE library is interfaced and some parts of the library go beyond
> what PCRE offers. Currently PCRE version 8.40 (release date 2017-01-11) is used.
> The sections of the PCRE documentation that are relevant to this module are
> included here.
> 
> > #### Note {: .info }
> >
> > The Erlang literal syntax for strings uses the `\\` (backslash) character as
> > an escape code. You need to escape backslashes in literal strings, both in
> > your code and in the shell, with an extra backslash, that is, `"\\\\"` or
> > `<<"\\\\">>`.
> >
> > Since Erlang/OTP 27 you can use [verbatim sigils](`e:system:data_types.md#sigil`)
> > to write literal strings. The example above would be written as `~S"\"` or `~B"\"`.
> 
> ## Perl-Like Regular Expression Syntax
> 
> The following sections contain reference material for the regular expressions
> used by this module. The information is based on the PCRE documentation, with
> changes where this module behaves differently to the PCRE library.
> 
> ## PCRE Regular Expression Details
> 
> The syntax and semantics of the regular expressions supported by PCRE are
> described in detail in the following sections. Perl's regular expressions are
> described in its own documentation, and regular expressions in general are
> covered in many books, some with copious examples. Jeffrey Friedl's "Mastering
> Regular Expressions", published by O'Reilly, covers regular expressions in great
> detail. This description of the PCRE regular expressions is intended as
> reference material.
> 
> The reference material is divided into the following sections:
> 
> - [Special Start-of-Pattern Items](`m:re#sect1`)
> - [Characters and Metacharacters](`m:re#sect2`)
> - [Backslash](`m:re#sect3`)
> - [Circumflex and Dollar](`m:re#sect4`)
> - [Full Stop (Period, Dot) and \\N](`m:re#sect5`)
> - [Matching a Single Data Unit](`m:re#sect6`)
> - [Square Brackets and Character Classes](`m:re#sect7`)
> - [Posix Character Classes](`m:re#sect8`)
> - [Vertical Bar](`m:re#sect9`)
> - [Internal Option Setting](`m:re#sect10`)
> - [Subpatterns](`m:re#sect11`)
> - [Duplicate Subpattern Numbers](`m:re#sect12`)
> - [Named Subpatterns](`m:re#sect13`)
> - [Repetition](`m:re#sect14`)
> - [Atomic Grouping and Possessive Quantifiers](`m:re#sect15`)
> - [Back References](`m:re#sect16`)
> - [Assertions](`m:re#sect17`)
> - [Conditional Subpatterns](`m:re#sect18`)
> - [Comments](`m:re#sect19`)
> - [Recursive Patterns](`m:re#sect20`)
> - [Subpatterns as Subroutines](`m:re#sect21`)
> - [Oniguruma Subroutine Syntax](`m:re#sect22`)
> - [Backtracking Control](`m:re#sect23`)
6,36c65
< <a name="pcre-regular-expression-details"></a>
< 
< ## Pcre Regular Expression Details
< 
< 
< The syntax and semantics of the regular expressions that are supported by PCRE
< are described in detail below. There is a quick-reference syntax summary in the
< `pcresyntax`
< page. PCRE tries to match Perl syntax and semantics as closely as it can. PCRE
< also supports some alternative regular expression syntax (which does not
< conflict with the Perl syntax) in order to provide some compatibility with
< regular expressions in Python, .NET, and Oniguruma.
< 
< Perl's regular expressions are described in its own documentation, and
< regular expressions in general are covered in a number of books, some of which
< have copious examples. Jeffrey Friedl's "Mastering Regular Expressions",
< published by O'Reilly, covers regular expressions in great detail. This
< description of PCRE's regular expressions is intended as reference material.
< 
< This document discusses the patterns that are supported by PCRE when one its
< main matching functions, `pcre\_exec()` (8-bit) or `pcre[16|32]\_exec()`
< (16- or 32-bit), is used. PCRE also has alternative matching functions,
< `pcre\_dfa\_exec()` and `pcre[16|32\_dfa\_exec()`, which match using a
< different algorithm that is not Perl-compatible. Some of the features discussed
< below are not available when DFA matching is used. The advantages and
< disadvantages of the alternative functions, and how they differ from the normal
< functions, are discussed in the
< `pcrematching`
< page.
< 
< <a name="special-start-of-pattern-items"></a>
---
> [](){: #sect1 }
40,60c69,80
< 
< A number of options that can be passed to `pcre\_compile()` can also be set
< by special items at the start of a pattern. These are not Perl-compatible, but
< are provided to make these options accessible to pattern writers who are not
< able to change the program that processes the pattern. Any number of these
< items may appear, but they must all be together right at the start of the
< pattern string, and the letters must be in upper case.
< 
< <a name="utf-support"></a>
< 
< _UTF support_
< 
< 
< The original operation of PCRE was on strings of one-byte characters. However,
< there is now also support for UTF-8 strings in the original library, an
< extra library that supports 16-bit and UTF-16 character strings, and a
< third library that supports 32-bit and UTF-32 character strings. To use these
< features, PCRE must be built to include appropriate support. When using UTF
< strings you must either call the compiling function with the PCRE_UTF8,
< PCRE_UTF16, or PCRE_UTF32 option, or the pattern must start with one of
< these special sequences:
---
> Some options that can be passed to `compile/2` can also be set by special items
> at the start of a pattern. These are not Perl-compatible, but are provided to
> make these options accessible to pattern writers who are not able to change the
> program that processes the pattern. Any number of these items can appear, but
> they must all be together right at the start of the pattern string, and the
> letters must be in upper case.
> 
> _UTF Support_
> 
> Unicode support is basically UTF-8 based. To use Unicode characters, you either
> call `compile/2` or `run/3` with option `unicode`, or the pattern must start
> with one of these special sequences:
64,65d83
< (*UTF16)
< (*UTF32)
68,80d85
< (*UTF) is a generic sequence that can be used with any of the libraries.
< Starting a pattern with such a sequence is equivalent to setting the relevant
< option. How setting a UTF mode affects pattern matching is mentioned in several
< places below. There is also a summary of features in the
< `pcreunicode`
< page.
< 
< Some applications that allow their users to supply patterns may wish to
< restrict them to non-UTF data for security reasons. If the PCRE_NEVER_UTF
< option is set at compile time, (*UTF) etc. are not allowed, and their
< appearance causes an error.
< 
< <a name="unicode-property-support"></a>
82c87,95
< _Unicode property support_
---
> Both options give the same effect, the input string is interpreted as UTF-8.
> Notice that with these instructions, the automatic conversion of lists to UTF-8
> is not performed by the `re` functions. Therefore, using these sequences is not
> recommended. Add option `unicode` when running `compile/2` instead.
> 
> Some applications that allow their users to supply patterns can wish to restrict
> them to non-UTF data for security reasons. If option `never_utf` is set at
> compile time, (\*UTF), and so on, are not allowed, and their appearance causes
> an error.
83a97
> _Unicode Property Support_
85,91c99,100
< Another special sequence that may appear at the start of a pattern is (*UCP).
< This has the same effect as setting the PCRE_UCP option: it causes sequences
< such as \ed and \ew to use Unicode properties to determine character types,
< instead of recognizing only characters with codes less than 128 via a lookup
< table.
< 
< <a name="disabling-auto-possessification"></a>
---
> The following is another special sequence that can appear at the start of a
> pattern:
93c102,104
< _Disabling auto-possessification_
---
> ```text
> (*UCP)
> ```
94a106,108
> This has the same effect as setting option `ucp`: it causes sequences such as
> `\d` and `\w` to use Unicode properties to determine character types, instead of
> recognizing only characters with codes < 256 through a lookup table.
96,101c110
< If a pattern starts with (*NO_AUTO_POSSESS), it has the same effect as setting
< the PCRE_NO_AUTO_POSSESS option at compile time. This stops PCRE from making
< quantifiers possessive when what follows cannot match the repeated item. For
< example, by default a+b is treated as a++b. For more details, see the
< `pcreapi`
< documentation.
---
> _Disabling Startup Optimizations_
103c112,113
< <a name="disabling-start-up-optimizations"></a>
---
> If a pattern starts with `(*NO_START_OPT)`, it has the same effect as setting
> option `no_start_optimize` at compile time.
105c115
< _Disabling start-up optimizations_
---
> _Newline Conventions_
106a117
> [](){: #newline_conventions }
108,113c119,122
< If a pattern starts with (*NO_START_OPT), it has the same effect as setting the
< PCRE_NO_START_OPTIMIZE option either at compile or matching time. This disables
< several optimizations for quickly reaching "no match" results. For more
< details, see the
< `pcreapi`
< documentation.
---
> PCRE supports five conventions for indicating line breaks in strings: a single
> CR (carriage return) character, a single LF (line feed) character, the
> two-character sequence CRLF, any of the three preceding, and any Unicode newline
> sequence.
115c124,125
< <a name="newline-conventions"></a>
---
> A newline convention can also be specified by starting a pattern string with one
> of the following five sequences:
117c127
< _Newline conventions_
---
> - **(\*CR)** - Carriage return
118a129
> - **(\*LF)** - Line feed
120,128c131
< PCRE supports five different conventions for indicating line breaks in
< strings: a single CR (carriage return) character, a single LF (linefeed)
< character, the two-character sequence CRLF, any of the three preceding, or any
< Unicode newline sequence. The
< `pcreapi`
< page has
< further discussion
< about newlines, and shows how to set the newline convention in the
< _options_ arguments for the compiling and matching functions.
---
> - **(\*CRLF)** - >Carriage return followed by line feed
130,131c133
< It is also possible to specify a newline convention by starting a pattern
< string with one of the following five sequences:
---
> - **(\*ANYCRLF)** - Any of the three above
133,137c135
< - **(*CR)** - carriage return
< - **(*LF)** - linefeed
< - **(*CRLF)** - carriage return, followed by linefeed
< - **(*ANYCRLF)** - any of the three above
< - **(*ANY)** - all Unicode newline sequences
---
> - **(\*ANY)** - All Unicode newline sequences
139,140c137,138
< These override the default and the options given to the compiling function. For
< example, on a Unix system where LF is the default newline sequence, the pattern
---
> These override the default and the options specified to `compile/2`. For
> example, the following pattern changes the convention to CR:
143a142
> ```
145,147c144,145
< changes the convention to CR. That pattern matches "a\enb" because LF is no
< longer a newline. If more than one of these settings is present, the last one
< is used.
---
> This pattern matches `a\nb`, as LF is no longer a newline. If more than one of
> them is present, the last one is used.
150,171c148,163
< true. It also affects the interpretation of the dot metacharacter when
< PCRE_DOTALL is not set, and the behaviour of \eN. However, it does not affect
< what the \eR escape sequence matches. By default, this is any Unicode newline
< sequence, for Perl compatibility. However, this can be changed; see the
< description of \eR in the section entitled
< "Newline sequences"
< below. A change of \eR setting can be combined with a change of newline
< convention.
< 
< <a name="setting-match-and-recursion-limits"></a>
< 
< _Setting match and recursion limits_
< 
< 
< The caller of `pcre\_exec()` can set a limit on the number of times the
< internal `match()` function is called and on the maximum depth of
< recursive calls. These facilities are provided to catch runaway matches that
< are provoked by patterns with huge matching trees (a typical example is a
< pattern with nested unlimited repeats) and to avoid running out of system stack
< by too much recursion. When one of these limits is reached, `pcre\_exec()`
< gives an error return. The limits can also be set by items at the start of the
< pattern of the form
---
> true. It also affects the interpretation of the dot metacharacter when `dotall`
> is not set, and the behavior of `\N`. However, it does not affect what the `\R`
> escape sequence matches. By default, this is any Unicode newline sequence, for
> Perl compatibility. However, this can be changed; see the description of `\R` in
> section [Newline Sequences](`m:re#newline_sequences`). A change of the `\R`
> setting can be combined with a change of the newline convention.
> 
> _Setting Match and Recursion Limits_
> 
> The caller of `run/3` can set a limit on the number of times the internal
> match() function is called and on the maximum depth of recursive calls. These
> facilities are provided to catch runaway matches that are provoked by patterns
> with huge matching trees (a typical example is a pattern with nested unlimited
> repeats) and to avoid running out of system stack by too much recursion. When
> one of these limits is reached, `pcre_exec()` gives an error return. The limits
> can also be set by items at the start of the pattern of the following forms:
177,185d168
< where d is any number of decimal digits. However, the value of the setting must
< be less than the value set (or defaulted) by the caller of `pcre\_exec()`
< for it to have any effect. In other words, the pattern writer can lower the
< limits set by the programmer, but not raise them. If there is more than one
< setting of one of these limits, the lower value is used.
< 
< <a name="ebcdic-character-codes"></a>
< 
< ## Ebcdic Character Codes
186a170,179
> Here d is any number of decimal digits. However, the value of the setting must
> be less than the value set by the caller of [`run/3`](`run/3`) for it to have
> any effect. That is, the pattern writer can lower the limit set by the
> programmer, but not raise it. If there is more than one setting of one of these
> limits, the lower value is used.
> 
> The default value for both the limits is 10,000,000 in the Erlang VM. Notice
> that the recursion limit does not affect the stack depth of the VM, as PCRE for
> Erlang is compiled in such a way that the match function never does recursion on
> the C stack.
188,192c181,182
< PCRE can be compiled to run in an environment that uses EBCDIC as its character
< code rather than ASCII or Unicode (typically a mainframe system). In the
< sections below, character code values are ASCII or Unicode; in an EBCDIC
< environment these characters may have different code values, and there are no
< code points greater than 255.
---
> Note that `LIMIT_MATCH` and `LIMIT_RECURSION` can only reduce the value of the
> limits set by the caller, not increase them.
194c184
< <a name="characters-and-metacharacters"></a>
---
> [](){: #sect2 }
198d187
< 
200,201c189,191
< left to right. Most characters stand for themselves in a pattern, and match the
< corresponding characters in the subject. As a trivial example, the pattern
---
> left to right. Most characters stand for themselves in a pattern and match the
> corresponding characters in the subject. As a trivial example, the following
> pattern matches a portion of a subject string that is identical to itself:
204a195
> ```
206,214c197,198
< matches a portion of a subject string that is identical to itself. When
< caseless matching is specified (the PCRE_CASELESS option), letters are matched
< independently of case. In a UTF mode, PCRE always understands the concept of
< case for characters whose values are less than 128, so caseless matching is
< always possible. For characters with higher values, the concept of case is
< supported if PCRE is compiled with Unicode property support, but not otherwise.
< If you want to use caseless matching for characters 128 and above, you must
< ensure that PCRE is compiled with Unicode property support as well as with
< UTF support.
---
> When caseless matching is specified (option `caseless`), letters are matched
> independently of case.
218,219c202,203
< _metacharacters_, which do not stand for themselves but instead are
< interpreted in some special way.
---
> _metacharacters_, which do not stand for themselves but instead are interpreted
> in some special way.
221,250c205,207
< There are two different sets of metacharacters: those that are recognized
< anywhere in the pattern except within square brackets, and those that are
< recognized within square brackets. Outside square brackets, the metacharacters
< are as follows:
< 
< - **`\e`** - general escape character with several uses
< - **`^`** - assert start of string (or line, in multiline mode)
< - **`$`** - assert end of string (or line, in multiline mode)
< - **`.`** - match any character except newline (by default)
< - **`[`** - start character class definition
< - **`|`** - start of alternative branch
< - **`(`** - start subpattern
< - **`)`** - end subpattern
< - **`?`** - extends the meaning of (
< also 0 or 1 quantifier
< also quantifier minimizer
< - **`*`** - 0 or more quantifier
< - **`+`** - 1 or more quantifier
< also "possessive quantifier"
< - **`{`** - start min/max quantifier
< 
< Part of a pattern that is in square brackets is called a "character class". In
< a character class the only metacharacters are:
< 
< - **`\e`** - general escape character
< - **`^`** - negate the class, but only if the first character
< - **`-`** - indicates character range
< - **`[`** - POSIX character class (only if followed by POSIX
< syntax)
< - **`]`** - terminates the character class
---
> Two sets of metacharacters exist: those that are recognized anywhere in the
> pattern except within square brackets, and those that are recognized within
> square brackets. Outside square brackets, the metacharacters are as follows:
252c209
< The following sections describe the use of each of the metacharacters.
---
> - **`\`** - General escape character with many uses
254c211
< <a name="backslash"></a>
---
> - **`^`** - Assert start of string (or line, in multiline mode)
256c213,237
< ## Backslash
---
> - **`$`** - Assert end of string (or line, in multiline mode)
> 
> - **`.`** - Match any character except newline (by default)
> 
> - **`[`** - Start character class definition
> 
> - **`|`** - Start of alternative branch
> 
> - **`(`** - Start subpattern
> 
> - **`)`** - End subpattern
> 
> - **`?`** - Extends the meaning of (, also 0 or 1 quantifier, also quantifier
>   minimizer
> 
> - **`*`** - 0 or more quantifiers
> 
> - **`+`** - 1 or more quantifier, also "possessive quantifier"
> 
> - **`{`** - Start min/max quantifier
> 
> Part of a pattern within square brackets is called a "character class". The
> following are the only metacharacters in a character class:
> 
> - **`\`** - General escape character
257a239
> - **`^`** - Negate the class, but only if the first character
259,266c241,260
< The backslash character has several uses. Firstly, if it is followed by a
< character that is not a number or a letter, it takes away any special meaning
< that character may have. This use of backslash as an escape character applies
< both inside and outside character classes.
< 
< For example, if you want to match a * character, you write \e* in the pattern.
< This escaping action applies whether or not the following character would
< otherwise be interpreted as a metacharacter, so it is always safe to precede a
---
> - **`-`** - Indicates character range
> 
> - **`[`** - Posix character class (only if followed by Posix syntax)
> 
> - **`]`** - Terminates the character class
> 
> The following sections describe the use of each metacharacter.
> 
> [](){: #sect3 }
> 
> ## Backslash
> 
> The backslash character has many uses. First, if it is followed by a character
> that is not a number or a letter, it takes away any special meaning that a
> character can have. This use of backslash as an escape character applies both
> inside and outside character classes.
> 
> For example, if you want to match a "\_" character, you write `\_` in the pattern.
> This escaping action applies if the following character would otherwise be
> interpreted as a metacharacter, so it is always safe to precede a
268c262,284
< particular, if you want to match a backslash, you write \e\e.
---
> particular, if you want to match a backslash, write `\\`.
> 
> In `unicode` mode, only ASCII numbers and letters have any special meaning after
> a backslash. All other characters (in particular, those whose code points
> are > 127) are treated as literals.
> 
> If a pattern is compiled with option `extended`, whitespace in the pattern
> (other than in a character class) and characters between a # outside a character
> class and the next newline are ignored. An escaping backslash can be used to
> include a whitespace or # character as part of the pattern.
> 
> To remove the special meaning from a sequence of characters, put them between
> `\Q` and `\E`. This is different from Perl in that `$` and `@` are handled as literals
> in `\Q`...`\E` sequences in PCRE, while `$` and `@` cause variable interpolation in
> Perl. Notice the following examples:
> 
> ```text
> Pattern            PCRE matches   Perl matches
> 
> \Qabc$xyz\E        abc$xyz        abc followed by the contents of $xyz
> \Qabc\$xyz\E       abc\$xyz       abc\$xyz
> \Qabc\E\$\Qxyz\E   abc$xyz        abc$xyz
> ```
270,295c286,290
< In a UTF mode, only ASCII numbers and letters have any special meaning after a
< backslash. All other characters (in particular, those whose codepoints are
< greater than 127) are treated as literals.
< 
< If a pattern is compiled with the PCRE_EXTENDED option, most white space in the
< pattern (other than in a character class), and characters between a # outside a
< character class and the next newline, inclusive, are ignored. An escaping
< backslash can be used to include a white space or # character as part of the
< pattern.
< 
< If you want to remove the special meaning from a sequence of characters, you
< can do so by putting them between \eQ and \eE. This is different from Perl in
< that $ and @ are handled as literals in \eQ...\eE sequences in PCRE, whereas in
< Perl, $ and @ cause variable interpolation. Note the following examples:
< 
< - **Pattern** - PCRE matches   Perl matches
< - **`\eQabc$xyz\eE`** - abc$xyz        abc followed by the
< contents of $xyz
< - **`\eQabc\e$xyz\eE`** - abc\e$xyz       abc\e$xyz
< - **`\eQabc\eE\e$\eQxyz\eE`** - abc$xyz        abc$xyz
< 
< The \eQ...\eE sequence is recognized both inside and outside character classes.
< An isolated \eE that is not preceded by \eQ is ignored. If \eQ is not followed
< by \eE later in the pattern, the literal interpretation continues to the end of
< the pattern (that is, \eE is assumed at the end). If the isolated \eQ is inside
< a character class, this causes an error, because the character class is not
---
> The `\Q`...`\E` sequence is recognized both inside and outside character classes.
> An isolated `\E` that is not preceded by `\Q` is ignored. If `\Q` is not followed
> by `\E` later in the pattern, the literal interpretation continues to the end of
> the pattern (that is, `\E` is assumed at the end). If the isolated `\Q` is inside
> a character class, this causes an error, as the character class is not
298c293,323
< <a name="non-printing-characters"></a>
---
> _Non-Printing Characters_
> 
> [](){: #non_printing_characters }
> 
> A second use of backslash provides a way of encoding non-printing characters in
> patterns in a visible manner. There is no restriction on the appearance of
> non-printing characters, apart from the binary zero that terminates a pattern.
> When a pattern is prepared by text editing, it is often easier to use one of the
> following escape sequences than the binary character it represents:
> 
> - **`\a`** - Alarm, that is, the BEL character (hex 07)
> 
> - **`\cx`** - "Control-x", where x is any ASCII character
> 
> - **`\e`** - Escape (hex 1B)
> 
> - **`\f`** - Form feed (hex 0C)
> 
> - **`\n`** - Line feed (hex 0A)
> 
> - **`\r`** - Carriage return (hex 0D)
> 
> - **`\t`** - Tab (hex 09)
> 
> - **`\0dd`** - Character with octal code 0dd
> 
> - **`\ddd`** - Character with octal code ddd, or back reference
> 
> - **`\o{ddd..}`** - character with octal code ddd..
> 
> - **`\xhh`** - Character with hex code hh
300c325
< _Non-printing characters_
---
> - **`\x{hhh..}`** - Character with hex code hhh..
301a327,330
> > #### Note {: .info }
> >
> > Note that `\0dd` is always an octal code, and that `\8` and `\9` are the literal
> > characters "8" and "9".
303,328c332,336
< A second use of backslash provides a way of encoding non-printing characters
< in patterns in a visible manner. There is no restriction on the appearance of
< non-printing characters, apart from the binary zero that terminates a pattern,
< but when a pattern is being prepared by text editing, it is often easier to use
< one of the following escape sequences than the binary character it represents.
< In an ASCII or Unicode environment, these escapes are as follows:
< 
< - **`\ea`** - alarm, that is, the BEL character (hex 07)
< - **`\ecx`** - "control-x", where x is any ASCII character
< - **`\ee`** - escape (hex 1B)
< - **`\ef`** - form feed (hex 0C)
< - **`\en`** - linefeed (hex 0A)
< - **`\er`** - carriage return (hex 0D)
< - **`\et`** - tab (hex 09)
< - **`\e0dd`** - character with octal code 0dd
< - **`\eddd`** - character with octal code ddd, or back reference
< \eo{ddd..} character with octal code ddd..
< - **`\exhh`** - character with hex code hh
< \ex{hhh..} character with hex code hhh.. (non-JavaScript mode)
< - **`\euhhhh`** - character with hex code hhhh (JavaScript mode only)
< 
< The precise effect of \ecx on ASCII characters is as follows: if x is a lower
< case letter, it is converted to upper case. Then bit 6 of the character (hex
< 40) is inverted. Thus \ecA to \ecZ become hex 01 to hex 1A (A is 41, Z is 5A),
< but \ec{ becomes hex 3B ({ is 7B), and \ec; becomes hex 7B (; is 3B). If the
< data item (byte or 16-bit value) following \ec has a value greater than 127, a
---
> The precise effect of `\cx` on ASCII characters is as follows: if x is a
> lowercase letter, it is converted to upper case. Then bit 6 of the character
> (hex 40) is inverted. Thus `\cA` to `\cZ` become hex 01 to hex 1A (A is 41, Z is
> 5A), but `\c{` becomes hex 3B (`{` is 7B), and `\c`; becomes hex 7B (; is 3B). If
> the data item (byte or 16-bit value) following `\c` has a value > 127, a
331,355c339,345
< When PCRE is compiled in EBCDIC mode, \ea, \ee, \ef, \en, \er, and \et
< generate the appropriate EBCDIC code values. The \ec escape is processed
< as specified for Perl in the `perlebcdic` document. The only characters
< that are allowed after \ec are A-Z, a-z, or one of @, [, \e, ], ^, _, or ?. Any
< other character provokes a compile-time error. The sequence \ec@ encodes
< character code 0; after \ec the letters (in either case) encode characters 1-26
< (hex 01 to hex 1A); [, \e, ], ^, and _ encode characters 27-31 (hex 1B to hex
< 1F), and \ec? becomes either 255 (hex FF) or 95 (hex 5F).
< 
< Thus, apart from \ec?, these escapes generate the same character code values as
< they do in an ASCII environment, though the meanings of the values mostly
< differ. For example, \ecG always generates code value 7, which is BEL in ASCII
< but DEL in EBCDIC.
< 
< The sequence \ec? generates DEL (127, hex 7F) in an ASCII environment, but
< because 127 is not a control character in EBCDIC, Perl makes it generate the
< APC character. Unfortunately, there are several variants of EBCDIC. In most of
< them the APC character has the value 255 (hex FF), but in the one Perl calls
< POSIX-BC its value is 95 (hex 5F). If certain other characters have POSIX-BC
< values, PCRE makes \ec? generate 95; otherwise it generates 255.
< 
< After \e0 up to two further octal digits are read. If there are fewer than two
< digits, just those that are present are used. Thus the sequence \e0\ex\e015
< specifies two binary zeros followed by a CR character (code value 13). Make
< sure you supply two digits after the initial zero if the pattern character that
---
> The `\c` facility was designed for use with ASCII characters, but with the
> extension to Unicode it is even less useful than it once was.
> 
> After `\0` up to two further octal digits are read. If there are fewer than two
> digits, just those that are present are used. Thus the sequence `\0\x\015`
> specifies two binary zeros followed by a CR character (code value 13). Make sure
> you supply two digits after the initial zero if the pattern character that
358c348
< The escape \eo must be followed by a sequence of octal digits, enclosed in
---
> The escape `\o` must be followed by a sequence of octal digits, enclosed in
364,367c354,357
< For greater clarity and unambiguity, it is best to avoid following \e by a
< digit greater than zero. Instead, use \eo{} or \ex{} to specify character
< numbers, and \eg{} to specify back references. The following paragraphs
< describe the old, ambiguous syntax.
---
> For greater clarity and unambiguity, it is best to avoid following `\` by a digit
> greater than zero. Instead, use `\o{}` or `\x{}` to specify character numbers,
> and `\g{}` to specify back references. The following paragraphs describe the
> old, ambiguous syntax.
369,370c359,360
< The handling of a backslash followed by a digit other than 0 is complicated,
< and Perl has changed in recent releases, causing PCRE also to change. Outside a
---
> The handling of a backslash followed by a digit other than 0 is complicated, and
> Perl has changed in recent releases, causing PCRE also to change. Outside a
372,402c362,381
< number. If the number is less than 8, or if there have been at least that many
< previous capturing left parentheses in the expression, the entire sequence is
< taken as a _back reference_. A description of how this works is given
< later,
< following the discussion of
< parenthesized subpatterns.
< 
< Inside a character class, or if the decimal number following \e is greater than
< 7 and there have not been that many capturing subpatterns, PCRE handles \e8 and
< \e9 as the literal characters "8" and "9", and otherwise re-reads up to three
< octal digits following the backslash, using them to generate a data character.
< Any subsequent digits stand for themselves. For example:
< 
< - **`\e040`** - is another way of writing an ASCII space
< - **`\e40`** - is the same, provided there are fewer than 40
< previous capturing subpatterns
< - **`\e7`** - is always a back reference
< - **`\e11`** - might be a back reference, or another way of
< writing a tab
< - **`\e011`** - is always a tab
< \e0113  is a tab followed by the character "3"
< - **`\e113`** - might be a back reference, otherwise the
< character with octal code 113
< - **`\e377`** - might be a back reference, otherwise
< the value 255 (decimal)
< - **`\e81`** - is either a back reference, or the two
< characters "8" and "1"
< ```
< Note that octal values of 100 or greater that are specified using this syntax
< must not be introduced by a leading zero, because no more than three octal
< digits are ever read.
---
> number. If the number is < 8, or if there have been at least that many previous
> capturing left parentheses in the expression, the entire sequence is taken as a
> _back reference_. A description of how this works is provided later, following
> the discussion of parenthesized subpatterns.
> 
> Inside a character class, or if the decimal number following `\` is > 7 and there
> have not been that many capturing subpatterns, PCRE handles `\8` and `\9` as the
> literal characters "8" and "9", and otherwise re-reads up to three octal digits
> following the backslash, and using them to generate a data character. Any
> subsequent digits stand for themselves. For example:
> 
> - **`\040`** - Another way of writing an ASCII space
> 
> - **`\40`** - The same, provided there are < 40 previous capturing subpatterns
> 
> - **`\7`** - Always a back reference
> 
> - **`\11`** - Can be a back reference, or another way of writing a tab
> 
> - **`\011`** - Always a tab
404c383,395
< By default, after \ex that is not followed by {, from zero to two hexadecimal
---
> - **`\0113`** - A tab followed by character "3"
> 
> - **`\113`** - Can be a back reference, otherwise the character with octal code
>   113
> 
> - **`\377`** - Can be a back reference, otherwise value 255 (decimal)
> 
> - **`\81`** - Either a back reference, or the two characters "8" and "1"
> 
> Notice that octal values >= 100 that are specified using this syntax must not be
> introduced by a leading zero, as no more than three octal digits are ever read.
> 
> By default, after `\x` that is not followed by `{`, from zero to two hexadecimal
406,414c397,399
< hexadecimal digits may appear between \ex{ and }. If a character other than
< a hexadecimal digit appears between \ex{ and }, or if there is no terminating
< }, an error occurs.
< 
< If the PCRE_JAVASCRIPT_COMPAT option is set, the interpretation of \ex is
< as just described only when it is followed by two hexadecimal digits.
< Otherwise, it matches a literal "x" character. In JavaScript mode, support for
< code points greater than 256 is provided by \eu, which must be followed by
< four hexadecimal digits; otherwise it matches a literal "u" character.
---
> hexadecimal digits may appear between `\x{` and `}`. If a character other than a
> hexadecimal digit appears between `\x{` and `}`, or if there is no terminating
> `}`, an error occurs.
417,421c402,403
< syntaxes for \ex (or by \eu in JavaScript mode). There is no difference in the
< way they are handled. For example, \exdc is exactly the same as \ex{dc} (or
< \eu00dc in JavaScript mode).
< 
< <a name="constraints-on-character-values"></a>
---
> syntaxes for `\x`. There is no difference in the way they are handled. For
> example, `\xdc` is exactly the same as `\x{dc}`.
424a407,410
> Characters that are specified using octal or hexadecimal numbers are limited to
> certain values, as follows:
> 
> - **8-bit non-UTF mode** - < 0x100
426,427c412
< Characters that are specified using octal or hexadecimal numbers are
< limited to certain values, as follows:
---
> - **8-bit UTF-8 mode** - < 0x10ffff and a valid codepoint
429d413
< - **8-bit non-UTF mode** - less than 0x100- **8-bit UTF-8 mode** - less than 0x10ffff and a valid codepoint- **16-bit non-UTF mode** - less than 0x10000- **16-bit UTF-16 mode** - less than 0x10ffff and a valid codepoint- **32-bit non-UTF mode** - less than 0x100000000- **32-bit UTF-32 mode** - less than 0x10ffff and a valid codepoint
433,434d416
< <a name="escape-sequences-in-character-classes"></a>
< 
437d418
< 
439c420
< and outside character classes. In addition, inside a character class, \eb is
---
> and outside character classes. Also, inside a character class, `\b` is
442c423
< \eN is not allowed in a character class. \eB, \eR, and \eX are not special
---
> `\N` is not allowed in a character class. `\B`, `\R`, and `\X` are not special
444,446c425,426
< treated as the literal characters "B", "R", and "X" by default, but cause an
< error if the PCRE_EXTRA option is set. Outside a character class, these
< sequences have different meanings.
---
> treated as the literal characters "B", "R", and "X". Outside a character class,
> these sequences have different meanings.
448c428
< <a name="unsupported-escape-sequences"></a>
---
> _Unsupported Escape Sequences_
450c430,432
< _Unsupported escape sequences_
---
> In Perl, the sequences `\l`, `\L`, `\u`, and `\U` are recognized by its string
> handler and used to modify the case of following characters. PCRE does not
> support these escape sequences.
451a434
> _Absolute and Relative Back References_
453,457c436,439
< In Perl, the sequences \el, \eL, \eu, and \eU are recognized by its string
< handler and used to modify the case of following characters. By default, PCRE
< does not support these escape sequences. However, if the PCRE_JAVASCRIPT_COMPAT
< option is set, \eU matches a "U" character, and \eu can be used to define a
< character by code point, as described in the previous section.
---
> The sequence `\g` followed by an unsigned or a negative number, optionally
> enclosed in braces, is an absolute or relative back reference. A named back
> reference can be coded as `\g{name}`. Back references are discussed later,
> following the discussion of parenthesized subpatterns.
459c441
< <a name="absolute-and-relative-back-references"></a>
---
> _Absolute and Relative Subroutine Calls_
461c443,448
< _Absolute and relative back references_
---
> For compatibility with Oniguruma, the non-Perl syntax `\g` followed by a name or
> a number enclosed either in angle brackets or single quotes, is alternative
> syntax for referencing a subpattern as a "subroutine". Details are discussed
> later. Notice that `\g{...}` (Perl syntax) and `\g<...>` (Oniguruma syntax) are
> _not_ synonymous. The former is a back reference and the latter is a subroutine
> call.
462a450
> _Generic Character Types_
464,469c452,454
< The sequence \eg followed by an unsigned or a negative number, optionally
< enclosed in braces, is an absolute or relative back reference. A named back
< reference can be coded as \eg{name}. Back references are discussed
< later,
< following the discussion of
< parenthesized subpatterns.
---
> [](){: #generic_character_types }
> 
> Another use of backslash is for specifying generic character types:
471c456
< <a name="absolute-and-relative-subroutine-calls"></a>
---
> - **`\d`** - Any decimal digit
473c458
< _Absolute and relative subroutine calls_
---
> - **`\D`** - Any character that is not a decimal digit
474a460
> - **`\h`** - Any horizontal whitespace character
476,483c462
< For compatibility with Oniguruma, the non-Perl syntax \eg followed by a name or
< a number enclosed either in angle brackets or single quotes, is an alternative
< syntax for referencing a subpattern as a "subroutine". Details are discussed
< later.
< Note that \eg{...} (Perl syntax) and \eg&lt;...&gt; (Oniguruma syntax) are _not_
< synonymous. The former is a back reference; the latter is a
< subroutine
< call.
---
> - **`\H`** - Any character that is not a horizontal whitespace character
485c464
< <a name="generic-character-types"></a>
---
> - **`\s`** - Any whitespace character
487c466
< _Generic character types_
---
> - **`\S`** - Any character that is not a whitespace character
488a468
> - **`\v`** - Any vertical whitespace character
490c470
< Another use of backslash is for specifying generic character types:
---
> - **`\V`** - Any character that is not a vertical whitespace character
492,507c472,478
< - **`\ed`** - any decimal digit
< - **`\eD`** - any character that is not a decimal digit
< - **`\eh`** - any horizontal white space character
< - **`\eH`** - any character that is not a horizontal white space character
< - **`\es`** - any white space character
< - **`\eS`** - any character that is not a white space character
< - **`\ev`** - any vertical white space character
< - **`\eV`** - any character that is not a vertical white space character
< - **`\ew`** - any "word" character
< - **`\eW`** - any "non-word" character
< 
< There is also the single sequence \eN, which matches a non-newline character.
< This is the same as
< the "." metacharacter
< when PCRE_DOTALL is not set. Perl also uses \eN to match characters by name;
< PCRE does not support this.
---
> - **`\w`** - Any "word" character
> 
> - **`\W`** - Any "non-word" character
> 
> There is also the single sequence `\N`, which matches a non-newline character.
> This is the same as the "." metacharacter when `dotall` is not set. Perl also
> uses `\N` to match characters by name, but PCRE does not support this.
509,514c480,485
< Each pair of lower and upper case escape sequences partitions the complete set
< of characters into two disjoint sets. Any given character matches one, and only
< one, of each pair. The sequences can appear both inside and outside character
< classes. They each match one character of the appropriate type. If the current
< matching point is at the end of the subject string, all of them fail, because
< there is no character to match.
---
> Each pair of lowercase and uppercase escape sequences partitions the complete
> set of characters into two disjoint sets. Any given character matches one, and
> only one, of each pair. The sequences can appear both inside and outside
> character classes. They each match one character of the appropriate type. If the
> current matching point is at the end of the subject string, all fail, as there
> is no character to match.
516c487
< For compatibility with Perl, \es did not used to match the VT character (code
---
> For compatibility with Perl, `\s` did not used to match the VT character (code
519c490
< \es characters are now HT (9), LF (10), VT (11), FF (12), CR (13), and space
---
> `\s` characters are now HT (9), LF (10), VT (11), FF (12), CR (13), and space
522c493
< "non-breaking space" character (\exA0) is recognized as white space, and in
---
> "non-breaking space" character (`\xA0`) is recognized as white space, and in
525,555c496,519
< A "word" character is an underscore or any character that is a letter or digit.
< By default, the definition of letters and digits is controlled by PCRE's
< low-valued character tables, and may vary if locale-specific matching is taking
< place (see
< "Locale support"
< in the
< `pcreapi`
< page). For example, in a French locale such as "fr_FR" in Unix-like systems,
< or "french" in Windows, some character codes greater than 127 are used for
< accented letters, and these are then matched by \ew. The use of locales with
< Unicode is discouraged.
< 
< By default, characters whose code points are greater than 127 never match \ed,
< \es, or \ew, and always match \eD, \eS, and \eW, although this may vary for
< characters in the range 128-255 when locale-specific matching is happening.
< These escape sequences retain their original meanings from before Unicode
< support was available, mainly for efficiency reasons. If PCRE is compiled with
< Unicode property support, and the PCRE_UCP option is set, the behaviour is
< changed so that Unicode properties are used to determine character types, as
< follows:
< 
< ```text
< \ed  any character that matches \ep{Nd} (decimal digit)
< \es  any character that matches \ep{Z} or \eh or \ev
< \ew  any character that matches \ep{L} or \ep{N}, plus underscore
< ```
< The upper case escapes match the inverse sets of characters. Note that \ed
< matches only decimal digits, whereas \ew matches any Unicode digit, as well as
< any Unicode letter, and underscore. Note also that PCRE_UCP affects \eb, and
< \eB because they are defined in terms of \ew and \eW. Matching these sequences
< is noticeably slower when PCRE_UCP is set.
---
> A "word" character is an underscore or any character that is a letter or a
> digit. By default, the definition of letters and digits is controlled by the
> PCRE low-valued character tables, in Erlang's case (and without option
> `unicode`), the ISO Latin-1 character set.
> 
> By default, in `unicode` mode, characters with values > 255, that is, all
> characters outside the ISO Latin-1 character set, never match `\d`, `\s`, or `\w`,
> and always match `\D`, `\S`, and `\W`. These sequences retain their original
> meanings from before UTF support was available, mainly for efficiency reasons.
> However, if option `ucp` is set, the behavior is changed so that Unicode
> properties are used to determine character types, as follows:
> 
> - **`\d`** - Any character that `\p{Nd}` matches (decimal digit)
> 
> - **`\s`** - Any character that `\p{Z}` or `\h` or `\v`
> 
> - **`\w`** - Any character that matches `\p{L}` or `\p{N}` matches, plus
>   underscore
> 
> The uppercase escapes match the inverse sets of characters. Notice that `\d`
> matches only decimal digits, while `\w` matches any Unicode digit, any Unicode
> letter, and underscore. Notice also that `ucp` affects `\b` and `\B`, as they are
> defined in terms of `\w` and `\W`. Matching these sequences is noticeably slower
> when `ucp` is set.
557c521
< The sequences \eh, \eH, \ev, and \eV are features that were added to Perl at
---
> The sequences `\h`, `\H`, `\v`, and `\V` are features that were added to Perl in
560c524
< whether or not PCRE_UCP is set. The horizontal space characters are:
---
> regardless if `ucp` is set.
562,563c526
< - **U+0009** - Horizontal tab (HT)- **U+0020** - Space- **U+00A0** - Non-break space- **U+1680** - Ogham space mark- **U+180E** - Mongolian vowel separator- **U+2000** - En quad- **U+2001** - Em quad- **U+2002** - En space- **U+2003** - Em space- **U+2004** - Three-per-em space- **U+2005** - Four-per-em space- **U+2006** - Six-per-em space- **U+2007** - Figure space- **U+2008** - Punctuation space- **U+2009** - Thin space- **U+200A** - Hair space- **U+202F** - Narrow no-break space- **U+205F** - Medium mathematical space- **U+3000** - Ideographic space
< The vertical space characters are:
---
> The following are the horizontal space characters:
565,567c528,554
< - **U+000A** - Linefeed (LF)- **U+000B** - Vertical tab (VT)- **U+000C** - Form feed (FF)- **U+000D** - Carriage return (CR)- **U+0085** - Next line (NEL)- **U+2028** - Line separator- **U+2029** - Paragraph separator
< In 8-bit, non-UTF-8 mode, only the characters with codepoints less than 256 are
< relevant.
---
> - **U+0009** - Horizontal tab (HT)
> 
> - **U+0020** - Space
> 
> - **U+00A0** - Non-break space
> 
> - **U+1680** - Ogham space mark
> 
> - **U+180E** - Mongolian vowel separator
> 
> - **U+2000** - En quad
> 
> - **U+2001** - Em quad
> 
> - **U+2002** - En space
> 
> - **U+2003** - Em space
> 
> - **U+2004** - Three-per-em space
> 
> - **U+2005** - Four-per-em space
> 
> - **U+2006** - Six-per-em space
> 
> - **U+2007** - Figure space
> 
> - **U+2008** - Punctuation space
569c556
< <a name="newline-sequences"></a>
---
> - **U+2009** - Thin space
571c558,583
< _Newline sequences_
---
> - **U+200A** - Hair space
> 
> - **U+202F** - Narrow no-break space
> 
> - **U+205F** - Medium mathematical space
> 
> - **U+3000** - Ideographic space
> 
> The following are the vertical space characters:
> 
> - **U+000A** - Line feed (LF)
> 
> - **U+000B** - Vertical tab (VT)
> 
> - **U+000C** - Form feed (FF)
> 
> - **U+000D** - Carriage return (CR)
> 
> - **U+0085** - Next line (NEL)
> 
> - **U+2028** - Line separator
> 
> - **U+2029** - Paragraph separator
> 
> In 8-bit, non-UTF-8 mode, only the characters with code points < 256 are
> relevant.
572a585
> _Newline Sequences_
574,576c587,590
< Outside a character class, by default, the escape sequence \eR matches any
< Unicode newline sequence. In 8-bit non-UTF-8 mode \eR is equivalent to the
< following:
---
> [](){: #newline_sequences }
> 
> Outside a character class, by default, the escape sequence `\R` matches any
> Unicode newline sequence. In non-UTF-8 mode, `\R` is equivalent to the following:
579c593,596
< (?&gt;\er\en|\en|\ex0b|\ef|\er|\ex85)
---
> (?>\r\n|\n|\x0b|\f|\r|\x85)
> ```
> 
> This is an example of an "atomic group", details are provided below.
581,582d597
< This is an example of an "atomic group", details of which are given
< below.
584c599
< LF, or one of the single characters LF (linefeed, U+000A), VT (vertical tab,
---
> LF, or one of the single characters LF (line feed, U+000A), VT (vertical tab,
589,610c604,625
< In other modes, two additional characters whose codepoints are greater than 255
< are added: LS (line separator, U+2028) and PS (paragraph separator, U+2029).
< Unicode character property support is not needed for these characters to be
< recognized.
< 
< It is possible to restrict \eR to match only CR, LF, or CRLF (instead of the
< complete set of Unicode line endings) by setting the option PCRE_BSR_ANYCRLF
< either at compile time or when the pattern is matched. (BSR is an abbreviation
< for "backslash R".) This can be made the default when PCRE is built; if this is
< the case, the other behaviour can be requested via the PCRE_BSR_UNICODE option.
< It is also possible to specify these settings by starting a pattern string with
< one of the following sequences:
< 
< - **(*BSR_ANYCRLF)** - CR, LF, or CRLF only
< - **(*BSR_UNICODE)** - any Unicode newline sequence
< 
< These override the default and the options given to the compiling function, but
< they can themselves be overridden by options given to a matching function. Note
< that these special settings, which are not Perl-compatible, are recognized only
< at the very start of a pattern, and that they must be in upper case. If more
< than one of them is present, the last one is used. They can be combined with a
< change of newline convention; for example, a pattern can start with:
---
> In Unicode mode, two more characters whose code points are > 255 are added: LS
> (line separator, U+2028) and PS (paragraph separator, U+2029). Unicode character
> property support is not needed for these characters to be recognized.
> 
> `\R` can be restricted to match only CR, LF, or CRLF (instead of the complete set
> of Unicode line endings) by setting option `bsr_anycrlf` either at compile time
> or when the pattern is matched. (BSR is an acronym for "backslash R".) This can
> be made the default when PCRE is built; if so, the other behavior can be
> requested through option `bsr_unicode`. These settings can also be specified by
> starting a pattern string with one of the following sequences:
> 
> - **(\*BSR_ANYCRLF)** - CR, LF, or CRLF only
> 
> - **(\*BSR_UNICODE)** - Any Unicode newline sequence
> 
> These override the default and the options specified to the compiling function,
> but they can themselves be overridden by options specified to a matching
> function. Notice that these special settings, which are not Perl-compatible, are
> recognized only at the very start of a pattern, and that they must be in upper
> case. If more than one of them is present, the last one is used. They can be
> combined with a change of newline convention; for example, a pattern can start
> with:
613a629,640
> ```
> 
> They can also be combined with the (*UTF8), (*UTF), or (\*UCP) special
> sequences. Inside a character class, `\R` is treated as an unrecognized escape
> sequence, and so matches the letter "R" by default.
> 
> _Unicode Character Properties_
> 
> Three more escape sequences that match characters with specific properties are
> available. When in 8-bit non-UTF-8 mode, these sequences are limited to testing
> characters whose code points are < 256, but they do work in this mode. The
> following are the extra escape sequences:
615,642c642,653
< They can also be combined with the (*UTF8), (*UTF16), (*UTF32), (*UTF) or
< (*UCP) special sequences. Inside a character class, \eR is treated as an
< unrecognized escape sequence, and so matches the letter "R" by default, but
< causes an error if PCRE_EXTRA is set.
< 
< <a name="unicode-character-properties"></a>
< 
< _Unicode character properties_
< 
< 
< When PCRE is built with Unicode character property support, three additional
< escape sequences that match characters with specific properties are available.
< When in 8-bit non-UTF-8 mode, these sequences are of course limited to testing
< characters whose codepoints are less than 256, but they do work in this mode.
< The extra escape sequences are:
< 
< - **`\ep{_xx_}`** - a character with the _xx_ property
< - **`\eP{_xx_}`** - a character without the _xx_ property
< - **`\eX`** - a Unicode extended grapheme cluster
< 
< The property names represented by _xx_ above are limited to the Unicode
< script names, the general category properties, "Any", which matches any
< character (including newline), and some special PCRE properties (described
< in the
< next section).
< Other Perl properties such as "InMusicalSymbols" are not currently supported by
< PCRE. Note that \eP{Any} does not match any characters, so always causes a
< match failure.
---
> - **`\p{_xx_}`** - A character with property _xx_
> 
> - **`\P{_xx_}`** - A character without property _xx_
> 
> - **`\X`** - A Unicode extended grapheme cluster
> 
> The property names represented by _xx_ above are limited to the Unicode script
> names, the general category properties, "Any", which matches any character
> (including newline), and some special PCRE properties (described in the next
> section). Other Perl properties, such as "InMusicalSymbols", are currently not
> supported by PCRE. Notice that `\P{Any}` does not match any characters and
> always causes a match failure.
645c656
< character from one of these sets can be matched using a script name. For
---
> character from one of these sets can be matched using a script name, for
649,650c660
< \ep{Greek}
< \eP{Han}
---
> \p{Greek} \P{Han}
652,653d661
< Those that are not part of an identified script are lumped together as
< "Common". The current list of scripts is:
655,789c663,799
< Arabic,
< Armenian,
< Avestan,
< Balinese,
< Bamum,
< Bassa_Vah,
< Batak,
< Bengali,
< Bopomofo,
< Brahmi,
< Braille,
< Buginese,
< Buhid,
< Canadian_Aboriginal,
< Carian,
< Caucasian_Albanian,
< Chakma,
< Cham,
< Cherokee,
< Common,
< Coptic,
< Cuneiform,
< Cypriot,
< Cyrillic,
< Deseret,
< Devanagari,
< Duployan,
< Egyptian_Hieroglyphs,
< Elbasan,
< Ethiopic,
< Georgian,
< Glagolitic,
< Gothic,
< Grantha,
< Greek,
< Gujarati,
< Gurmukhi,
< Han,
< Hangul,
< Hanunoo,
< Hebrew,
< Hiragana,
< Imperial_Aramaic,
< Inherited,
< Inscriptional_Pahlavi,
< Inscriptional_Parthian,
< Javanese,
< Kaithi,
< Kannada,
< Katakana,
< Kayah_Li,
< Kharoshthi,
< Khmer,
< Khojki,
< Khudawadi,
< Lao,
< Latin,
< Lepcha,
< Limbu,
< Linear_A,
< Linear_B,
< Lisu,
< Lycian,
< Lydian,
< Mahajani,
< Malayalam,
< Mandaic,
< Manichaean,
< Meetei_Mayek,
< Mende_Kikakui,
< Meroitic_Cursive,
< Meroitic_Hieroglyphs,
< Miao,
< Modi,
< Mongolian,
< Mro,
< Myanmar,
< Nabataean,
< New_Tai_Lue,
< Nko,
< Ogham,
< Ol_Chiki,
< Old_Italic,
< Old_North_Arabian,
< Old_Permic,
< Old_Persian,
< Old_South_Arabian,
< Old_Turkic,
< Oriya,
< Osmanya,
< Pahawh_Hmong,
< Palmyrene,
< Pau_Cin_Hau,
< Phags_Pa,
< Phoenician,
< Psalter_Pahlavi,
< Rejang,
< Runic,
< Samaritan,
< Saurashtra,
< Sharada,
< Shavian,
< Siddham,
< Sinhala,
< Sora_Sompeng,
< Sundanese,
< Syloti_Nagri,
< Syriac,
< Tagalog,
< Tagbanwa,
< Tai_Le,
< Tai_Tham,
< Tai_Viet,
< Takri,
< Tamil,
< Telugu,
< Thaana,
< Thai,
< Tibetan,
< Tifinagh,
< Tirhuta,
< Ugaritic,
< Vai,
< Warang_Citi,
< Yi.
< 
< Each character has exactly one Unicode general category property, specified by
< a two-letter abbreviation. For compatibility with Perl, negation can be
< specified by including a circumflex between the opening brace and the property
< name. For example, \ep{^Lu} is the same as \eP{Lu}.
< 
< If only one letter is specified with \ep or \eP, it includes all the general
< category properties that start with that letter. In this case, in the absence
< of negation, the curly brackets in the escape sequence are optional; these two
< examples have the same effect:
---
> Those that are not part of an identified script are lumped together as "Common".
> The following is the current list of scripts:
> 
> - Arabic
> - Armenian
> - Avestan
> - Balinese
> - Bamum
> - Bassa_Vah
> - Batak
> - Bengali
> - Bopomofo
> - Braille
> - Buginese
> - Buhid
> - Canadian_Aboriginal
> - Carian
> - Caucasian_Albanian
> - Chakma
> - Cham
> - Cherokee
> - Common
> - Coptic
> - Cuneiform
> - Cypriot
> - Cyrillic
> - Deseret
> - Devanagari
> - Duployan
> - Egyptian_Hieroglyphs
> - Elbasan
> - Ethiopic
> - Georgian
> - Glagolitic
> - Gothic
> - Grantha
> - Greek
> - Gujarati
> - Gurmukhi
> - Han
> - Hangul
> - Hanunoo
> - Hebrew
> - Hiragana
> - Imperial_Aramaic
> - Inherited
> - Inscriptional_Pahlavi
> - Inscriptional_Parthian
> - Javanese
> - Kaithi
> - Kannada
> - Katakana
> - Kayah_Li
> - Kharoshthi
> - Khmer
> - Khojki
> - Khudawadi
> - Lao
> - Latin
> - Lepcha
> - Limbu
> - Linear_A
> - Linear_B
> - Lisu
> - Lycian
> - Lydian
> - Mahajani
> - Malayalam
> - Mandaic
> - Manichaean
> - Meetei_Mayek
> - Mende_Kikakui
> - Meroitic_Cursive
> - Meroitic_Hieroglyphs
> - Miao
> - Modi
> - Mongolian
> - Mro
> - Myanmar
> - Nabataean
> - New_Tai_Lue
> - Nko
> - Ogham
> - Ol_Chiki
> - Old_Italic
> - Old_North_Arabian
> - Old_Permic
> - Old_Persian
> - Oriya
> - Old_South_Arabian
> - Old_Turkic
> - Osmanya
> - Pahawh_Hmong
> - Palmyrene
> - Pau_Cin_Hau
> - Phags_Pa
> - Phoenician
> - Psalter_Pahlavi
> - Rejang
> - Runic
> - Samaritan
> - Saurashtra
> - Sharada
> - Shavian
> - Siddham
> - Sinhala
> - Sora_Sompeng
> - Sundanese
> - Syloti_Nagri
> - Syriac
> - Tagalog
> - Tagbanwa
> - Tai_Le
> - Tai_Tham
> - Tai_Viet
> - Takri
> - Tamil
> - Telugu
> - Thaana
> - Thai
> - Tibetan
> - Tifinagh
> - Tirhuta
> - Ugaritic
> - Vai
> - Warang_Citi
> - Yi
> 
> Each character has exactly one Unicode general category property, specified by a
> two-letter acronym. For compatibility with Perl, negation can be specified by
> including a circumflex between the opening brace and the property name. For
> example, `\p{^Lu}` is the same as `\P{Lu}`.
> 
> If only one letter is specified with `\p` or `\P`, it includes all the general
> category properties that start with that letter. In this case, in the absence of
> negation, the curly brackets in the escape sequence are optional. The following
> two examples have the same effect:
792,793c802,803
< \ep{L}
< \epL
---
> \p{L}
> \pL
794a805
> 
797,806c808
< - **C** - Other- **Cc** - Control- **Cf** - Format- **Cn** - Unassigned- **Co** - Private use- **Cs** - Surrogate
< - **L** - Letter- **Ll** - Lower case letter- **Lm** - Modifier letter- **Lo** - Other letter- **Lt** - Title case letter- **Lu** - Upper case letter
< - **M** - Mark- **Mc** - Spacing mark- **Me** - Enclosing mark- **Mn** - Non-spacing mark
< - **N** - Number- **Nd** - Decimal number- **Nl** - Letter number- **No** - Other number
< - **P** - Punctuation- **Pc** - Connector punctuation- **Pd** - Dash punctuation- **Pe** - Close punctuation- **Pf** - Final punctuation- **Pi** - Initial punctuation- **Po** - Other punctuation- **Ps** - Open punctuation
< - **S** - Symbol- **Sc** - Currency symbol- **Sk** - Modifier symbol- **Sm** - Mathematical symbol- **So** - Other symbol
< - **Z** - Separator- **Zl** - Line separator- **Zp** - Paragraph separator- **Zs** - Space separator
< The special property L& is also supported: it matches a character that has
< the Lu, Ll, or Lt property, in other words, a letter that is not classified as
< a modifier or "other".
---
> - **C** - Other
808,822c810
< The Cs (Surrogate) property applies only to characters in the range U+D800 to
< U+DFFF. Such characters are not valid in Unicode strings and so
< cannot be tested by PCRE, unless UTF validity checking has been turned off
< (see the discussion of PCRE_NO_UTF8_CHECK, PCRE_NO_UTF16_CHECK and
< PCRE_NO_UTF32_CHECK in the
< `pcreapi`
< page). Perl does not support the Cs property.
< 
< The long synonyms for property names that Perl supports (such as \ep{Letter})
< are not supported by PCRE, nor is it permitted to prefix any of these
< properties with "Is".
< 
< No character that is in the Unicode table has the Cn (unassigned) property.
< Instead, this property is assumed for any code point that is not in the
< Unicode table.
---
> - **Cc** - Control
824,826c812
< Specifying caseless matching does not affect these escape sequences. For
< example, \ep{Lu} always matches only upper case letters. This is different from
< the behaviour of current versions of Perl.
---
> - **Cf** - Format
828,832c814
< Matching characters by Unicode property is not fast, because PCRE has to do a
< multistage table lookup in order to find a character's property. That is why
< the traditional escape sequences such as \ed and \ew do not use Unicode
< properties in PCRE by default, though you can make them do so by setting the
< PCRE_UCP option or by starting the pattern with (*UCP).
---
> - **Cn** - Unassigned
834c816
< <a name="extended-grapheme-clusters"></a>
---
> - **Co** - Private use
836c818
< _Extended grapheme clusters_
---
> - **Cs** - Surrogate
837a820
> - **L** - Letter
839,843c822
< The \eX escape matches any number of Unicode characters that form an "extended
< grapheme cluster", and treats the sequence as an atomic group
< (see below).
< Up to and including release 8.31, PCRE matched an earlier, simpler definition
< that was equivalent to
---
> - **Ll** - Lowercase letter
845,846c824
< ```text
< (?&gt;\ePM\epM*)
---
> - **Lm** - Modifier letter
848,850c826
< That is, it matched a character without the "mark" property, followed by zero
< or more characters with the "mark" property. Characters with the "mark"
< property are typically non-spacing accents that affect the preceding character.
---
> - **Lo** - Other letter
852,856c828
< This simple definition was extended in Unicode to include more complicated
< kinds of composite character by giving each character a grapheme breaking
< property, and creating rules that use these properties to define the boundaries
< of extended grapheme clusters. In releases of PCRE later than 8.31, \eX matches
< one of these clusters.
---
> - **Lt** - Title case letter
858,859c830
< \eX always matches at least one character. Then it decides whether to add
< additional characters according to the following rules for ending a cluster:
---
> - **Lu** - Uppercase letter
861c832,856
< 1. End at the end of the subject string.
---
> - **M** - Mark
> 
> - **Mc** - Spacing mark
> 
> - **Me** - Enclosing mark
> 
> - **Mn** - Non-spacing mark
> 
> - **N** - Number
> 
> - **Nd** - Decimal number
> 
> - **Nl** - Letter number
> 
> - **No** - Other number
> 
> - **P** - Punctuation
> 
> - **Pc** - Connector punctuation
> 
> - **Pd** - Dash punctuation
> 
> - **Pe** - Close punctuation
> 
> - **Pf** - Final punctuation
863c858
< 2. Do not end between CR and LF; otherwise end after any control character.
---
> - **Pi** - Initial punctuation
865,868c860
< 3. Do not break Hangul (a Korean script) syllable sequences. Hangul characters
< are of five types: L, V, T, LV, and LVT. An L character may be followed by an
< L, V, LV, or LVT character; an LV or V character may be followed by a V or T
< character; an LVT or T character may be followed only by a T character.
---
> - **Po** - Other punctuation
870,871c862
< 4. Do not end before extending characters or spacing marks. Characters with
< the "mark" property always have the "extend" grapheme breaking property.
---
> - **Ps** - Open punctuation
873c864
< 5. Do not end after prepend characters.
---
> - **S** - Symbol
875c866
< 6. Otherwise, end the cluster.
---
> - **Sc** - Currency symbol
877c868
< <a name="pcres-additional-properties"></a>
---
> - **Sk** - Modifier symbol
879c870
< _PCRE's additional properties_
---
> - **Sm** - Mathematical symbol
880a872
> - **So** - Other symbol
882,886c874,959
< As well as the standard Unicode properties described above, PCRE supports four
< more that make it possible to convert traditional escape sequences such as \ew
< and \es to use Unicode properties. PCRE uses these non-standard, non-Perl
< properties internally when PCRE_UCP is set. However, they may also be used
< explicitly. These properties are:
---
> - **Z** - Separator
> 
> - **Zl** - Line separator
> 
> - **Zp** - Paragraph separator
> 
> - **Zs** - Space separator
> 
> The special property L& is also supported. It matches a character that has the
> Lu, Ll, or Lt property, that is, a letter that is not classified as a modifier
> or "other".
> 
> The Cs (Surrogate) property applies only to characters in the range U+D800 to
> U+DFFF. Such characters are invalid in Unicode strings and so cannot be tested
> by PCRE. Perl does not support the Cs property.
> 
> The long synonyms for property names supported by Perl (such as `\p{Letter}`)
> are not supported by PCRE. It is not permitted to prefix any of these properties
> with "Is".
> 
> No character in the Unicode table has the Cn (unassigned) property. This
> property is instead assumed for any code point that is not in the Unicode table.
> 
> Specifying caseless matching does not affect these escape sequences. For
> example, `\p{Lu}` always matches only uppercase letters. This is different from
> the behavior of current versions of Perl.
> 
> Matching characters by Unicode property is not fast, as PCRE must do a
> multistage table lookup to find a character property. That is why the
> traditional escape sequences such as `\d` and `\w` do not use Unicode properties
> in PCRE by default. However, you can make them do so by setting option `ucp` or
> by starting the pattern with `(*UCP)`.
> 
> _Extended Grapheme Clusters_
> 
> The `\X` escape matches any number of Unicode characters that form an "extended
> grapheme cluster", and treats the sequence as an atomic group (see below). Up to
> and including release 8.31, PCRE matched an earlier, simpler definition that was
> equivalent to `(?>\PM\pM*)`. That is, it matched a character without the "mark"
> property, followed by zero or more characters with the "mark" property.
> Characters with the "mark" property are typically non-spacing accents that
> affect the preceding character.
> 
> This simple definition was extended in Unicode to include more complicated kinds
> of composite character by giving each character a grapheme breaking property,
> and creating rules that use these properties to define the boundaries of
> extended grapheme clusters. In PCRE releases later than 8.31, `\X` matches one of
> these clusters.
> 
> `\X` always matches at least one character. Then it decides whether to add more
> characters according to the following rules for ending a cluster:
> 
> 1. End at the end of the subject string.
> 1. Do not end between CR and LF; otherwise end after any control character.
> 1. Do not break Hangul (a Korean script) syllable sequences. Hangul characters
>    are of five types: L, V, T, LV, and LVT. An L character can be followed by an
>    L, V, LV, or LVT character. An LV or V character can be followed by a V or T
>    character. An LVT or T character can be followed only by a T character.
> 1. Do not end before extending characters or spacing marks. Characters with the
>    "mark" property always have the "extend" grapheme breaking property.
> 1. Do not end after prepend characters.
> 1. Otherwise, end the cluster.
> 
> _PCRE Additional Properties_
> 
> In addition to the standard Unicode properties described earlier, PCRE supports
> four more that make it possible to convert traditional escape sequences, such as
> `\w` and `\s` to use Unicode properties. PCRE uses these non-standard, non-Perl
> properties internally when the `ucp` option is passed. However, they can also be
> used explicitly. The properties are as follows:
> 
> - **Xan** - Any alphanumeric character. Matches characters that have either the
>   L (letter) or the N (number) property.
> 
> - **Xps** - Any Posix space character. Matches the characters tab, line feed,
>   vertical tab, form feed, carriage return, and any other character that has the
>   Z (separator) property.
> 
> - **Xsp** - Any Perl space character. Matches the same as Xps, except that
>   vertical tab is excluded.
> 
> - **Xwd** - Any Perl "word" character. Matches the same characters as Xan, plus
>   underscore.
> 
> Perl and POSIX space are now the same. Perl added VT to its space character set
> at release 5.18 and PCRE changed at release 8.34.
888d960
< - **Xan** - Any alphanumeric character- **Xps** - Any POSIX space character- **Xsp** - Any Perl space character- **Xwd** - Any Perl "word" character
892,894c964,966
< Xsp is the same as Xps; it used to exclude vertical tab, for Perl
< compatibility, but Perl changed, and so PCRE followed at release 8.34. Xwd
< matches the same characters as Xan, plus underscore.
---
> Xsp is the same as Xps; it used to exclude vertical tab, for Perl compatibility,
> but Perl changed, and so PCRE followed at release 8.34. Xwd matches the same
> characters as Xan, plus underscore.
898,905c970,975
< languages. These are the characters $, @, \` (grave accent), and all characters
< with Unicode code points greater than or equal to U+00A0, except for the
< surrogates U+D800 to U+DFFF. Note that most base (ASCII) characters are
< excluded. (Universal Character Names are of the form \euHHHH or \eUHHHHHHHH
< where H is a hexadecimal digit. Note that the Xuc property does not match these
< sequences but the characters that they represent.)
< 
< <a name="resetting-the-match-start"></a>
---
> languages. These are the characters `$`, `@`, `` ` `` (grave accent), and all characters
> with Unicode code points >= U+00A0, except for the surrogates U+D800 to U+DFFF.
> Notice that most base (ASCII) characters are excluded. (Universal Character
> Names are of the form `\uHHHH` or `\UHHHHHHHH`, where H is a hexadecimal digit.
> Notice that the Xuc property does not match these sequences but the characters
> that they represent.)
907c977
< _Resetting the match start_
---
> _Resetting the Match Start_
909,911c979,981
< 
< The escape sequence \eK causes any previously matched characters not to be
< included in the final matched sequence. For example, the pattern:
---
> The escape sequence `\K` causes any previously matched characters not to be
> included in the final matched sequence. For example, the following pattern
> matches "foobar", but reports that it has matched "bar":
914c984,985
< foo\eKbar
---
> foo\Kbar
> ```
916,923c987,991
< matches "foobar", but reports that it has matched "bar". This feature is
< similar to a lookbehind assertion
< (described below).
< However, in this case, the part of the subject before the real match does not
< have to be of fixed length, as lookbehind assertions do. The use of \eK does
< not interfere with the setting of
< captured substrings.
< For example, when the pattern
---
> This feature is similar to a lookbehind assertion (described below). However, in
> this case, the part of the subject before the real match does not have to be of
> fixed length, as lookbehind assertions do. The use of `\K` does not interfere
> with the setting of captured substrings. For example, when the following pattern
> matches "foobar", the first substring is still set to "foo":
926,928c994,995
< (foo)\eKbar
< 
< matches "foobar", the first substring is still set to "foo".
---
> (foo)\Kbar
> ```
930,932c997,999
< Perl documents that the use of \eK within assertions is "not well defined". In
< PCRE, \eK is acted upon when it occurs inside positive assertions, but is
< ignored in negative assertions. Note that when a pattern such as (?=ab\eK)
---
> Perl documents that the use of `\K` within assertions is "not well defined". In
> PCRE, `\K` is acted upon when it occurs inside positive assertions, but is
> ignored in negative assertions. Note that when a pattern such as `(?=ab\K)`
936c1003
< <a name="simple-assertions"></a>
---
> _Simple Assertions_
938c1005,1009
< _Simple assertions_
---
> The final use of backslash is for certain simple assertions. An assertion
> specifies a condition that must be met at a particular point in a match, without
> consuming any characters from the subject string. The use of subpatterns for
> more complicated assertions is described below. The following are the
> backslashed assertions:
939a1011
> - **`\b`** - Matches at a word boundary.
941,954c1013,1020
< The final use of backslash is for certain simple assertions. An assertion
< specifies a condition that has to be met at a particular point in a match,
< without consuming any characters from the subject string. The use of
< subpatterns for more complicated assertions is described
< below.
< The backslashed assertions are:
< 
< - **`\eb`** - matches at a word boundary
< - **`\eB`** - matches when not at a word boundary
< - **`\eA`** - matches at the start of the subject
< - **`\eZ`** - matches at the end of the subject
< also matches before a newline at the end of the subject
< - **`\ez`** - matches only at the end of the subject
< - **`\eG`** - matches at the first matching position in the subject
---
> - **`\B`** - Matches when not at a word boundary.
> 
> - **`\A`** - Matches at the start of the subject.
> 
> - **`\Z`** - Matches at the end of the subject, and before a newline at the end
>   of the subject.
> 
> - **`\z`** - Matches only at the end of the subject.
956c1022,1024
< Inside a character class, \eb has a different meaning; it matches the backspace
---
> - **`\G`** - Matches at the first matching position in the subject.
> 
> Inside a character class, `\b` has a different meaning; it matches the backspace
958,960c1026,1027
< default it matches the corresponding literal character (for example, \eB
< matches the letter B). However, if the PCRE_EXTRA option is set, an "invalid
< escape sequence" error is generated instead.
---
> default it matches the corresponding literal character (for example, `\B` matches
> the letter B).
963,970c1030,1036
< and the previous character do not both match \ew or \eW (i.e. one matches
< \ew and the other matches \eW), or the start or end of the string if the
< first or last character matches \ew, respectively. In a UTF mode, the meanings
< of \ew and \eW can be changed by setting the PCRE_UCP option. When this is
< done, it also affects \eb and \eB. Neither PCRE nor Perl has a separate "start
< of word" or "end of word" metasequence. However, whatever follows \eb normally
< determines which it is. For example, the fragment \eba matches "a" at the start
< of a word.
---
> and the previous character do not both match `\w` or `\W` (that is, one matches
> `\w` and the other matches `\W`), or the start or end of the string if the first
> or last character matches `\w`, respectively. In UTF mode, the meanings of `\w`
> and `\W` can be changed by setting option `ucp`. When this is done, it also
> affects `\b` and `\B`. PCRE and Perl do not have a separate "start of word" or
> "end of word" metasequence. However, whatever follows `\b` normally determines
> which it is. For example, the fragment `\ba` matches "a" at the start of a word.
972c1038
< The \eA, \eZ, and \ez assertions differ from the traditional circumflex and
---
> The `\A`, `\Z`, and `\z` assertions differ from the traditional circumflex and
975,988c1041,1054
< independent of multiline mode. These three assertions are not affected by the
< PCRE_NOTBOL or PCRE_NOTEOL options, which affect only the behaviour of the
< circumflex and dollar metacharacters. However, if the _startoffset_
< argument of `pcre\_exec()` is non-zero, indicating that matching is to start
< at a point other than the beginning of the subject, \eA can never match. The
< difference between \eZ and \ez is that \eZ matches before a newline at the end
< of the string as well as at the very end, whereas \ez matches only at the end.
< 
< The \eG assertion is true only when the current matching position is at the
< start point of the match, as specified by the _startoffset_ argument of
< `pcre\_exec()`. It differs from \eA when the value of _startoffset_ is
< non-zero. By calling `pcre\_exec()` multiple times with appropriate
< arguments, you can mimic Perl's /g option, and it is in this kind of
< implementation where \eG can be useful.
---
> independent of multiline mode. These three assertions are not affected by
> options `notbol` or `noteol`, which affect only the behavior of the circumflex
> and dollar metacharacters. However, if argument `startoffset` of `run/3` is
> non-zero, indicating that matching is to start at a point other than the
> beginning of the subject, `\A` can never match. The difference between `\Z` and
> `\z` is that `\Z` matches before a newline at the end of the string and at the
> very end, while `\z` matches only at the end.
> 
> The `\G` assertion is true only when the current matching position is at the
> start point of the match, as specified by argument `startoffset` of
> [`run/3`](`run/3`). It differs from `\A` when the value of `startoffset` is
> non-zero. By calling [`run/3`](`run/3`) multiple times with appropriate
> arguments, you can mimic the Perl option `/g`, and it is in this kind of
> implementation where `\G` can be useful.
990,991c1056,1057
< Note, however, that PCRE's interpretation of \eG, as the start of the current
< match, is subtly different from Perl's, which defines it as the end of the
---
> Notice, however, that the PCRE interpretation of `\G`, as the start of the
> current match, is subtly different from Perl, which defines it as the end of the
993,994c1059,1060
< string was empty. Because PCRE does just one match at a time, it cannot
< reproduce this behaviour.
---
> string was empty. As PCRE does only one match at a time, it cannot reproduce
> this behavior.
996c1062
< If all the alternatives of a pattern begin with \eG, the expression is anchored
---
> If all the alternatives of a pattern begin with `\G`, the expression is anchored
1000c1066
< <a name="circumflex-and-dollar"></a>
---
> [](){: #sect4 }
1004d1069
< 
1006,1007c1071,1072
< they test for a particular condition being true without consuming any
< characters from the subject string.
---
> they test for a particular condition to be true without consuming any characters
> from the subject string.
1011,1023c1076,1085
< the start of the subject string. If the _startoffset_ argument of
< `pcre\_exec()` is non-zero, circumflex can never match if the PCRE_MULTILINE
< option is unset. Inside a character class, circumflex has an entirely different
< meaning
< (see below).
< 
< Circumflex need not be the first character of the pattern if a number of
< alternatives are involved, but it should be the first thing in each alternative
< in which it appears if the pattern is ever to match that branch. If all
< possible alternatives start with a circumflex, that is, if the pattern is
< constrained to match only at the start of the subject, it is said to be an
< "anchored" pattern. (There are also other constructs that can cause a pattern
< to be anchored.)
---
> the start of the subject string. If argument `startoffset` of `run/3` is
> non-zero, circumflex can never match if option `multiline` is unset. Inside a
> character class, circumflex has an entirely different meaning (see below).
> 
> Circumflex needs not to be the first character of the pattern if some
> alternatives are involved, but it is to be the first thing in each alternative
> in which it appears if the pattern is ever to match that branch. If all possible
> alternatives start with a circumflex, that is, if the pattern is constrained to
> match only at the start of the subject, it is said to be an "anchored" pattern.
> (There are also other constructs that can cause a pattern to be anchored.)
1027,1030c1089,1092
< the end of the string (by default). Note, however, that it does not actually
< match the newline. Dollar need not be the last character of the pattern if a
< number of alternatives are involved, but it should be the last item in any
< branch in which it appears. Dollar has no special meaning in a character class.
---
> the end of the string (by default). Notice however that it does not match the
> newline. Dollar needs not to be the last character of the pattern if some
> alternatives are involved, but it is to be the last item in any branch in which
> it appears. Dollar has no special meaning in a character class.
1033,1034c1095,1117
< the string, by setting the PCRE_DOLLAR_ENDONLY option at compile time. This
< does not affect the \eZ assertion.
---
> the string, by setting option `dollar_endonly` at compile time. This does not
> affect the `\Z` assertion.
> 
> The meanings of the circumflex and dollar characters are changed if option
> `multiline` is set. When this is the case, a circumflex matches immediately
> after internal newlines and at the start of the subject string. It does not
> match after a newline that ends the string. A dollar matches before any newlines
> in the string, and at the very end, when `multiline` is set. When newline is
> specified as the two-character sequence CRLF, isolated CR and LF characters do
> not indicate newlines.
> 
> For example, the pattern `/^abc$/` matches the subject string "def\\nabc" (where
> \\n represents a newline) in multiline mode, but not otherwise. So, patterns
> that are anchored in single-line mode because all branches start with ^ are not
> anchored in multiline mode, and a match for circumflex is possible when argument
> _startoffset_ of [`run/3`](`run/3`) is non-zero. Option `dollar_endonly` is
> ignored if `multiline` is set.
> 
> Notice that the sequences `\A`, `\Z`, and `\z` can be used to match the start and
> end of the subject in both modes. If all branches of a pattern start with `\A`,
> it is always anchored, regardless if `multiline` is set.
> 
> [](){: #sect5 }
1036,1062c1119,1122
< The meanings of the circumflex and dollar characters are changed if the
< PCRE_MULTILINE option is set. When this is the case, a circumflex matches
< immediately after internal newlines as well as at the start of the subject
< string. It does not match after a newline that ends the string. A dollar
< matches before any newlines in the string, as well as at the very end, when
< PCRE_MULTILINE is set. When newline is specified as the two-character
< sequence CRLF, isolated CR and LF characters do not indicate newlines.
< 
< For example, the pattern /^abc$/ matches the subject string "def\enabc" (where
< \en represents a newline) in multiline mode, but not otherwise. Consequently,
< patterns that are anchored in single line mode because all branches start with
< ^ are not anchored in multiline mode, and a match for circumflex is possible
< when the _startoffset_ argument of `pcre\_exec()` is non-zero. The
< PCRE_DOLLAR_ENDONLY option is ignored if PCRE_MULTILINE is set.
< 
< Note that the sequences \eA, \eZ, and \ez can be used to match the start and
< end of the subject in both modes, and if all branches of a pattern start with
< \eA it is always anchored, whether or not PCRE_MULTILINE is set.
< 
< <a name="full-stop-period-dot-and-en"></a>
< 
< ## Full Stop (Period, Dot) and \En
< 
< 
< Outside a character class, a dot in the pattern matches any one character in
< the subject string except (by default) a character that signifies the end of a
< line.
---
> ## Full Stop (Period, Dot) and \\N
> 
> Outside a character class, a dot in the pattern matches any character in the
> subject string except (by default) a character that signifies the end of a line.
1065,1074c1125,1132
< character; when the two-character sequence CRLF is used, dot does not match CR
< if it is immediately followed by LF, but otherwise it matches all characters
< (including isolated CRs and LFs). When any Unicode line endings are being
< recognized, dot does not match CR or LF or any of the other line ending
< characters.
< 
< The behaviour of dot with regard to newlines can be changed. If the PCRE_DOTALL
< option is set, a dot matches any one character, without exception. If the
< two-character sequence CRLF is present in the subject string, it takes two dots
< to match it.
---
> character. When the two-character sequence CRLF is used, dot does not match CR
> if it is immediately followed by LF, otherwise it matches all characters
> (including isolated CRs and LFs). When any Unicode line endings are recognized,
> dot does not match CR, LF, or any of the other line-ending characters.
> 
> The behavior of dot regarding newlines can be changed. If option `dotall` is
> set, a dot matches any character, without exception. If the two-character
> sequence CRLF is present in the subject string, it takes two dots to match it.
1077,1078c1135,1136
< dollar, the only relationship being that they both involve newlines. Dot has no
< special meaning in a character class.
---
> dollar, the only relationship is that both involve newlines. Dot has no special
> meaning in a character class.
1080,1083c1138,1141
< The escape sequence \eN behaves like a dot, except that it is not affected by
< the PCRE_DOTALL option. In other words, it matches any character except one
< that signifies the end of a line. Perl also uses \eN to match characters by
< name; PCRE does not support this.
---
> The escape sequence `\N` behaves like a dot, except that it is not affected by
> option `PCRE_DOTALL`. That is, it matches any character except one that
> signifies the end of a line. Perl also uses `\N` to match characters by name but
> PCRE does not support this.
1085c1143
< <a name="matching-a-single-data-unit"></a>
---
> [](){: #sect6 }
1089,1117c1147,1170
< 
< Outside a character class, the escape sequence \eC matches any one data unit,
< whether or not a UTF mode is set. In the 8-bit library, one data unit is one
< byte; in the 16-bit library it is a 16-bit unit; in the 32-bit library it is
< a 32-bit unit. Unlike a dot, \eC always
< matches line-ending characters. The feature is provided in Perl in order to
< match individual bytes in UTF-8 mode, but it is unclear how it can usefully be
< used. Because \eC breaks up characters into individual data units, matching one
< unit with \eC in a UTF mode means that the rest of the string may start with a
< malformed UTF character. This has undefined results, because PCRE assumes that
< it is dealing with valid UTF strings (and by default it checks this at the
< start of processing unless the PCRE_NO_UTF8_CHECK, PCRE_NO_UTF16_CHECK or
< PCRE_NO_UTF32_CHECK option is used).
< 
< PCRE does not allow \eC to appear in lookbehind assertions
< (described below)
< in a UTF mode, because this would make it impossible to calculate the length of
< the lookbehind.
< 
< In general, the \eC escape sequence is best avoided. However, one
< way of using it that avoids the problem of malformed UTF characters is to use a
< lookahead to check the length of the next character, as in this pattern, which
< could be used with a UTF-8 string (ignore white space and line breaks):
< 
< ```text
< (?| (?=[\ex00-\ex7f])(\eC) |
<       (?=[\ex80-\ex{7ff}])(\eC)(\eC) |
<       (?=[\ex{800}-\ex{ffff}])(\eC)(\eC)(\eC) |
<       (?=[\ex{10000}-\ex{1fffff}])(\eC)(\eC)(\eC)(\eC))
---
> Outside a character class, the escape sequence `\C` matches any data unit,
> regardless if a UTF mode is set. One data unit is one byte. Unlike a dot, `\C`
> always matches line-ending characters. The feature is provided in Perl to match
> individual bytes in UTF-8 mode, but it is unclear how it can usefully be used.
> As `\C` breaks up characters into individual data units, matching one unit with
> `\C` in a UTF mode means that the remaining string can start with a malformed UTF
> character. This has undefined results, as PCRE assumes that it deals with valid
> UTF strings.
> 
> PCRE does not allow `\C` to appear in lookbehind assertions (described below) in
> a UTF mode, as this would make it impossible to calculate the length of the
> lookbehind.
> 
> The `\C` escape sequence is best avoided. However, one way of using it that
> avoids the problem of malformed UTF characters is to use a lookahead to check
> the length of the next character, as in the following pattern, which can be used
> with a UTF-8 string (ignore whitespace and line breaks):
> 
> ```text
> (?| (?=[\x00-\x7f])(\C) |
>     (?=[\x80-\x{7ff}])(\C)(\C) |
>     (?=[\x{800}-\x{ffff}])(\C)(\C)(\C) |
>     (?=[\x{10000}-\x{1fffff}])(\C)(\C)(\C)(\C))
> ```
1120,1125c1173,1176
< alternative (see
< "Duplicate Subpattern Numbers"
< below). The assertions at the start of each branch check the next UTF-8
< character for values whose encoding uses 1, 2, 3, or 4 bytes, respectively. The
< character's individual bytes are then captured by the appropriate number of
< groups.
---
> alternative (see section [Duplicate Subpattern Numbers](`m:re#sect12`)). The
> assertions at the start of each branch check the next UTF-8 character for values
> whose encoding uses 1, 2, 3, or 4 bytes, respectively. The individual bytes of
> the character are then captured by the appropriate number of groups.
1127c1178
< <a name="square-brackets-and-character-classes"></a>
---
> [](){: #sect7 }
1131d1181
< 
1134c1184
< However, if the PCRE_JAVASCRIPT_COMPAT option is set, a lone closing square
---
> However, if option `PCRE_JAVASCRIPT_COMPAT` is set, a lone closing square
1136,1137c1186,1187
< a member of the class, it should be the first data character in the class
< (after an initial circumflex, if present) or escaped with a backslash.
---
> a member of the class, it is to be the first data character in the class (after
> an initial circumflex, if present) or escaped with a backslash.
1140c1190
< character may be more than one data unit long. A matched character must be in
---
> character can be more than one data unit long. A matched character must be in
1143,1144c1193,1194
< be in the set defined by the class. If a circumflex is actually required as a
< member of the class, ensure it is not the first character, or escape it with a
---
> be in the set defined by the class. If a circumflex is required as a member of
> the class, ensure that it is not the first character, or escape it with a
1147,1150c1197,1200
< For example, the character class [aeiou] matches any lower case vowel, while
< [^aeiou] matches any character that is not a lower case vowel. Note that a
< circumflex is just a convenient notation for specifying the characters that
< are in the class by enumerating those that are not. A class that starts with a
---
> For example, the character class `[aeiou]` matches any lowercase vowel, while
> `[^aeiou]` matches any character that is not a lowercase vowel. Notice that a
> circumflex is just a convenient notation for specifying the characters that are
> in the class by enumerating those that are not. A class that starts with a
1155,1157c1205,1206
< In UTF-8 (UTF-16, UTF-32) mode, characters with values greater than 255 (0xffff)
< can be included in a class as a literal string of data units, or by using the
< \ex{ escaping mechanism.
---
> In UTF-8 mode, characters with values > 255 (0xffff) can be included in a class
> as a literal string of data units, or by using the `\x{` escaping mechanism.
1160,1168c1209,1216
< upper case and lower case versions, so for example, a caseless [aeiou] matches
< "A" as well as "a", and a caseless [^aeiou] does not match "A", whereas a
< caseful version would. In a UTF mode, PCRE always understands the concept of
< case for characters whose values are less than 128, so caseless matching is
< always possible. For characters with higher values, the concept of case is
< supported if PCRE is compiled with Unicode property support, but not otherwise.
< If you want to use caseless matching in a UTF mode for characters 128 and
< above, you must ensure that PCRE is compiled with Unicode property support as
< well as with UTF support.
---
> uppercase and lowercase versions. For example, a caseless `[aeiou]` matches "A"
> and "a", and a caseless `[^aeiou]` does not match "A", but a caseful version
> would. In a UTF mode, PCRE always understands the concept of case for characters
> whose values are < 256, so caseless matching is always possible. For characters
> with higher values, the concept of case is supported only if PCRE is compiled
> with Unicode property support. If you want to use caseless matching in a UTF
> mode for characters >=, ensure that PCRE is compiled with Unicode property
> support and with UTF support.
1170c1218
< Characters that might indicate line breaks are never treated in any special way
---
> Characters that can indicate line breaks are never treated in any special way
1172,1173c1220,1221
< whatever setting of the PCRE_DOTALL and PCRE_MULTILINE options is used. A class
< such as [^a] always matches one of these characters.
---
> whatever setting of options `PCRE_DOTALL` and `PCRE_MULTILINE` is used. A class
> such as `[^a]` always matches one of these characters.
1176c1224
< character class. For example, [d-m] matches any letter between d and m,
---
> character class. For example, `[d-m]` matches any letter between d and m,
1178,1189c1226,1237
< a backslash or appear in a position where it cannot be interpreted as
< indicating a range, typically as the first or last character in the class, or
< immediately after a range. For example, [b-d-z] matches letters in the range b
< to d, a hyphen character, or z.
< 
< It is not possible to have the literal character "]" as the end character of a
< range. A pattern such as [W-]46] is interpreted as a class of two characters
< ("W" and "-") followed by a literal string "46]", so it would match "W46]" or
< "-46]". However, if the "]" is escaped with a backslash it is interpreted as
< the end of range, so [W-\e]46] is interpreted as a class containing a range
< followed by two other characters. The octal or hexadecimal representation of
< "]" can also be used to end a range.
---
> a backslash or appear in a position where it cannot be interpreted as indicating
> a range, typically as the first or last character in the class, or immediately
> after a range. For example, `[b-d-z]` matches letters in the range b to d, a
> hyphen character, or z.
> 
> The literal character "]" cannot be the end character of a range. A pattern such
> as `[W-]46]` is interpreted as a class of two characters ("W" and "-") followed
> by a literal string "46]", so it would match "W46]" or "-46]". However, if "]"
> is escaped with a backslash, it is interpreted as the end of range, so
> `[W-\]46]` is interpreted as a class containing a range followed by two other
> characters. The octal or hexadecimal representation of "]" can also be used to
> end a range.
1192,1194c1240,1242
< sequence other than one that defines a single character appears at a point
< where a range ending character is expected. For example, [z-\exff] is valid,
< but [A-\ed] and [A-[:digit:]] are not.
---
> sequence other than one that defines a single character appears at a point where
> a range ending character is expected. For example, `[z-\xff]` is valid, but
> `[A-\d]` and `[A-[:digit:]]` are not.
1197c1245
< used for characters specified numerically, for example [\e000-\e037]. Ranges
---
> used for characters specified numerically, for example, `[\000-\037]`. Ranges
1201,1203c1249,1251
< matches the letters in either case. For example, [W-c] is equivalent to
< [][\e\e^_\`wxyzabc], matched caselessly, and in a non-UTF mode, if character
< tables for a French locale are in use, [\exc8-\excb] matches accented E
---
> matches the letters in either case. For example, `[W-c]` is equivalent to
> `` [][\\^_`wxyzabc] ``, matched caselessly. In a non-UTF mode, if character
> tables for a French locale are in use, `[\xc8-\xcb]` matches accented E
1205,1206c1253,1254
< characters with values greater than 128 only when it is compiled with Unicode
< property support.
---
> characters with values > 255 only when it is compiled with Unicode property
> support.
1208,1224c1256,1271
< The character escape sequences \ed, \eD, \eh, \eH, \ep, \eP, \es, \eS, \ev,
< \eV, \ew, and \eW may appear in a character class, and add the characters that
< they match to the class. For example, [\edABCDEF] matches any hexadecimal
< digit. In UTF modes, the PCRE_UCP option affects the meanings of \ed, \es, \ew
< and their upper case partners, just as it does when they appear outside a
< character class, as described in the section entitled
< "Generic character types"
< above. The escape sequence \eb has a different meaning inside a character
< class; it matches the backspace character. The sequences \eB, \eN, \eR, and \eX
< are not special inside a character class. Like any other unrecognized escape
< sequences, they are treated as the literal characters "B", "N", "R", and "X" by
< default, but cause an error if the PCRE_EXTRA option is set.
< 
< A circumflex can conveniently be used with the upper case character types to
< specify a more restricted set of characters than the matching lower case type.
< For example, the class [^\eW_] matches any letter or digit, but not underscore,
< whereas [\ew] includes underscore. A positive character class should be read as
---
> The character escape sequences `\d`, `\D`, `\h`, `\H`, `\p`, `\P`, `\s`, `\S`, `\v`, `\V`,
> `\w`, and `\W` can appear in a character class, and add the characters that they
> match to the class. For example, `[\dABCDEF]` matches any hexadecimal digit. In
> UTF modes, option `ucp` affects the meanings of `\d`, `\s`, `\w` and their
> uppercase partners, just as it does when they appear outside a character class,
> as described in section
> [Generic Character Types](`m:re#generic_character_types`) earlier. The escape
> sequence `\b` has a different meaning inside a character class; it matches the
> backspace character. The sequences `\B`, `\N`, `\R`, and `\X` are not special inside
> a character class. Like any other unrecognized escape sequences, they are
> treated as the literal characters "B", "N", "R", and "X".
> 
> A circumflex can conveniently be used with the uppercase character types to
> specify a more restricted set of characters than the matching lowercase type.
> For example, class `[^\W_]` matches any letter or digit, but not underscore,
> while `[\w]` includes underscore. A positive character class is to be read as
1228,1233c1275
< The only metacharacters that are recognized in character classes are backslash,
< hyphen (only where it can be interpreted as specifying a range), circumflex
< (only at the start), opening square bracket (only when it can be interpreted as
< introducing a POSIX class name, or for a special compatibility feature - see
< the next two sections), and the terminating closing square bracket. However,
< escaping other non-alphanumeric characters does no harm.
---
> Only the following metacharacters are recognized in character classes:
1235c1277,1282
< <a name="posix-character-classes"></a>
---
> - Backslash
> - Hyphen (only where it can be interpreted as specifying a range)
> - Circumflex (only at the start)
> - Opening square bracket (only when it can be interpreted as introducing a Posix
>   class name, or for a special compatibility feature; see the next two sections)
> - Terminating closing square bracket
1237c1284
< ## Posix Character Classes
---
> However, escaping other non-alphanumeric characters does no harm.
1238a1286
> [](){: #sect8 }
1240,1242c1288,1293
< Perl supports the POSIX notation for character classes. This uses names
< enclosed by [: and :] within the enclosing square brackets. PCRE also supports
< this notation. For example,
---
> ## Posix Character Classes
> 
> Perl supports the Posix notation for character classes. This uses names enclosed
> by `[:` and `:]` within the enclosing square brackets. PCRE also supports this
> notation. For example, the following matches "0", "1", any alphabetic character,
> or "%":
1245a1297,1325
> ```
> 
> The following are the supported class names:
> 
> - **alnum** - Letters and digits
> 
> - **alpha** - Letters
> 
> - **blank** - Space or tab only
> 
> - **cntrl** - Control characters
> 
> - **digit** - Decimal digits (same as `\d`)
> 
> - **graph** - Printing characters, excluding space
> 
> - **lower** - Lowercase letters
> 
> - **print** - Printing characters, including space
> 
> - **punct** - Printing characters, excluding letters, digits, and space
> 
> - **space** - Whitespace (the same as `\s` from PCRE 8.34)
> 
> - **upper** - Uppercase letters
> 
> - **word** - "Word" characters (same as `\w`)
> 
> - **xdigit** - Hexadecimal digits
1247,1248c1327,1330
< matches "0", "1", any alphabetic character, or "%". The supported class names
< are:
---
> There is another character class, `ascii`, that erroneously matches Latin-1
> characters instead of the 0-127 range specified by POSIX. This cannot be fixed
> without altering the behaviour of other classes, so we recommend matching the
> range with `[\\0-\x7f]` instead.
1250d1331
< - **alnum** - letters and digits- **alpha** - letters- **ascii** - character codes 0 - 127- **blank** - space or tab only- **cntrl** - control characters- **digit** - decimal digits (same as \ed)- **graph** - printing characters, excluding space- **lower** - lower case letters- **print** - printing characters, including space- **punct** - printing characters, excluding letters and digits and space- **space** - white space (the same as \es from PCRE 8.34)- **upper** - upper case letters- **word** - "word" characters (same as \ew)- **xdigit** - hexadecimal digits
1253,1256c1334,1337
< characters may be different; there may be fewer or more of them. "Space" used
< to be different to \es, which did not include VT, for Perl compatibility.
< However, Perl changed at release 5.18, and PCRE followed at release 8.34.
< "Space" and \es now match the same set of characters.
---
> characters may be different; there may be fewer or more of them. "Space" used to
> be different to `\s`, which did not include VT, for Perl compatibility. However,
> Perl changed at release 5.18, and PCRE followed at release 8.34. "Space" and `\s`
> now match the same set of characters.
1260c1341
< after the colon. For example,
---
> after the colon. For example, the following matches "1", "2", or any non-digit:
1263a1345,1362
> ```
> 
> PCRE (and Perl) also recognize the Posix syntax `[.ch.]` and `[=ch=]` where "ch"
> is a "collating element", but these are not supported, and an error is given if
> they are encountered.
> 
> By default, characters with values > 255 do not match any of the Posix character
> classes. However, if option `PCRE_UCP` is passed to `pcre_compile()`, some of
> the classes are changed so that Unicode character properties are used. This is
> achieved by replacing certain Posix classes by other sequences, as follows:
> 
> - **`[:alnum:]`** - Becomes _`\p{Xan}`_
> 
> - **`[:alpha:]`** - Becomes _`\p{L}`_
> 
> - **`[:blank:]`** - Becomes _`\h`_
> 
> - **`[:digit:]`** - Becomes _`\p{Nd}`_
1265,1283c1364
< matches "1", "2", or any non-digit. PCRE (and Perl) also recognize the POSIX
< syntax [.ch.] and [=ch=] where "ch" is a "collating element", but these are not
< supported, and an error is given if they are encountered.
< 
< By default, characters with values greater than 128 do not match any of the
< POSIX character classes. However, if the PCRE_UCP option is passed to
< `pcre\_compile()`, some of the classes are changed so that Unicode character
< properties are used. This is achieved by replacing certain POSIX classes by
< other sequences, as follows:
< 
< ```text
< [:alnum:]  becomes  \ep{Xan}
< [:alpha:]  becomes  \ep{L}
< [:blank:]  becomes  \eh
< [:digit:]  becomes  \ep{Nd}
< [:lower:]  becomes  \ep{Ll}
< [:space:]  becomes  \ep{Xps}
< [:upper:]  becomes  \ep{Lu}
< - **`[:word:]`** - becomes  \ep{Xwd}
---
> - **`[:lower:]`** - Becomes _`\p{Ll}`_
1285c1366,1372
< Negated versions, such as [:^alpha:] use \eP instead of \ep. Three other POSIX
---
> - **`[:space:]`** - Becomes _`\p{Xps}`_
> 
> - **`[:upper:]`** - Becomes _`\p{Lu}`_
> 
> - **`[:word:]`** - Becomes _`\p{Xwd}`_
> 
> Negated versions, such as `[:^alpha:]`, use `\P` instead of `\p`. Three other POSIX
1288,1293c1375,1377
< * [:graph:]  
< This matches characters that have glyphs that mark the page when printed. In
< Unicode property terms, it matches all characters with the L, M, N, P, S, or Cf
< properties, except for:
< ```
< - **U+061C** - Arabic Letter Mark- **U+180E** - Mongolian Vowel Separator  U+2066 - U+2069  Various "isolate"s
---
> - **`[:graph:]`** - This matches characters that have glyphs that mark the page
>   when printed. In Unicode property terms, it matches all characters with the L,
>   M, N, P, S, or Cf properties, except for:
1294a1379
>   - **U+061C** - Arabic Letter Mark
1296,1305c1381
< * [:print:]  
< This matches the same characters as [:graph:] plus space characters that are
< not controls, that is, characters with the Zs property.
< * [:punct:]  
< This matches all characters that have the Unicode P (punctuation) property,
< plus those characters whose code points are less than 128 that have the S
< (Symbol) property.
< ```
< The other POSIX classes are unchanged, and match only characters with code
< points less than 128.
---
>   - **U+180E** - Mongolian Vowel Separator
1307c1383
< <a name="compatibility-feature-for-word-boundaries"></a>
---
>   - **U+2066 - U+2069** - Various "isolate"s
1309c1385,1386
< ## Compatibility Feature for Word Boundaries
---
> - **`[:print:]`** - This matches the same characters as `[:graph:]` plus space
>   characters that are not controls, that is, characters with the Zs property.
1310a1388,1395
> - **`[:punct:]`** - This matches all characters that have the Unicode P
>   (punctuation) property, plus those characters whose code points are less than
>   128 that have the S (Symbol) property.
> 
> The other POSIX classes are unchanged, and match only characters with code
> points less than 128.
> 
> _Compatibility Feature for Word Boundaries_
1313c1398
< syntax [[:&lt;:]] and [[:&gt;:]] is used for matching "start of word" and "end of
---
> syntax `[[:<:]]` and `[[:>:]]` is used for matching "start of word" and "end of
1316,1319c1401,1404
< ```text
< [[:&lt;:]]  is converted to  \eb(?=\ew)
< [[:&gt;:]]  is converted to  \eb(?&lt;=\ew)
< ```
---
> - **`[[:<:]]`** - is converted to `\b(?=\w)`
> 
> - **`[[:>:]]`** - is converted to `\b(?<=\w)`
> 
1321c1406
< [a[:&lt;:]b] provokes error for an unrecognized POSIX class name. This support is
---
> `[a[:<:]b]` provokes error for an unrecognized POSIX class name. This support is
1323,1328c1408,1412
< environments, and is best not used in any new patterns. Note that \eb matches
< at the start and the end of a word (see
< "Simple assertions"
< above), and in a Perl-style pattern the preceding or following character
< normally shows which is wanted, without the need for the assertions that are
< used above in order to give exactly the POSIX behaviour.
---
> environments, and is best not used in any new patterns. Note that `\b` matches at
> the start and the end of a word (see "Simple assertions" above), and in a
> Perl-style pattern the preceding or following character normally shows which is
> wanted, without the need for the assertions that are used above in order to give
> exactly the POSIX behaviour.
1330c1414
< <a name="vertical-bar"></a>
---
> [](){: #sect9 }
1334d1417
< 
1336c1419
< the pattern
---
> the following pattern matches either "gilbert" or "sullivan":
1339a1423
> ```
1341,1347c1425,1430
< matches either "gilbert" or "sullivan". Any number of alternatives may appear,
< and an empty alternative is permitted (matching the empty string). The matching
< process tries each alternative in turn, from left to right, and the first one
< that succeeds is used. If the alternatives are within a subpattern
< (defined below),
< "succeeds" means matching the rest of the main pattern as well as the
< alternative in the subpattern.
---
> Any number of alternatives can appear, and an empty alternative is permitted
> (matching the empty string). The matching process tries each alternative in
> turn, from left to right, and the first that succeeds is used. If the
> alternatives are within a subpattern (defined in section
> [Subpatterns](`m:re#sect11`)), "succeeds" means matching the remaining main
> pattern and the alternative in the subpattern.
1349c1432
< <a name="internal-option-setting"></a>
---
> [](){: #sect10 }
1352a1436,1446
> The settings of the Perl-compatible options `caseless`, `multiline`, `dotall`,
> and `extended` can be changed from within the pattern by a sequence of Perl
> option letters enclosed between "(?" and ")". The option letters are as follows:
> 
> - **i** - For `caseless`
> 
> - **m** - For `multiline`
> 
> - **s** - For `dotall`
> 
> - **x** - For `extended`
1354,1379c1448,1464
< The settings of the PCRE_CASELESS, PCRE_MULTILINE, PCRE_DOTALL, and
< PCRE_EXTENDED options (which are Perl-compatible) can be changed from within
< the pattern by a sequence of Perl option letters enclosed between "(?" and ")".
< The option letters are
< 
< ```text
< i  for PCRE_CASELESS
< m  for PCRE_MULTILINE
< s  for PCRE_DOTALL
< x  for PCRE_EXTENDED
< ```
< For example, (?im) sets caseless, multiline matching. It is also possible to
< unset these options by preceding the letter with a hyphen, and a combined
< setting and unsetting such as (?im-sx), which sets PCRE_CASELESS and
< PCRE_MULTILINE while unsetting PCRE_DOTALL and PCRE_EXTENDED, is also
< permitted. If a letter appears both before and after the hyphen, the option is
< unset.
< 
< The PCRE-specific options PCRE_DUPNAMES, PCRE_UNGREEDY, and PCRE_EXTRA can be
< changed in the same way as the Perl-compatible options by using the characters
< J, U and X respectively.
< 
< When one of these option changes occurs at top level (that is, not inside
< subpattern parentheses), the change applies to the remainder of the pattern
< that follows. An option change within a subpattern (see below for a description
< of subpatterns) affects only that part of the subpattern that follows it, so
---
> For example, `(?im)` sets caseless, multiline matching. These options can also
> be unset by preceding the letter with a hyphen. A combined setting and unsetting
> such as `(?im-sx)`, which sets `caseless` and `multiline`, while unsetting
> `dotall` and `extended`, is also permitted. If a letter appears both before and
> after the hyphen, the option is unset.
> 
> The PCRE-specific options `dupnames`, `ungreedy`, and `extra` can be changed in
> the same way as the Perl-compatible options by using the characters J, U, and X
> respectively.
> 
> When one of these option changes occurs at top-level (that is, not inside
> subpattern parentheses), the change applies to the remainder of the pattern that
> follows.
> 
> An option change within a subpattern (see section [Subpatterns](`m:re#sect11`))
> affects only that part of the subpattern that follows it. So, the following
> matches abc and aBc and no other strings (assuming `caseless` is not used):
1382a1468
> ```
1384,1387c1470,1472
< matches abc and aBc and no other strings (assuming PCRE_CASELESS is not used).
< By this means, options can be made to have different settings in different
< parts of the pattern. Any changes made in one alternative do carry on
< into subsequent branches within the same subpattern. For example,
---
> By this means, options can be made to have different settings in different parts
> of the pattern. Any changes made in one alternative do carry on into subsequent
> branches within the same subpattern. For example:
1390a1476
> ```
1392,1408c1478,1494
< matches "ab", "aB", "c", and "C", even though when matching "C" the first
< branch is abandoned before the option setting. This is because the effects of
< option settings happen at compile time. There would be some very weird
< behaviour otherwise.
< 
< `Note:` There are other PCRE-specific options that can be set by the
< application when the compiling or matching functions are called. In some cases
< the pattern can contain special leading sequences such as (*CRLF) to override
< what the application has set or what has been defaulted. Details are given in
< the section entitled
< "Newline sequences"
< above. There are also the (*UTF8), (*UTF16),(*UTF32), and (*UCP) leading
< sequences that can be used to set UTF and Unicode property modes; they are
< equivalent to setting the PCRE_UTF8, PCRE_UTF16, PCRE_UTF32 and the PCRE_UCP
< options, respectively. The (*UTF) sequence is a generic version that can be
< used with any of the libraries. However, the application can set the
< PCRE_NEVER_UTF option, which locks out the use of the (*UTF) sequences.
---
> matches "ab", "aB", "c", and "C", although when matching "C" the first branch is
> abandoned before the option setting. This is because the effects of option
> settings occur at compile time. There would be some weird behavior otherwise.
> 
> > #### Note {: .info }
> >
> > Other PCRE-specific options can be set by the application when the compiling
> > or matching functions are called. Sometimes the pattern can contain special
> > leading sequences, such as (\*CRLF), to override what the application has set
> > or what has been defaulted. Details are provided in section
> > [Newline Sequences](`m:re#newline_sequences`) earlier.
> >
> > The (*UTF8) and (*UCP) leading sequences can be used to set UTF and Unicode
> > property modes. They are equivalent to setting options `unicode` and `ucp`,
> > respectively. The (*UTF) sequence is a generic version that can be used with
> > any of the libraries. However, the application can set option `never_utf`,
> > which locks out the use of the (*UTF) sequences.
1410c1496
< <a name="subpatterns"></a>
---
> [](){: #sect11 }
1414d1499
< 
1418,1424c1503,1504
< 1. It localizes a set of alternatives. For example, the pattern
< 
< ```text
< cat(aract|erpillar|)
< 
< matches "cataract", "caterpillar", or "cat". Without the parentheses, it would
< match "cataract", "erpillar" or an empty string.
---
> - **1.** - It localizes a set of alternatives. For example, the following
>   pattern matches "cataract", "caterpillar", or "cat":
1426,1430c1506,1516
< 2. It sets up the subpattern as a capturing subpattern. This means that, when
< the whole pattern matches, that portion of the subject string that matched the
< subpattern is passed back to the caller via the _ovector_ argument of the
< matching function. (This applies only to the traditional matching functions;
< the DFA matching functions do not support capturing.)
---
>   ```text
>   cat(aract|erpillar|)
>   ```
> 
>   Without the parentheses, it would match "cataract", "erpillar", or an empty
>   string.
> 
> - **2.** - It sets up the subpattern as a capturing subpattern. That is, when
>   the complete pattern matches, that portion of the subject string that matched
>   the subpattern is passed back to the caller through the return value of
>   `run/3`.
1433,1434c1519,1521
< numbers for the capturing subpatterns. For example, if the string "the red
< king" is matched against the pattern
---
> numbers for the capturing subpatterns. For example, if the string "the red king"
> is matched against the following pattern, the captured substrings are "red
> king", "red", and "king", and are numbered 1, 2, and 3, respectively:
1437a1525
> ```
1439,1447c1527,1533
< the captured substrings are "red king", "red", and "king", and are numbered 1,
< 2, and 3, respectively.
< 
< The fact that plain parentheses fulfil two functions is not always helpful.
< There are often times when a grouping subpattern is required without a
< capturing requirement. If an opening parenthesis is followed by a question mark
< and a colon, the subpattern does not do any capturing, and is not counted when
< computing the number of any subsequent capturing subpatterns. For example, if
< the string "the white queen" is matched against the pattern
---
> It is not always helpful that plain parentheses fulfill two functions. Often a
> grouping subpattern is required without a capturing requirement. If an opening
> parenthesis is followed by a question mark and a colon, the subpattern does not
> do any capturing, and is not counted when computing the number of any subsequent
> capturing subpatterns. For example, if the string "the white queen" is matched
> against the following pattern, the captured substrings are "white queen" and
> "queen", and are numbered 1 and 2:
1450a1537
> ```
1452,1453c1539
< the captured substrings are "white queen" and "queen", and are numbered 1 and
< 2. The maximum number of capturing subpatterns is 65535.
---
> The maximum number of capturing subpatterns is 65535.
1455,1457c1541,1543
< As a convenient shorthand, if any option settings are required at the start of
< a non-capturing subpattern, the option letters may appear between the "?" and
< the ":". Thus the two patterns
---
> As a convenient shorthand, if any option settings are required at the start of a
> non-capturing subpattern, the option letters can appear between "?" and ":".
> Thus, the following two patterns match the same set of strings:
1463,1466d1548
< match exactly the same set of strings. Because alternative branches are tried
< from left to right, and options are not reset until the end of the subpattern
< is reached, an option setting in one branch does affect subsequent branches, so
< the above patterns match "SUNDAY" as well as "Saturday".
1468c1550,1553
< <a name="duplicate-subpattern-numbers"></a>
---
> As alternative branches are tried from left to right, and options are not reset
> until the end of the subpattern is reached, an option setting in one branch does
> affect subsequent branches, so the above patterns match both "SUNDAY" and
> "Saturday".
1470c1555
< ## Duplicate Subpattern Numbers
---
> [](){: #sect12 }
1471a1557
> ## Duplicate Subpattern Numbers
1473,1475c1559,1561
< Perl 5.10 introduced a feature whereby each alternative in a subpattern uses
< the same numbers for its capturing parentheses. Such a subpattern starts with
< (?| and is itself a non-capturing subpattern. For example, consider this
---
> Perl 5.10 introduced a feature where each alternative in a subpattern uses the
> same numbers for its capturing parentheses. Such a subpattern starts with `(?|`
> and is itself a non-capturing subpattern. For example, consider the following
1479a1566
> ```
1481,1485c1568,1572
< Because the two alternatives are inside a (?| group, both sets of capturing
< parentheses are numbered one. Thus, when the pattern matches, you can look
< at captured substring number one, whichever alternative matched. This construct
< is useful when you want to capture part, but not all, of one of a number of
< alternatives. Inside a (?| group, parentheses are numbered as usual, but the
---
> As the two alternatives are inside a `(?|` group, both sets of capturing
> parentheses are numbered one. Thus, when the pattern matches, you can look at
> captured substring number one, whichever alternative matched. This construct is
> useful when you want to capture a part, but not all, of one of many
> alternatives. Inside a `(?|` group, parentheses are numbered as usual, but the
1488,1489c1575,1576
< any branch. The following example is taken from the Perl documentation. The
< numbers underneath show in which buffer the captured content will be stored.
---
> any branch. The following example is from the Perl documentation; the numbers
> underneath show in which buffer the captured content is stored:
1494c1581,1582
< - **`# 1`** - 2         2  3        2     3     4
---
> # 1            2         2  3        2     3     4
> ```
1496,1498c1584,1586
< A back reference to a numbered subpattern uses the most recent value that is
< set for that number by any subpattern. The following pattern matches "abcabc"
< or "defdef":
---
> A back reference to a numbered subpattern uses the most recent value that is set
> for that number by any subpattern. The following pattern matches "abcabc" or
> "defdef":
1501c1589,1590
< /(?|(abc)|(def))\e1/
---
> /(?|(abc)|(def))\1/
> ```
1508a1598
> ```
1510,1513c1600,1601
< If a
< condition test
< for a subpattern's having matched refers to a non-unique number, the test is
< true if any of the subpatterns of that number have matched.
---
> If a condition test for a subpattern having matched refers to a non-unique
> number, the test is true if any of the subpatterns of that number have matched.
1515,1516c1603,1604
< An alternative approach to using this "branch reset" feature is to use
< duplicate named subpatterns, as described in the next section.
---
> An alternative approach using this "branch reset" feature is to use duplicate
> named subpatterns, as described in the next section.
1518c1606
< <a name="named-subpatterns"></a>
---
> [](){: #sect13 }
1522,1539c1610,1622
< 
< Identifying capturing parentheses by number is simple, but it can be very hard
< to keep track of the numbers in complicated regular expressions. Furthermore,
< if an expression is modified, the numbers may change. To help with this
< difficulty, PCRE supports the naming of subpatterns. This feature was not
< added to Perl until release 5.10. Python had the feature earlier, and PCRE
< introduced it at release 4.0, using the Python syntax. PCRE now supports both
< the Perl and the Python syntax. Perl allows identically numbered subpatterns to
< have different names, but PCRE does not.
< 
< In PCRE, a subpattern can be named in one of three ways: (?&lt;name&gt;...) or
< (?'name'...) as in Perl, or (?P&lt;name&gt;...) as in Python. References to capturing
< parentheses from other parts of the pattern, such as
< back references,
< recursion,
< and
< conditions,
< can be made by name as well as by number.
---
> Identifying capturing parentheses by number is simple, but it can be hard to
> keep track of the numbers in complicated regular expressions. Also, if an
> expression is modified, the numbers can change. To help with this difficulty,
> PCRE supports the naming of subpatterns. This feature was not added to Perl
> until release 5.10. Python had the feature earlier, and PCRE introduced it at
> release 4.0, using the Python syntax. PCRE now supports both the Perl and the
> Python syntax. Perl allows identically numbered subpatterns to have different
> names, but PCRE does not.
> 
> In PCRE, a subpattern can be named in one of three ways: `(?<name>...)` or
> `(?'name'...)` as in Perl, or `(?P<name>...)` as in Python. References to
> capturing parentheses from other parts of the pattern, such as back references,
> recursion, and conditions, can be made by name and by number.
1543,1603c1626,1662
< as well as names, exactly as if the names were not present. The PCRE API
< provides function calls for extracting the name-to-number translation table
< from a compiled pattern. There is also a convenience function for extracting a
< captured substring by name.
< 
< By default, a name must be unique within a pattern, but it is possible to relax
< this constraint by setting the PCRE_DUPNAMES option at compile time. (Duplicate
< names are also always permitted for subpatterns with the same number, set up as
< described in the previous section.) Duplicate names can be useful for patterns
< where only one instance of the named parentheses can match. Suppose you want to
< match the name of a weekday, either as a 3-letter abbreviation or as the full
< name, and in both cases you want to extract the abbreviation. This pattern
< (ignoring the line breaks) does the job:
< 
< ```text
< (?&lt;DN&gt;Mon|Fri|Sun)(?:day)?|
< (?&lt;DN&gt;Tue)(?:sday)?|
< (?&lt;DN&gt;Wed)(?:nesday)?|
< (?&lt;DN&gt;Thu)(?:rsday)?|
< (?&lt;DN&gt;Sat)(?:urday)?
< ```
< There are five capturing substrings, but only one is ever set after a match.
< (An alternative way of solving this problem is to use a "branch reset"
< subpattern, as described in the previous section.)
< 
< The convenience function for extracting the data by name returns the substring
< for the first (and in this example, the only) subpattern of that name that
< matched. This saves searching to find which numbered subpattern it was.
< 
< If you make a back reference to a non-unique named subpattern from elsewhere in
< the pattern, the subpatterns to which the name refers are checked in the order
< in which they appear in the overall pattern. The first one that is set is used
< for the reference. For example, this pattern matches both "foofoo" and
< "barbar" but not "foobar" or "barfoo":
< 
< ```text
< (?:(?&lt;n&gt;foo)|(?&lt;n&gt;bar))\ek&lt;n&gt;
< 
< 
< If you make a subroutine call to a non-unique named subpattern, the one that
< corresponds to the first occurrence of the name is used. In the absence of
< duplicate numbers (see the previous section) this is the one with the lowest
< number.
< 
< If you use a named reference in a condition
< test (see the
< section about conditions
< below), either to check whether a subpattern has matched, or to check for
< recursion, all subpatterns with the same name are tested. If the condition is
< true for any one of them, the overall condition is true. This is the same
< behaviour as testing by number. For further details of the interfaces for
< handling named subpatterns, see the
< `pcreapi`
< documentation.
< 
< `Warning:` You cannot use different names to distinguish between two
< subpatterns with the same number because PCRE uses only the numbers when
< matching. For this reason, an error is given at compile time if different names
< are given to subpatterns with the same number. However, you can always give the
< same name to subpatterns with the same number, even when PCRE_DUPNAMES is not
< set.
---
> as well as names, exactly as if the names were not present. The `capture`
> specification to `run/3` can use named values if they are present in the regular
> expression.
> 
> By default, a name must be unique within a pattern, but this constraint can be
> relaxed by setting option `dupnames` at compile time. (Duplicate names are also
> always permitted for subpatterns with the same number, set up as described in
> the previous section.) Duplicate names can be useful for patterns where only one
> instance of the named parentheses can match. Suppose that you want to match the
> name of a weekday, either as a 3-letter abbreviation or as the full name, and in
> both cases you want to extract the abbreviation. The following pattern (ignoring
> the line breaks) does the job:
> 
> ```text
> (?<DN>Mon|Fri|Sun)(?:day)?|
> (?<DN>Tue)(?:sday)?|
> (?<DN>Wed)(?:nesday)?|
> (?<DN>Thu)(?:rsday)?|
> (?<DN>Sat)(?:urday)?
> ```
> 
> There are five capturing substrings, but only one is ever set after a match. (An
> alternative way of solving this problem is to use a "branch reset" subpattern,
> as described in the previous section.)
> 
> For capturing named subpatterns which names are not unique, the first matching
> occurrence (counted from left to right in the subject) is returned from `run/3`,
> if the name is specified in the `values` part of the `capture` statement. The
> `all_names` capturing value matches all the names in the same way.
> 
> > #### Note {: .info }
> >
> > You cannot use different names to distinguish between two subpatterns with the
> > same number, as PCRE uses only the numbers when matching. For this reason, an
> > error is given at compile time if different names are specified to subpatterns
> > with the same number. However, you can specify the same name to subpatterns
> > with the same number, even when `dupnames` is not set.
1605c1664
< <a name="repetition"></a>
---
> [](){: #sect14 }
1609d1667
< 
1613,1624c1671,1681
< ```text
< a literal data character
< the dot metacharacter
< the \eC escape sequence
< the \eX escape sequence
< the \eR escape sequence
< an escape such as \ed or \epL that matches a single character
< a character class
< a back reference (see next section)
< a parenthesized subpattern (including assertions)
< a subroutine call to a subpattern (recursive or otherwise)
< ```
---
> - A literal data character
> - The dot metacharacter
> - The `\C` escape sequence
> - The `\X` escape sequence
> - The `\R` escape sequence
> - An escape such as `\d` or `\pL` that matches a single character
> - A character class
> - A back reference (see the next section)
> - A parenthesized subpattern (including assertions)
> - A subroutine call to a subpattern (recursive or otherwise)
> 
1627,1628c1684,1686
< separated by a comma. The numbers must be less than 65536, and the first must
< be less than or equal to the second. For example:
---
> separated by a comma. The numbers must be < 65536, and the first must be less
> than or equal to the second. For example, the following matches "zz", "zzz", or
> "zzzz":
1631a1690
> ```
1633,1636c1692,1696
< matches "zz", "zzz", or "zzzz". A closing brace on its own is not a special
< character. If the second number is omitted, but the comma is present, there is
< no upper limit; if the second number and the comma are both omitted, the
< quantifier specifies an exact number of required matches. Thus
---
> A closing brace on its own is not a special character. If the second number is
> omitted, but the comma is present, there is no upper limit. If the second number
> and the comma are both omitted, the quantifier specifies an exact number of
> required matches. Thus, the following matches at least three successive vowels,
> but can match many more:
1639a1700
> ```
1641c1702
< matches at least 3 successive vowels, but may match many more, while
---
> The following matches exactly eight digits:
1644c1705,1706
< \ed{8}
---
> \d{8}
> ```
1646,1664c1708,1725
< matches exactly 8 digits. An opening curly bracket that appears in a position
< where a quantifier is not allowed, or one that does not match the syntax of a
< quantifier, is taken as a literal character. For example, {,6} is not a
< quantifier, but a literal string of four characters.
< 
< In UTF modes, quantifiers apply to characters rather than to individual data
< units. Thus, for example, \ex{100}{2} matches two characters, each of
< which is represented by a two-byte sequence in a UTF-8 string. Similarly,
< \eX{3} matches three Unicode extended grapheme clusters, each of which may be
< several data units long (and they may be of different lengths).
< 
< The quantifier {0} is permitted, causing the expression to behave as if the
< previous item and the quantifier were not present. This may be useful for
< subpatterns that are referenced as
< subroutines
< from elsewhere in the pattern (but see also the section entitled
< "Defining subpatterns for use by reference only"
< below). Items other than subpatterns that have a {0} quantifier are omitted
< from the compiled pattern.
---
> An opening curly bracket that appears in a position where a quantifier is not
> allowed, or one that does not match the syntax of a quantifier, is taken as a
> literal character. For example, \{,6\} is not a quantifier, but a literal string
> of four characters.
> 
> In Unicode mode, quantifiers apply to characters rather than to individual data
> units. Thus, for example, `\x{100}{2}` matches two characters, each of which
> is represented by a 2-byte sequence in a UTF-8 string. Similarly, `\X{3}`
> matches three Unicode extended grapheme clusters, each of which can be many data
> units long (and they can be of different lengths).
> 
> The quantifier \{0\} is permitted, causing the expression to behave as if the
> previous item and the quantifier were not present. This can be useful for
> subpatterns that are referenced as subroutines from elsewhere in the pattern
> (but see also section
> [Defining Subpatterns for Use by Reference Only](`m:re#defining_subpatterns`)).
> Items other than subpatterns that have a \{0\} quantifier are omitted from the
> compiled pattern.
1669,1671c1730,1734
< - **`*`** - is equivalent to {0,}
< - **`+`** - is equivalent to {1,}
< - **`?`** - is equivalent to {0,1}
---
> - **\*** - Equivalent to \{0,\}
> 
> - **+** - Equivalent to \{1,\}
> 
> - **?** - Equivalent to \{0,1\}
1673,1674c1736,1737
< It is possible to construct infinite loops by following a subpattern that can
< match no characters with a quantifier that has no upper limit, for example:
---
> Infinite loops can be constructed by following a subpattern that can match no
> characters with a quantifier that has no upper limit, for example:
1677a1741
> ```
1679,1682c1743,1746
< Earlier versions of Perl and PCRE used to give an error at compile time for
< such patterns. However, because there are cases where this can be useful, such
< patterns are now accepted, but if any repetition of the subpattern does in fact
< match no characters, the loop is forcibly broken.
---
> Earlier versions of Perl and PCRE used to give an error at compile time for such
> patterns. However, as there are cases where this can be useful, such patterns
> are now accepted. However, if any repetition of the subpattern matches no
> characters, the loop is forcibly broken.
1686,1688c1750,1752
< rest of the pattern to fail. The classic example of where this gives problems
< is in trying to match comments in C programs. These appear between /* and */
< and within the comment, individual * and / characters may appear. An attempt to
---
> remaining pattern to fail. The classic example of where this gives problems is
> in trying to match comments in C programs. These appear between /_ and _/.
> Within the comment, individual \* and / characters can appear. An attempt to
1692c1756,1757
< /\e*.*\e*/
---
> /\*.*\*/
> ```
1697a1763
> ```
1699,1700c1765
< fails, because it matches the entire string owing to the greediness of the .*
< item.
---
> fails, as it matches the entire string owing to the greediness of the .\* item.
1702,1704c1767,1769
< However, if a quantifier is followed by a question mark, it ceases to be
< greedy, and instead matches the minimum number of times possible, so the
< pattern
---
> However, if a quantifier is followed by a question mark, it ceases to be greedy,
> and instead matches the minimum number of times possible, so the following
> pattern does the right thing with the C comments:
1707c1772,1773
< /\e*.*?\e*/
---
> /\*.*?\*/
> ```
1709,1712c1775,1778
< does the right thing with the C comments. The meaning of the various
< quantifiers is not otherwise changed, just the preferred number of matches.
< Do not confuse this use of question mark with its use as a quantifier in its
< own right. Because it has two uses, it can sometimes appear doubled, as in
---
> The meaning of the various quantifiers is not otherwise changed, only the
> preferred number of matches. Do not confuse this use of question mark with its
> use as a quantifier in its own right. As it has two uses, it can sometimes
> appear doubled, as in
1715c1781,1782
< \ed??\ed
---
> \d??\d
> ```
1717,1718c1784,1785
< which matches one digit by preference, but can match two if that is the only
< way the rest of the pattern matches.
---
> which matches one digit by preference, but can match two if that is the only way
> the remaining pattern matches.
1720,1723c1787,1789
< If the PCRE_UNGREEDY option is set (an option that is not available in Perl),
< the quantifiers are not greedy by default, but individual ones can be made
< greedy by following them with a question mark. In other words, it inverts the
< default behaviour.
---
> If option `ungreedy` is set (an option that is not available in Perl), the
> quantifiers are not greedy by default, but individual ones can be made greedy by
> following them with a question mark. That is, it inverts the default behavior.
1726,1727c1792,1793
< is greater than 1 or with a limited maximum, more memory is required for the
< compiled pattern, in proportion to the size of the minimum or maximum.
---
> is > 1 or with a limited maximum, more memory is required for the compiled
> pattern, in proportion to the size of the minimum or maximum.
1729,1734c1795,1800
< If a pattern starts with .* or .{0,} and the PCRE_DOTALL option (equivalent
< to Perl's /s) is set, thus allowing the dot to match newlines, the pattern is
< implicitly anchored, because whatever follows will be tried against every
< character position in the subject string, so there is no point in retrying the
< overall match at any position after the first. PCRE normally treats such a
< pattern as though it were preceded by \eA.
---
> If a pattern starts with .\* or .\{0,\} and option `dotall` (equivalent to Perl
> option `/s`) is set, thus allowing the dot to match newlines, the pattern is
> implicitly anchored, because whatever follows is tried against every character
> position in the subject string. So, there is no point in retrying the overall
> match at any position after the first. PCRE normally treats such a pattern as if
> it was preceded by `\A`.
1737,1738c1803,1804
< worth setting PCRE_DOTALL in order to obtain this optimization, or
< alternatively using ^ to indicate anchoring explicitly.
---
> worth setting `dotall` to obtain this optimization, or alternatively using ^ to
> indicate anchoring explicitly.
1740,1743c1806,1809
< However, there are some cases where the optimization cannot be used. When .*
< is inside capturing parentheses that are the subject of a back reference
< elsewhere in the pattern, a match at the start may fail where a later one
< succeeds. Consider, for example:
---
> However, there are some cases where the optimization cannot be used. When .\* is
> inside capturing parentheses that are the subject of a back reference elsewhere
> in the pattern, a match at the start can fail where a later one succeeds.
> Consider, for example:
1746c1812,1813
< (.*)abc\e1
---
> (.*)abc\1
> ```
1748,1749c1815,1816
< If the subject is "xyz123abc123" the match point is the fourth character. For
< this reason, such a pattern is not implicitly anchored.
---
> If the subject is "xyz123abc123", the match point is the fourth character.
> Therefore, such a pattern is not implicitly anchored.
1751,1753c1818,1820
< Another case where implicit anchoring is not applied is when the leading .* is
< inside an atomic group. Once again, a match at the start may fail where a later
< one succeeds. Consider this pattern:
---
> Another case where implicit anchoring is not applied is when the leading .\* is
> inside an atomic group. Once again, a match at the start can fail where a later
> one succeeds. Consider the following pattern:
1756c1823,1824
< (?&gt;.*?a)b
---
> (?>.*?a)b
> ```
1765c1833,1834
< (tweedle[dume]{3}\es*)+
---
> (tweedle[dume]{3}\s*)+
> ```
1767c1836
< has matched "tweedledum tweedledee" the value of the captured substring is
---
> has matched "tweedledum tweedledee", the value of the captured substring is
1769c1838
< corresponding captured values may have been set in previous iterations. For
---
> corresponding captured values can have been set in previous iterations. For
1773a1843
> ```
1775c1845
< matches "aba" the value of the second captured substring is "b".
---
> matches "aba", the value of the second captured substring is "b".
1777c1847
< <a name="atomic-grouping-and-possessive-quantifiers"></a>
---
> [](){: #sect15 }
1781d1850
< 
1784c1853
< re-evaluated to see if a different number of repeats allows the rest of the
---
> re-evaluated to see if a different number of repeats allows the remaining
1786,1787c1855,1856
< nature of the match, or to cause it fail earlier than it otherwise might, when
< the author of the pattern knows there is no point in carrying on.
---
> nature of the match, or to cause it to fail earlier than it otherwise might,
> when the author of the pattern knows that there is no point in carrying on.
1789c1858,1859
< Consider, for example, the pattern \ed+foo when applied to the subject line
---
> Consider, for example, the pattern `\d+foo` when applied to the following subject
> line:
1792a1863
> ```
1794,1798c1865,1869
< After matching all 6 digits and then failing to match "foo", the normal
< action of the matcher is to try again with only 5 digits matching the \ed+
< item, and then with 4, and so on, before ultimately failing. "Atomic grouping"
< (a term taken from Jeffrey Friedl's book) provides the means for specifying
< that once a subpattern has matched, it is not to be re-evaluated in this way.
---
> After matching all six digits and then failing to match "foo", the normal action
> of the matcher is to try again with only five digits matching item `\d+`, and
> then with four, and so on, before ultimately failing. "Atomic grouping" (a term
> taken from Jeffrey Friedl's book) provides the means for specifying that once a
> subpattern has matched, it is not to be re-evaluated in this way.
1800c1871
< If we use atomic grouping for the previous example, the matcher gives up
---
> If atomic grouping is used for the previous example, the matcher gives up
1802c1873
< special parenthesis, starting with (?&gt; as in this example:
---
> special parenthesis, starting with `(?>` as in the following example:
1805c1876,1877
< (?&gt;\ed+)foo
---
> (?>\d+)foo
> ```
1807,1808c1879,1880
< This kind of parenthesis "locks up" the  part of the pattern it contains once
< it has matched, and a failure further into the pattern is prevented from
---
> This kind of parenthesis "locks up" the part of the pattern it contains once it
> has matched, and a failure further into the pattern is prevented from
1818,1820c1890,1892
< everything it can. So, while both \ed+ and \ed+? are prepared to adjust the
< number of digits they match in order to make the rest of the pattern match,
< (?&gt;\ed+) can only match an entire sequence of digits.
---
> everything it can. So, while both `\d+` and `\d+?` are prepared to adjust the
> number of digits they match to make the remaining pattern match, `(?>\d+)` can
> only match an entire sequence of digits.
1822,1827c1894,1898
< Atomic groups in general can of course contain arbitrarily complicated
< subpatterns, and can be nested. However, when the subpattern for an atomic
< group is just a single repeated item, as in the example above, a simpler
< notation, called a "possessive quantifier" can be used. This consists of an
< additional + character following a quantifier. Using this notation, the
< previous example can be rewritten as
---
> Atomic groups in general can contain any complicated subpatterns, and can be
> nested. However, when the subpattern for an atomic group is just a single
> repeated item, as in the example above, a simpler notation, called a "possessive
> quantifier" can be used. This consists of an extra + character following a
> quantifier. Using this notation, the previous example can be rewritten as
1830c1901,1902
< \ed++foo
---
> \d++foo
> ```
1832c1904
< Note that a possessive quantifier can be used with an entire group, for
---
> Notice that a possessive quantifier can be used with an entire group, for
1836a1909
> ```
1838,1848c1911,1921
< Possessive quantifiers are always greedy; the setting of the PCRE_UNGREEDY
< option is ignored. They are a convenient notation for the simpler forms of
< atomic group. However, there is no difference in the meaning of a possessive
< quantifier and the equivalent atomic group, though there may be a performance
< difference; possessive quantifiers should be slightly faster.
< 
< The possessive quantifier syntax is an extension to the Perl 5.8 syntax.
< Jeffrey Friedl originated the idea (and the name) in the first edition of his
< book. Mike McCloskey liked it, so implemented it when he built Sun's Java
< package, and PCRE copied it from there. It ultimately found its way into Perl
< at release 5.10.
---
> Possessive quantifiers are always greedy; the setting of option `ungreedy` is
> ignored. They are a convenient notation for the simpler forms of an atomic
> group. However, there is no difference in the meaning of a possessive quantifier
> and the equivalent atomic group, but there can be a performance difference;
> possessive quantifiers are probably slightly faster.
> 
> The possessive quantifier syntax is an extension to the Perl 5.8 syntax. Jeffrey
> Friedl originated the idea (and the name) in the first edition of his book. Mike
> McCloskey liked it, so implemented it when he built the Sun Java package, and
> PCRE copied it from there. It ultimately found its way into Perl at release
> 5.10.
1851,1852c1924,1925
< pattern constructs. For example, the sequence A+B is treated as A++B because
< there is no point in backtracking into a sequence of A's when B must follow.
---
> pattern constructs. For example, the sequence A+B is treated as A++B, as there
> is no point in backtracking into a sequence of A:s when B must follow.
1855,1857c1928,1929
< be repeated an unlimited number of times, the use of an atomic group is the
< only way to avoid some failing matches taking a very long time indeed. The
< pattern
---
> be repeated an unlimited number of times, the use of an atomic group is the only
> way to avoid some failing matches taking a long time. The pattern
1860c1932,1933
< (\eD+|&lt;\ed+&gt;)*[!?]
---
> (\D+|<\d+>)*[!?]
> ```
1863,1864c1936,1937
< digits enclosed in &lt;&gt;, followed by either ! or ?. When it matches, it runs
< quickly. However, if it is applied to
---
> digits enclosed in `<>`, followed by `!` or `?`. When it matches, it runs quickly.
> However, if it is applied to
1867a1941
> ```
1869,1876c1943,1951
< it takes a long time before reporting failure. This is because the string can
< be divided between the internal \eD+ repeat and the external * repeat in a
< large number of ways, and all have to be tried. (The example uses [!?] rather
< than a single character at the end, because both PCRE and Perl have an
< optimization that allows for fast failure when a single character is used. They
< remember the last single character that is required for a match, and fail early
< if it is not present in the string.) If the pattern is changed so that it uses
< an atomic group, like this:
---
> it takes a long time before reporting failure. This is because the string can be
> divided between the internal `\D+` repeat and the external \* repeat in many
> ways, and all must be tried. (The example uses `[!?]` rather than a single
> character at the end, as both PCRE and Perl have an optimization that allows for
> fast failure when a single character is used. They remember the last single
> character that is required for a match, and fail early if it is not present in
> the string.) If the pattern is changed so that it uses an atomic group, like the
> following, sequences of non-digits cannot be broken, and failure happens
> quickly:
1879,1881c1954,1955
< ((?&gt;\eD+)|&lt;\ed+&gt;)*[!?]
< 
< sequences of non-digits cannot be broken, and failure happens quickly.
---
> ((?>\D+)|<\d+>)*[!?]
> ```
1883c1957
< <a name="back-references"></a>
---
> [](){: #sect16 }
1887,1899c1961,1972
< 
< Outside a character class, a backslash followed by a digit greater than 0 (and
< possibly further digits) is a back reference to a capturing subpattern earlier
< (that is, to its left) in the pattern, provided there have been that many
< previous capturing left parentheses.
< 
< However, if the decimal number following the backslash is less than 10, it is
< always taken as a back reference, and causes an error only if there are not
< that many capturing left parentheses in the entire pattern. In other words, the
< parentheses that are referenced need not be to the left of the reference for
< numbers less than 10. A "forward back reference" of this type can make sense
< when a repetition is involved and the subpattern to the right has participated
< in an earlier iteration.
---
> Outside a character class, a backslash followed by a digit > 0 (and possibly
> further digits) is a back reference to a capturing subpattern earlier (that is,
> to its left) in the pattern, provided there have been that many previous
> capturing left parentheses.
> 
> However, if the decimal number following the backslash is < 10, it is always
> taken as a back reference, and causes an error only if there are not that many
> capturing left parentheses in the entire pattern. That is, the parentheses that
> are referenced do need not be to the left of the reference for numbers < 10. A
> "forward back reference" of this type can make sense when a repetition is
> involved and the subpattern to the right has participated in an earlier
> iteration.
1902,1922c1975,1995
< whose number is 10 or more using this syntax because a sequence such as \e50 is
< interpreted as a character defined in octal. See the subsection entitled
< "Non-printing characters"
< above
< for further details of the handling of digits following a backslash. There is
< no such problem when named parentheses are used. A back reference to any
< subpattern is possible using named parentheses (see below).
< 
< Another way of avoiding the ambiguity inherent in the use of digits following a
< backslash is to use the \eg escape sequence. This escape must be followed by an
< unsigned number or a negative number, optionally enclosed in braces. These
< examples are all identical:
< 
< ```text
< (ring), \e1
< (ring), \eg1
< (ring), \eg{1}
< ```
< An unsigned number specifies an absolute reference without the ambiguity that
< is present in the older syntax. It is also useful when literal digits follow
< the reference. A negative number is a relative reference. Consider this
---
> whose number is 10 or more using this syntax, as a sequence such as `\50` is
> interpreted as a character defined in octal. For more details of the handling of
> digits following a backslash, see section
> [Non-Printing Characters](`m:re#non_printing_characters`) earlier. There is no
> such problem when named parentheses are used. A back reference to any subpattern
> is possible using named parentheses (see below).
> 
> Another way to avoid the ambiguity inherent in the use of digits following a
> backslash is to use the `\g` escape sequence. This escape must be followed by an
> unsigned number or a negative number, optionally enclosed in braces. The
> following examples are identical:
> 
> ```text
> (ring), \1
> (ring), \g1
> (ring), \g{1}
> ```
> 
> An unsigned number specifies an absolute reference without the ambiguity that is
> present in the older syntax. It is also useful when literal digits follow the
> reference. A negative number is a relative reference. Consider the following
1926c1999,2000
< (abc(def)ghi)\eg{-1}
---
> (abc(def)ghi)\g{-1}
> ```
1928,1930c2002,2004
< The sequence \eg{-1} is a reference to the most recently started capturing
< subpattern before \eg, that is, is it equivalent to \e2 in this example.
< Similarly, \eg{-2} would be equivalent to \e1. The use of relative references
---
> The sequence `\g{-1}` is a reference to the most recently started capturing
> subpattern before `\g`, that is, it is equivalent to `\2` in this example.
> Similarly, `\g{-2}` would be equivalent to `\1`. The use of relative references
1932c2006
< joining together fragments that contain references within themselves.
---
> joining fragments containing references within themselves.
1934,1938c2008,2012
< A back reference matches whatever actually matched the capturing subpattern in
< the current subject string, rather than anything matching the subpattern
< itself (see
< "Subpatterns as subroutines"
< below for a way of doing that). So the pattern
---
> A back reference matches whatever matched the capturing subpattern in the
> current subject string, rather than anything matching the subpattern itself
> (section [Subpattern as Subroutines](`m:re#sect21`) describes a way of doing
> that). So, the following pattern matches "sense and sensibility" and "response
> and responsibility", but not "sense and responsibility":
1941c2015,2016
< (sens|respons)e and \e1ibility
---
> (sens|respons)e and \1ibility
> ```
1943,1945c2018,2021
< matches "sense and sensibility" and "response and responsibility", but not
< "sense and responsibility". If caseful matching is in force at the time of the
< back reference, the case of letters is relevant. For example,
---
> If caseful matching is in force at the time of the back reference, the case of
> letters is relevant. For example, the following matches "rah rah" and "RAH RAH",
> but not "RAH rah", although the original capturing subpattern is matched
> caselessly:
1948,1951c2024,2025
< ((?i)rah)\es+\e1
< 
< matches "rah rah" and "RAH RAH", but not "RAH rah", even though the original
< capturing subpattern is matched caselessly.
---
> ((?i)rah)\s+\1
> ```
1953,1958c2027,2032
< There are several different ways of writing back references to named
< subpatterns. The .NET syntax \ek{name} and the Perl syntax \ek&lt;name&gt; or
< \ek'name' are supported, as is the Python syntax (?P=name). Perl 5.10's unified
< back reference syntax, in which \eg can be used for both numeric and named
< references, is also supported. We could rewrite the above example in any of
< the following ways:
---
> There are many different ways of writing back references to named subpatterns.
> The .NET syntax `\k{name}` and the Perl syntax `\k<name>` or `\k'name'` are
> supported, as is the Python syntax `(?P=name)`. The unified back reference
> syntax in Perl 5.10, in which `\g` can be used for both numeric and named
> references, is also supported. The previous example can be rewritten in the
> following ways:
1961,1964c2035,2038
< (?&lt;p1&gt;(?i)rah)\es+\ek&lt;p1&gt;
< (?'p1'(?i)rah)\es+\ek{p1}
< (?P&lt;p1&gt;(?i)rah)\es+(?P=p1)
< (?&lt;p1&gt;(?i)rah)\es+\eg{p1}
---
> (?<p1>(?i)rah)\s+\k<p1>
> (?'p1'(?i)rah)\s+\k{p1}
> (?P<p1>(?i)rah)\s+(?P=p1)
> (?<p1>(?i)rah)\s+\g{p1}
1966c2040,2041
< A subpattern that is referenced by name may appear in the pattern before or
---
> 
> A subpattern that is referenced by name can appear in the pattern before or
1969,1971c2044,2047
< There may be more than one back reference to the same subpattern. If a
< subpattern has not actually been used in a particular match, any back
< references to it always fail by default. For example, the pattern
---
> There can be more than one back reference to the same subpattern. If a
> subpattern has not been used in a particular match, any back references to it
> always fails. For example, the following pattern always fails if it starts to
> match "a" rather than "bc":
1974,1988c2050,2051
< (a|(bc))\e2
< 
< always fails if it starts to match "a" rather than "bc". However, if the
< PCRE_JAVASCRIPT_COMPAT option is set at compile time, a back reference to an
< unset value matches an empty string.
< 
< Because there may be many capturing parentheses in a pattern, all digits
< following a backslash are taken as part of a potential back reference number.
< If the pattern continues with a digit character, some delimiter must be used to
< terminate the back reference. If the PCRE_EXTENDED option is set, this can be
< white space. Otherwise, the \eg{ syntax or an empty comment (see
< "Comments"
< below) can be used.
< 
< <a name="recursive-back-references"></a>
---
> (a|(bc))\2
> ```
1990c2053,2058
< _Recursive back references_
---
> As there can be many capturing parentheses in a pattern, all digits following
> the backslash are taken as part of a potential back reference number. If the
> pattern continues with a digit character, some delimiter must be used to
> terminate the back reference. If option `extended` is set, this can be
> whitespace. Otherwise an empty comment (see section [Comments](`m:re#sect19`))
> can be used.
1991a2060
> _Recursive Back References_
1994,1996c2063,2066
< when the subpattern is first used, so, for example, (a\e1) never matches.
< However, such references can be useful inside repeated subpatterns. For
< example, the pattern
---
> when the subpattern is first used, so, for example, (`a\1`) never matches.
> However, such references can be useful inside repeated subpatterns. For example,
> the following pattern matches any number of "a"s and also "aba", "ababbaa", and
> so on:
1999,2006c2069,2076
< (a|b\e1)+
< 
< matches any number of "a"s and also "aba", "ababbaa" etc. At each iteration of
< the subpattern, the back reference matches the character string corresponding
< to the previous iteration. In order for this to work, the pattern must be such
< that the first iteration does not need to match the back reference. This can be
< done using alternation, as in the example above, or by a quantifier with a
< minimum of zero.
---
> (a|b\1)+
> ```
> 
> At each iteration of the subpattern, the back reference matches the character
> string corresponding to the previous iteration. In order for this to work, the
> pattern must be such that the first iteration does not need to match the back
> reference. This can be done using alternation, as in the example above, or by a
> quantifier with a minimum of zero.
2009,2012c2079,2080
< as an
< atomic group.
< Once the whole group has been matched, a subsequent matching failure cannot
< cause backtracking into the middle of the group.
---
> as an atomic group. Once the whole group has been matched, a subsequent matching
> failure cannot cause backtracking into the middle of the group.
2014c2082
< <a name="assertions"></a>
---
> [](){: #sect17 }
2018d2085
< 
2020,2027c2087,2094
< matching point that does not actually consume any characters. The simple
< assertions coded as \eb, \eB, \eA, \eG, \eZ, \ez, ^ and $ are described
< above.
< 
< More complicated assertions are coded as subpatterns. There are two kinds:
< those that look ahead of the current position in the subject string, and those
< that look behind it. An assertion subpattern is matched in the normal way,
< except that it does not cause the current matching position to be changed.
---
> matching point that does not consume any characters. The simple assertions coded
> as `\b`, `\B`, `\A`, `\G`, `\Z`, `\z`, `^`, and `$` are described in the previous
> sections.
> 
> More complicated assertions are coded as subpatterns. There are two kinds: those
> that look ahead of the current position in the subject string, and those that
> look behind it. An assertion subpattern is matched in the normal way, except
> that it does not cause the current matching position to be changed.
2032,2050c2099,2100
< capturing is carried out only for positive assertions. (Perl sometimes, but not
< always, does do capturing in negative assertions.)
< 
< WARNING: If a positive assertion containing one or more capturing subpatterns
< succeeds, but failure to match later in the pattern causes backtracking over
< this assertion, the captures within the assertion are reset only if no higher
< numbered captures are already set. This is, unfortunately, a fundamental
< limitation of the current implementation, and as PCRE1 is now in
< maintenance-only status, it is unlikely ever to change.
< 
< For compatibility with Perl, assertion subpatterns may be repeated; though
< it makes no sense to assert the same thing several times, the side effect of
< capturing parentheses may occasionally be useful. In practice, there only three
< cases:
< 
< (1) If the quantifier is {0}, the assertion is never obeyed during matching.
< However, it may contain internal capturing parenthesized groups that are called
< from elsewhere via the
< subroutine mechanism.
---
> capturing is done only for positive assertions. (Perl sometimes, but not always,
> performs capturing in negative assertions.)
2052,2065c2102,2128
< (2) If quantifier is {0,n} where n is greater than zero, it is treated as if it
< were {0,1}. At run time, the rest of the pattern match is tried with and
< without the assertion, the order depending on the greediness of the quantifier.
< 
< (3) If the minimum repetition is greater than zero, the quantifier is ignored.
< The assertion is obeyed just once when encountered during matching.
< 
< <a name="lookahead-assertions"></a>
< 
< _Lookahead assertions_
< 
< 
< Lookahead assertions start with (?= for positive assertions and (?! for
< negative assertions. For example,
---
> > #### Warning {: .warning }
> >
> > If a positive assertion containing one or more capturing subpatterns succeeds,
> > but failure to match later in the pattern causes backtracking over this
> > assertion, the captures within the assertion are reset only if no higher
> > numbered captures are already set. This is, unfortunately, a fundamental
> > limitation of the current implementation, and as PCRE1 is now in
> > maintenance-only status, it is unlikely ever to change.
> 
> For compatibility with Perl, assertion subpatterns can be repeated. However, it
> makes no sense to assert the same thing many times, the side effect of capturing
> parentheses can occasionally be useful. In practice, there are only three cases:
> 
> - If the quantifier is \{0\}, the assertion is never obeyed during matching.
>   However, it can contain internal capturing parenthesized groups that are
>   called from elsewhere through the subroutine mechanism.
> - If quantifier is \{0,n\}, where n > 0, it is treated as if it was \{0,1\}. At
>   runtime, the remaining pattern match is tried with and without the assertion,
>   the order depends on the greediness of the quantifier.
> - If the minimum repetition is > 0, the quantifier is ignored. The assertion is
>   obeyed only once when encountered during matching.
> 
> _Lookahead Assertions_
> 
> Lookahead assertions start with (?= for positive assertions and (?\! for
> negative assertions. For example, the following matches a word followed by a
> semicolon, but does not include the semicolon in the match:
2068c2131,2132
< \ew+(?=;)
---
> \w+(?=;)
> ```
2070,2071c2134
< matches a word followed by a semicolon, but does not include the semicolon in
< the match, and
---
> The following matches any occurrence of "foo" that is not followed by "bar":
2074a2138
> ```
2076,2077c2140
< matches any occurrence of "foo" that is not followed by "bar". Note that the
< apparently similar pattern
---
> Notice that the apparently similar pattern
2080a2144
> ```
2083,2085c2147,2149
< "foo"; it finds any occurrence of "bar" whatsoever, because the assertion
< (?!foo) is always true when the next three characters are "bar". A
< lookbehind assertion is needed to achieve the other effect.
---
> "foo". It finds any occurrence of "bar" whatsoever, as the assertion (?\!foo) is
> always true when the next three characters are "bar". A lookbehind assertion is
> needed to achieve the other effect.
2088,2092c2152,2154
< convenient way to do it is with (?!) because an empty string always matches, so
< an assertion that requires there not to be an empty string must always fail.
< The backtracking control verb (*FAIL) or (*F) is a synonym for (?!).
< 
< <a name="lookbehind-assertions"></a>
---
> convenient way to do it is with (?\!), as an empty string always matches. So, an
> assertion that requires there is not to be an empty string must always fail. The
> backtracking control verb (*FAIL) or (*F) is a synonym for (?\!).
2094c2156
< _Lookbehind assertions_
---
> _Lookbehind Assertions_
2096,2098c2158,2160
< 
< Lookbehind assertions start with (?&lt;= for positive assertions and (?&lt;! for
< negative assertions. For example,
---
> Lookbehind assertions start with (?<= for positive assertions and (?<\! for
> negative assertions. For example, the following finds an occurrence of "bar"
> that is not preceded by "foo":
2101c2163,2164
< (?&lt;!foo)bar
---
> (?<!foo)bar
> ```
2103,2106c2166,2169
< does find an occurrence of "bar" that is not preceded by "foo". The contents of
< a lookbehind assertion are restricted such that all the strings it matches must
< have a fixed length. However, if there are several top-level alternatives, they
< do not all have to have the same fixed length. Thus
---
> The contents of a lookbehind assertion are restricted such that all the strings
> it matches must have a fixed length. However, if there are many top-level
> alternatives, they do not all have to have the same fixed length. Thus, the
> following is permitted:
2109c2172,2173
< (?&lt;=bullock|donkey)
---
> (?<=bullock|donkey)
> ```
2111c2175
< is permitted, but
---
> The following causes an error at compile time:
2114c2178,2179
< (?&lt;!dogs?|cats?)
---
> (?<!dogs?|cats?)
> ```
2116,2119c2181,2185
< causes an error at compile time. Branches that match different length strings
< are permitted only at the top level of a lookbehind assertion. This is an
< extension compared with Perl, which requires all branches to match the same
< length of string. An assertion such as
---
> Branches that match different length strings are permitted only at the top-level
> of a lookbehind assertion. This is an extension compared with Perl, which
> requires all branches to match the same length of string. An assertion such as
> the following is not permitted, as its single top-level branch can match two
> different lengths:
2122c2188,2189
< (?&lt;=ab(c|de))
---
> (?<=ab(c|de))
> ```
2124,2126c2191
< is not permitted, because its single top-level branch can match two different
< lengths, but it is acceptable to PCRE if rewritten to use two top-level
< branches:
---
> However, it is acceptable to PCRE if rewritten to use two top-level branches:
2129c2194,2195
< (?&lt;=abc|abde)
---
> (?<=abc|abde)
> ```
2131,2134c2197,2198
< In some cases, the escape sequence \eK
< (see above)
< can be used instead of a lookbehind assertion to get round the fixed-length
< restriction.
---
> Sometimes the escape sequence `\K` (see above) can be used instead of a
> lookbehind assertion to get round the fixed-length restriction.
2136,2139c2200,2203
< The implementation of lookbehind assertions is, for each alternative, to
< temporarily move the current position back by the fixed length and then try to
< match. If there are insufficient characters before the current position, the
< assertion fails.
---
> The implementation of lookbehind assertions is, for each alternative, to move
> the current position back temporarily by the fixed length and then try to match.
> If there are insufficient characters before the current position, the assertion
> fails.
2141,2145c2205,2208
< In a UTF mode, PCRE does not allow the \eC escape (which matches a single data
< unit even in a UTF mode) to appear in lookbehind assertions, because it makes
< it impossible to calculate the length of the lookbehind. The \eX and \eR
< escapes, which can match different numbers of data units, are also not
< permitted.
---
> In a UTF mode, PCRE does not allow the `\C` escape (which matches a single data
> unit even in a UTF mode) to appear in lookbehind assertions, as it makes it
> impossible to calculate the length of the lookbehind. The `\X` and `\R` escapes,
> which can match different numbers of data units, are not permitted either.
2147,2150c2210,2211
< "Subroutine"
< calls (see below) such as (?2) or (?&X) are permitted in lookbehinds, as long
< as the subpattern matches a fixed-length string.
< Recursion,
---
> "Subroutine" calls (see below), such as (?2) or (?&X), are permitted in
> lookbehinds, as long as the subpattern matches a fixed-length string. Recursion,
2153,2155c2214,2217
< Possessive quantifiers can be used in conjunction with lookbehind assertions to
< specify efficient matching of fixed-length strings at the end of subject
< strings. Consider a simple pattern such as
---
> Possessive quantifiers can be used with lookbehind assertions to specify
> efficient matching of fixed-length strings at the end of subject strings.
> Consider the following simple pattern when applied to a long string that does
> not match:
2158a2221
> ```
2160,2162c2223,2225
< when applied to a long string that does not match. Because matching proceeds
< from left to right, PCRE will look for each "a" in the subject and then see if
< what follows matches the rest of the pattern. If the pattern is specified as
---
> As matching proceeds from left to right, PCRE looks for each "a" in the subject
> and then sees if what follows matches the remaining pattern. If the pattern is
> specified as
2165a2229
> ```
2167c2231
< the initial .* matches the entire string at first, but when this fails (because
---
> the initial .\* matches the entire string at first. However, when this fails (as
2174c2238,2239
< ^.*+(?&lt;=abcd)
---
> ^.*+(?<=abcd)
> ```
2176c2241
< there can be no backtracking for the .*+ item; it can match only the entire
---
> there can be no backtracking for the .\*+ item; it can match only the entire
2181c2246
< <a name="using-multiple-assertions"></a>
---
> _Using Multiple Assertions_
2183,2186c2248,2249
< _Using multiple assertions_
< 
< 
< Several assertions (of any sort) may occur in succession. For example,
---
> Many assertions (of any sort) can occur in succession. For example, the
> following matches "foo" preceded by three digits that are not "999":
2189c2252,2253
< (?&lt;=\ed{3})(?&lt;!999)foo
---
> (?<=\d{3})(?<!999)foo
> ```
2191,2195c2255,2258
< matches "foo" preceded by three digits that are not "999". Notice that each of
< the assertions is applied independently at the same point in the subject
< string. First there is a check that the previous three characters are all
< digits, and then there is a check that the same three characters are not "999".
< This pattern does _not_ match "foo" preceded by six characters, the first
---
> Notice that each of the assertions is applied independently at the same point in
> the subject string. First there is a check that the previous three characters
> are all digits, and then there is a check that the same three characters are not
> "999". This pattern does _not_ match "foo" preceded by six characters, the first
2197c2260
< doesn't match "123abcfoo". A pattern to do that is
---
> does not match "123abcfoo". A pattern to do that is the following:
2200c2263,2264
< (?&lt;=\ed{3}...)(?&lt;!999)foo
---
> (?<=\d{3}...)(?<!999)foo
> ```
2202,2203c2266,2267
< This time the first assertion looks at the preceding six characters, checking
< that the first three are digits, and then the second assertion checks that the
---
> This time the first assertion looks at the preceding six characters, checks that
> the first three are digits, and then the second assertion checks that the
2206c2270,2272
< Assertions can be nested in any combination. For example,
---
> Assertions can be nested in any combination. For example, the following matches
> an occurrence of "baz" that is preceded by "bar", which in turn is not preceded
> by "foo":
2209c2275,2276
< (?&lt;=(?&lt;!foo)bar)baz
---
> (?<=(?<!foo)bar)baz
> ```
2211,2212c2278,2279
< matches an occurrence of "baz" that is preceded by "bar" which in turn is not
< preceded by "foo", while
---
> The following pattern matches "foo" preceded by three digits and any three
> characters that are not "999":
2215,2218c2282,2283
< (?&lt;=\ed{3}(?!999)...)foo
< 
< is another pattern that matches "foo" preceded by three digits and any three
< characters that are not "999".
---
> (?<=\d{3}(?!999)...)foo
> ```
2220c2285
< <a name="conditional-subpatterns"></a>
---
> [](){: #sect18 }
2224,2228c2289,2292
< 
< It is possible to cause the matching process to obey a subpattern
< conditionally or to choose between two alternative subpatterns, depending on
< the result of an assertion, or whether a specific capturing subpattern has
< already been matched. The two possible forms of conditional subpattern are:
---
> It is possible to cause the matching process to obey a subpattern conditionally
> or to choose between two alternative subpatterns, depending on the result of an
> assertion, or whether a specific capturing subpattern has already been matched.
> The following are the two possible forms of conditional subpattern:
2234,2240c2298,2304
< If the condition is satisfied, the yes-pattern is used; otherwise the
< no-pattern (if present) is used. If there are more than two alternatives in the
< subpattern, a compile-time error occurs. Each of the two alternatives may
< itself contain nested subpatterns of any form, including conditional
< subpatterns; the restriction to two alternatives applies only at the level of
< the condition. This pattern fragment is an example where the alternatives are
< complex:
---
> 
> If the condition is satisfied, the yes-pattern is used, otherwise the no-pattern
> (if present). If more than two alternatives exist in the subpattern, a
> compile-time error occurs. Each of the two alternatives can itself contain
> nested subpatterns of any form, including conditional subpatterns; the
> restriction to two alternatives applies only at the level of the condition. The
> following pattern fragment is an example where the alternatives are complex:
2244c2308
< 
---
> ```
2249,2252c2313
< <a name="checking-for-a-used-subpattern-by-number"></a>
< 
< _Checking for a used subpattern by number_
< 
---
> _Checking for a Used Subpattern By Number_
2256,2281c2317,2343
< matched. If there is more than one capturing subpattern with the same number
< (see the earlier
< section about duplicate subpattern numbers),
< the condition is true if any of them have matched. An alternative notation is
< to precede the digits with a plus or minus sign. In this case, the subpattern
< number is relative rather than absolute. The most recently opened parentheses
< can be referenced by (?(-1), the next most recent by (?(-2), and so on. Inside
< loops it can also make sense to refer to subsequent groups. The next
< parentheses to be opened can be referenced as (?(+1), and so on. (The value
< zero in any of these forms is not used; it provokes a compile-time error.)
< 
< Consider the following pattern, which contains non-significant white space to
< make it more readable (assume the PCRE_EXTENDED option) and to divide it into
< three parts for ease of discussion:
< 
< - **`( \e( )?`** - [^()]+    (?(1) \e) )
< 
< The first part matches an optional opening parenthesis, and if that
< character is present, sets it as the first captured substring. The second part
< matches one or more characters that are not parentheses. The third part is a
< conditional subpattern that tests whether or not the first set of parentheses
< matched. If they did, that is, if subject started with an opening parenthesis,
< the condition is true, and so the yes-pattern is executed and a closing
< parenthesis is required. Otherwise, since no-pattern is not present, the
< subpattern matches nothing. In other words, this pattern matches a sequence of
< non-parentheses, optionally enclosed in parentheses.
---
> matched. If more than one capturing subpattern with the same number exists (see
> section [Duplicate Subpattern Numbers](`m:re#sect12`) earlier), the condition is
> true if any of them have matched. An alternative notation is to precede the
> digits with a plus or minus sign. In this case, the subpattern number is
> relative rather than absolute. The most recently opened parentheses can be
> referenced by (?(-1), the next most recent by (?(-2), and so on. Inside loops,
> it can also make sense to refer to subsequent groups. The next parentheses to be
> opened can be referenced as (?(+1), and so on. (The value zero in any of these
> forms is not used; it provokes a compile-time error.)
> 
> Consider the following pattern, which contains non-significant whitespace to
> make it more readable (assume option `extended`) and to divide it into three
> parts for ease of discussion:
> 
> ```text
> ( \( )?    [^()]+    (?(1) \) )
> ```
> 
> The first part matches an optional opening parenthesis, and if that character is
> present, sets it as the first captured substring. The second part matches one or
> more characters that are not parentheses. The third part is a conditional
> subpattern that tests whether the first set of parentheses matched or not. If
> they did, that is, if subject started with an opening parenthesis, the condition
> is true, and so the yes-pattern is executed and a closing parenthesis is
> required. Otherwise, as no-pattern is not present, the subpattern matches
> nothing. That is, this pattern matches a sequence of non-parentheses, optionally
> enclosed in parentheses.
2283,2284c2345
< If you were embedding this pattern in a larger one, you could use a relative
< reference:
---
> If this pattern is embedded in a larger one, a relative reference can be used:
2286c2347,2349
< - **`...other stuff... ( \e( )?`** - [^()]+    (?(-1) \e) ) ...
---
> ```text
> ...other stuff... ( \( )?    [^()]+    (?(-1) \) ) ...
> ```
2290,2293c2353
< <a name="checking-for-a-used-subpattern-by-name"></a>
< 
< _Checking for a used subpattern by name_
< 
---
> _Checking for a Used Subpattern By Name_
2295c2355
< Perl uses the syntax (?(&lt;name&gt;)...) or (?('name')...) to test for a used
---
> Perl uses the syntax (?(<name>)...) or (?('name')...) to test for a used
2299c2359
< Rewriting the above example to use a named subpattern gives this:
---
> Rewriting the previous example to use a named subpattern gives:
2301,2307c2361,2363
< - **`(?&lt;OPEN&gt; \e( )?`** - [^()]+    (?(&lt;OPEN&gt;) \e) )
< 
< If the name used in a condition of this kind is a duplicate, the test is
< applied to all subpatterns of the same name, and is true if any one of them has
< matched.
< 
< <a name="checking-for-pattern-recursion"></a>
---
> ```text
> (?<OPEN> \( )?    [^()]+    (?(<OPEN>) \) )
> ```
2309c2365,2366
< _Checking for pattern recursion_
---
> If the name used in a condition of this kind is a duplicate, the test is applied
> to all subpatterns of the same name, and is true if any one of them has matched.
2310a2368
> _Checking for Pattern Recursion_
2313,2315c2371,2373
< the condition is true if a recursive call to the whole pattern or any
< subpattern has been made. If digits or a name preceded by ampersand follow the
< letter R, for example:
---
> the condition is true if a recursive call to the whole pattern or any subpattern
> has been made. If digits or a name preceded by ampersand follow the letter R,
> for example:
2318a2377
> ```
2326,2330c2385,2386
< At "top level", all these recursion test conditions are false.
< The syntax for recursive patterns
< is described below.
< 
< <a name="defining-subpatterns-for-use-by-reference-only"></a>
---
> At "top-level", all these recursion test conditions are false. The syntax for
> recursive patterns is described below.
2332c2388
< _Defining subpatterns for use by reference only_
---
> _Defining Subpatterns for Use By Reference Only_
2333a2390
> [](){: #defining_subpatterns }
2336c2393
< name DEFINE, the condition is always false. In this case, there may be only one
---
> name DEFINE, the condition is always false. In this case, there can be only one
2338,2354c2395,2398
< point in the pattern; the idea of DEFINE is that it can be used to define
< subroutines that can be referenced from elsewhere. (The use of
< subroutines
< is described below.) For example, a pattern to match an IPv4 address such as
< "192.168.23.245" could be written like this (ignore white space and line
< breaks):
< 
< ```text
< (?(DEFINE) (?&lt;byte&gt; 2[0-4]\ed | 25[0-5] | 1\ed\ed | [1-9]?\ed) )
< \eb (?&byte) (\e.(?&byte)){3} \eb
< ```
< The first part of the pattern is a DEFINE group inside which a another group
< named "byte" is defined. This matches an individual component of an IPv4
< address (a number less than 256). When matching takes place, this part of the
< pattern is skipped because DEFINE acts like a false condition. The rest of the
< pattern uses references to the named group to match the four dot-separated
< components of an IPv4 address, insisting on a word boundary at each end.
---
> point in the pattern. The idea of DEFINE is that it can be used to define
> "subroutines" that can be referenced from elsewhere. (The use of subroutines is
> described below.) For example, a pattern to match an IPv4 address, such as
> "192.168.23.245", can be written like this (ignore whitespace and line breaks):
2356c2400,2402
< <a name="assertion-conditions"></a>
---
> ```text
> (?(DEFINE) (?<byte> 2[0-4]\d | 25[0-5] | 1\d\d | [1-9]?\d) ) \b (?&byte) (\.(?&byte)){3} \b
> ```
2358c2404,2409
< _Assertion conditions_
---
> The first part of the pattern is a DEFINE group inside which is a another group
> named "byte" is defined. This matches an individual component of an IPv4 address
> (a number < 256). When matching takes place, this part of the pattern is
> skipped, as DEFINE acts like a false condition. The remaining pattern uses
> references to the named group to match the four dot-separated components of an
> IPv4 address, insisting on a word boundary at each end.
2359a2411
> _Assertion Conditions_
2362,2363c2414,2415
< This may be a positive or negative lookahead or lookbehind assertion. Consider
< this pattern, again containing non-significant white space, and with the two
---
> This can be a positive or negative lookahead or lookbehind assertion. Consider
> the following pattern, containing non-significant whitespace, and with the two
2368c2420
< \ed{2}-[a-z]{3}-\ed{2}  |  \ed{2}-\ed{2}-\ed{2} )
---
> \d{2}-[a-z]{3}-\d{2}  |  \d{2}-\d{2}-\d{2} )
2369a2422
> 
2371,2375c2424,2428
< sequence of non-letters followed by a letter. In other words, it tests for the
< presence of at least one letter in the subject. If a letter is found, the
< subject is matched against the first alternative; otherwise it is matched
< against the second. This pattern matches strings in one of the two forms
< dd-aaa-dd or dd-dd-dd, where aaa are letters and dd are digits.
---
> sequence of non-letters followed by a letter. That is, it tests for the presence
> of at least one letter in the subject. If a letter is found, the subject is
> matched against the first alternative, otherwise it is matched against the
> second. This pattern matches strings in one of the two forms dd-aaa-dd or
> dd-dd-dd, where aaa are letters and dd are digits.
2377c2430
< <a name="comments"></a>
---
> [](){: #sect19 }
2381,2386c2434,2438
< 
< There are two ways of including comments in patterns that are processed by
< PCRE. In both cases, the start of the comment must not be in a character class,
< nor in the middle of any other sequence of related characters such as (?: or a
< subpattern name or number. The characters that make up a comment play no part
< in the pattern matching.
---
> There are two ways to include comments in patterns that are processed by PCRE.
> In both cases, the start of the comment must not be in a character class, or in
> the middle of any other sequence of related characters such as (?: or a
> subpattern name or number. The characters that make up a comment play no part in
> the pattern matching.
2389,2391c2441,2443
< closing parenthesis. Nested parentheses are not permitted. If the PCRE_EXTENDED
< option is set, an unescaped # character also introduces a comment, which in
< this case continues to immediately after the next newline character or
---
> closing parenthesis. Nested parentheses are not permitted. If option
> PCRE_EXTENDED is set, an unescaped # character also introduces a comment, which
> in this case continues to immediately after the next newline character or
2394,2407c2446,2447
< sequence at the start of the pattern, as described in the section entitled
< "Newline conventions"
< above. Note that the end of this type of comment is a literal newline sequence
< in the pattern; escape sequences that happen to represent a newline do not
< count. For example, consider this pattern when PCRE_EXTENDED is set, and the
< default newline convention is in force:
< 
< ```text
< abc #comment \en still comment
< 
< On encountering the # character, `pcre\_compile()` skips along, looking for
< a newline in the pattern. The sequence \en is still literal at this stage, so
< it does not terminate the comment. Only an actual character with the code value
< 0x0a (the default newline) does so.
---
> sequence at the start of the pattern, as described in section
> [Newline Conventions](`m:re#newline_conventions`) earlier.
2409c2449,2452
< <a name="recursive-patterns"></a>
---
> Notice that the end of this type of comment is a literal newline sequence in the
> pattern; escape sequences that happen to represent a newline do not count. For
> example, consider the following pattern when `extended` is set, and the default
> newline convention is in force:
2411c2454,2456
< ## Recursive Patterns
---
> ```text
> abc #comment \n still comment
> ```
2412a2458,2461
> On encountering character #, `pcre_compile()` skips along, looking for a newline
> in the pattern. The sequence `\n` is still literal at this stage, so it does not
> terminate the comment. Only a character with code value 0x0a (the default
> newline) does so.
2414,2417c2463,2470
< Consider the problem of matching a string in parentheses, allowing for
< unlimited nested parentheses. Without the use of recursion, the best that can
< be done is to use a pattern that matches up to some fixed depth of nesting. It
< is not possible to handle an arbitrary nesting depth.
---
> [](){: #sect20 }
> 
> ## Recursive Patterns
> 
> Consider the problem of matching a string in parentheses, allowing for unlimited
> nested parentheses. Without the use of recursion, the best that can be done is
> to use a pattern that matches up to some fixed depth of nesting. It is not
> possible to handle an arbitrary nesting depth.
2420,2423c2473,2476
< recurse (amongst other things). It does this by interpolating Perl code in the
< expression at run time, and the code can refer to the expression itself. A Perl
< pattern using code interpolation to solve the parentheses problem can be
< created like this:
---
> recurse (among other things). It does this by interpolating Perl code in the
> expression at runtime, and the code can refer to the expression itself. A Perl
> pattern using code interpolation to solve the parentheses problem can be created
> like this:
2426c2479,2480
< $re = qr{\e( (?: (?&gt;[^()]+) | (?p{$re}) )* \e)}x;
---
> $re = qr{\( (?: (?>[^()]+) | (?p{$re}) )* \)}x;
> ```
2428c2482
< The (?p{...}) item interpolates Perl code at run time, and in this case refers
---
> Item (?p\{...\}) interpolates Perl code at runtime, and in this case refers
2432,2441c2486,2488
< supports special syntax for recursion of the entire pattern, and also for
< individual subpattern recursion. After its introduction in PCRE and Python,
< this kind of recursion was subsequently introduced into Perl at release 5.10.
< 
< A special item that consists of (? followed by a number greater than zero and a
< closing parenthesis is a recursive subroutine call of the subpattern of the
< given number, provided that it occurs inside that subpattern. (If not, it is a
< non-recursive subroutine
< call, which is described in the next section.) The special item (?R) or (?0) is
< a recursive call of the entire regular expression.
---
> supports special syntax for recursion of the entire pattern, and for individual
> subpattern recursion. After its introduction in PCRE and Python, this kind of
> recursion was later introduced into Perl at release 5.10.
2443,2444c2490,2497
< This PCRE pattern solves the nested parentheses problem (assume the
< PCRE_EXTENDED option is set so that white space is ignored):
---
> A special item that consists of (? followed by a number > 0 and a closing
> parenthesis is a recursive subroutine call of the subpattern of the given
> number, if it occurs inside that subpattern. (If not, it is a non-recursive
> subroutine call, which is described in the next section.) The special item (?R)
> or (?0) is a recursive call of the entire regular expression.
> 
> This PCRE pattern solves the nested parentheses problem (assume that option
> `extended` is set so that whitespace is ignored):
2447c2500,2501
< \e( ( [^()]++ | (?R) )* \e)
---
> \( ( [^()]++ | (?R) )* \)
> ```
2450c2504
< substrings which can either be a sequence of non-parentheses, or a recursive
---
> substrings, which can either be a sequence of non-parentheses or a recursive
2452,2453c2506,2507
< Finally there is a closing parenthesis. Note the use of a possessive quantifier
< to avoid backtracking into sequences of non-parentheses.
---
> Finally there is a closing parenthesis. Notice the use of a possessive
> quantifier to avoid backtracking into sequences of non-parentheses.
2455,2456c2509,2510
< If this were part of a larger pattern, you would not want to recurse the entire
< pattern, so instead you could use this:
---
> If this was part of a larger pattern, you would not want to recurse the entire
> pattern, so instead you can use:
2459c2513,2514
< ( \e( ( [^()]++ | (?1) )* \e) )
---
> ( \( ( [^()]++ | (?1) )* \) )
> ```
2461,2462c2516,2517
< We have put the pattern into parentheses, and caused the recursion to refer to
< them instead of the whole pattern.
---
> The pattern is here within parentheses so that the recursion refers to them
> instead of the whole pattern.
2464,2468c2519,2523
< In a larger pattern, keeping track of parenthesis numbers can be tricky. This
< is made easier by the use of relative references. Instead of (?1) in the
< pattern above you can write (?-2) to refer to the second most recently opened
< parentheses preceding the recursion. In other words, a negative number counts
< capturing parentheses leftwards from the point at which it is encountered.
---
> In a larger pattern, keeping track of parenthesis numbers can be tricky. This is
> made easier by the use of relative references. Instead of (?1) in the pattern
> above, you can write (?-2) to refer to the second most recently opened
> parentheses preceding the recursion. That is, a negative number counts capturing
> parentheses leftwards from the point at which it is encountered.
2470,2474c2525,2528
< It is also possible to refer to subsequently opened parentheses, by writing
< references such as (?+2). However, these cannot be recursive because the
< reference is not inside the parentheses that are referenced. They are always
< non-recursive subroutine
< calls, as described in the next section.
---
> It is also possible to refer to later opened parentheses, by writing references
> such as (?+2). However, these cannot be recursive, as the reference is not
> inside the parentheses that are referenced. They are always non-recursive
> subroutine calls, as described in the next section.
2476,2478c2530,2532
< An alternative approach is to use named parentheses instead. The Perl syntax
< for this is (?&name); PCRE's earlier syntax (?P&gt;name) is also supported. We
< could rewrite the above example as follows:
---
> An alternative approach is to use named parentheses instead. The Perl syntax for
> this is (?&name). The earlier PCRE syntax (?P>name) is also supported. We can
> rewrite the above example as follows:
2481c2535,2536
< (?&lt;pn&gt; \e( ( [^()]++ | (?&pn) )* \e) )
---
> (?<pn> \( ( [^()]++ | (?&pn) )* \) )
> ```
2486,2489c2541,2544
< This particular example pattern that we have been looking at contains nested
< unlimited repeats, and so the use of a possessive quantifier for matching
< strings of non-parentheses is important when applying the pattern to strings
< that do not match. For example, when this pattern is applied to
---
> This particular example pattern that we have studied contains nested unlimited
> repeats, and so the use of a possessive quantifier for matching strings of
> non-parentheses is important when applying the pattern to strings that do not
> match. For example, when this pattern is applied to
2492a2548
> ```
2494,2503c2550,2556
< it yields "no match" quickly. However, if a possessive quantifier is not used,
< the match runs for a very long time indeed because there are so many different
< ways the + and * repeats can carve up the subject, and all have to be tested
< before failure can be reported.
< 
< At the end of a match, the values of capturing parentheses are those from
< the outermost level. If you want to obtain intermediate values, a callout
< function can be used (see below and the
< `pcrecallout`
< documentation). If the pattern above is matched against
---
> it gives "no match" quickly. However, if a possessive quantifier is not used,
> the match runs for a long time, as there are so many different ways the + and \*
> repeats can carve up the subject, and all must be tested before failure can be
> reported.
> 
> At the end of a match, the values of capturing parentheses are those from the
> outermost level. If the pattern above is matched against
2506a2560
> ```
2508,2510c2562,2564
< the value for the inner capturing parentheses (numbered 2) is "ef", which is
< the last value taken on at the top level. If a capturing subpattern is not
< matched at the top level, its final captured value is unset, even if it was
---
> the value for the inner capturing parentheses (numbered 2) is "ef", which is the
> last value taken on at the top-level. If a capturing subpattern is not matched
> at the top level, its final captured value is unset, even if it was
2513,2519c2567,2568
< If there are more than 15 capturing parentheses in a pattern, PCRE has to
< obtain extra memory to store data during a recursion, which it does by using
< `pcre\_malloc`, freeing it via `pcre\_free` afterwards. If no memory can
< be obtained, the match fails with the PCRE_ERROR_NOMEMORY error.
< 
< Do not confuse the (?R) item with the condition (R), which tests for recursion.
< Consider this pattern, which matches text in angle brackets, allowing for
---
> Do not confuse item (?R) with condition (R), which tests for recursion. Consider
> the following pattern, which matches text in angle brackets, allowing for
2521c2570
< recursing), whereas any characters are permitted at the outer level.
---
> recursing), while any characters are permitted at the outer level.
2524,2530c2573,2574
< &lt; (?: (?(R) \ed++  | [^&lt;&gt;]*+) | (?R)) * &gt;
< 
< In this pattern, (?(R) is the start of a conditional subpattern, with two
< different alternatives for the recursive and non-recursive cases. The (?R) item
< is the actual recursive call.
< 
< <a name="differences-in-recursion-processing-between-pcre-and-perl"></a>
---
> < (?: (?(R) \d++  | [^<>]*+) | (?R)) * >
> ```
2532c2576,2578
< _Differences in recursion processing between PCRE and Perl_
---
> Here (?(R) is the start of a conditional subpattern, with two different
> alternatives for the recursive and non-recursive cases. Item (?R) is the actual
> recursive call.
2533a2580
> _Differences in Recursion Processing between PCRE and Perl_
2536,2538c2583,2585
< (like Python, but unlike Perl), a recursive subpattern call is always treated
< as an atomic group. That is, once it has matched some of the subject string, it
< is never re-entered, even if it contains untried alternatives and there is a
---
> (like Python, but unlike Perl), a recursive subpattern call is always treated as
> an atomic group. That is, once it has matched some of the subject string, it is
> never re-entered, even if it contains untried alternatives and there is a
2540,2541c2587,2588
< which purports to match a palindromic string that contains an odd number of
< characters (for example, "a", "aba", "abcba", "abcdcba"):
---
> which means to match a palindromic string containing an odd number of characters
> (for example, "a", "aba", "abcba", "abcdcba"):
2544c2591,2592
< ^(.|(.)(?1)\e2)$
---
> ^(.|(.)(?1)\2)$
> ```
2547,2562c2595,2610
< characters surrounding a sub-palindrome. In Perl, this pattern works; in PCRE
< it does not if the pattern is longer than three characters. Consider the
< subject string "abcba":
< 
< At the top level, the first character is matched, but as it is not at the end
< of the string, the first alternative fails; the second alternative is taken
< and the recursion kicks in. The recursive call to subpattern 1 successfully
< matches the next character ("b"). (Note that the beginning and end of line
< tests are not part of the recursion).
< 
< Back at the top level, the next character ("c") is compared with what
< subpattern 2 matched, which was "a". This fails. Because the recursion is
< treated as an atomic group, there are now no backtracking points, and so the
< entire match fails. (Perl is able, at this point, to re-enter the recursion and
< try the second alternative.) However, if the pattern is written with the
< alternatives in the other order, things are different:
---
> characters surrounding a subpalindrome. In Perl, this pattern works; in PCRE it
> does not work if the pattern is longer than three characters. Consider the
> subject string "abcba".
> 
> At the top level, the first character is matched, but as it is not at the end of
> the string, the first alternative fails, the second alternative is taken, and
> the recursion kicks in. The recursive call to subpattern 1 successfully matches
> the next character ("b"). (Notice that the beginning and end of line tests are
> not part of the recursion.)
> 
> Back at the top level, the next character ("c") is compared with what subpattern
> 2 matched, which was "a". This fails. As the recursion is treated as an atomic
> group, there are now no backtracking points, and so the entire match fails.
> (Perl can now re-enter the recursion and try the second alternative.) However,
> if the pattern is written with the alternatives in the other order, things are
> different:
2565c2613,2614
< ^((.)(?1)\e2|.)$
---
> ^((.)(?1)\2|.)$
> ```
2569,2571c2618,2620
< time we do have another alternative to try at the higher level. That is the big
< difference: in the previous case the remaining alternative is at a deeper
< recursion level, which PCRE cannot use.
---
> time we have another alternative to try at the higher level. That is the
> significant difference: in the previous case the remaining alternative is at a
> deeper recursion level, which PCRE cannot use.
2573,2575c2622,2623
< To change the pattern so that it matches all palindromic strings, not just
< those with an odd number of characters, it is tempting to change the pattern to
< this:
---
> To change the pattern so that it matches all palindromic strings, not only those
> with an odd number of characters, it is tempting to change the pattern to this:
2578c2626,2627
< ^((.)(?1)\e2|.?)$
---
> ^((.)(?1)\2|.?)$
> ```
2581,2583c2630,2632
< deeper recursion has matched a single character, it cannot be entered again in
< order to match an empty string. The solution is to separate the two cases, and
< write out the odd and even cases as alternatives at the higher level:
---
> deeper recursion has matched a single character, it cannot be entered again to
> match an empty string. The solution is to separate the two cases, and write out
> the odd and even cases as alternatives at the higher level:
2586c2635,2636
< ^(?:((.)(?1)\e2|)|((.)(?3)\e4|.))
---
> ^(?:((.)(?1)\2|)|((.)(?3)\4|.))
> ```
2588,2589c2638,2639
< If you want to match typical palindromic phrases, the pattern has to ignore all
< non-word characters, which can be done like this:
---
> If you want to match typical palindromic phrases, the pattern must ignore all
> non-word characters, which can be done as follows:
2592c2642,2643
< ^\eW*+(?:((.)\eW*+(?1)\eW*+\e2|)|((.)\eW*+(?3)\eW*+\e4|\eW*+.\eW*+))\eW*+$
---
> ^\W*+(?:((.)\W*+(?1)\W*+\2|)|((.)\W*+(?3)\W*+\4|\W*+.\W*+))\W*+$
> ```
2594,2599c2645,2650
< If run with the PCRE_CASELESS option, this pattern matches phrases such as "A
< man, a plan, a canal: Panama!" and it works well in both PCRE and Perl. Note
< the use of the possessive quantifier *+ to avoid backtracking into sequences of
< non-word characters. Without this, PCRE takes a great deal longer (ten times or
< more) to match typical phrases, and Perl takes so long that you think it has
< gone into a loop.
---
> If run with option `caseless`, this pattern matches phrases such as "A man, a
> plan, a canal: Panama\!" and it works well in both PCRE and Perl. Notice the use
> of the possessive quantifier \*+ to avoid backtracking into sequences of
> non-word characters. Without this, PCRE takes much longer (10 times or more) to
> match typical phrases, and Perl takes so long that you think it has gone into a
> loop.
2601,2606c2652,2659
< `WARNING`: The palindrome-matching patterns above work only if the subject
< string does not start with a palindrome that is shorter than the entire string.
< For example, although "abcba" is correctly matched, if the subject is "ababa",
< PCRE finds the palindrome "aba" at the start, then fails at top level because
< the end of the string does not follow. Once again, it cannot jump back into the
< recursion to try other alternatives, so the entire match fails.
---
> > #### Note {: .info }
> >
> > The palindrome-matching patterns above work only if the subject string does
> > not start with a palindrome that is shorter than the entire string. For
> > example, although "abcba" is correctly matched, if the subject is "ababa",
> > PCRE finds palindrome "aba" at the start, and then fails at top level, as the
> > end of the string does not follow. Once again, it cannot jump back into the
> > recursion to try other alternatives, so the entire match fails.
2608,2609c2661,2662
< The second way in which PCRE and Perl differ in their recursion processing is
< in the handling of captured values. In Perl, when a subpattern is called
---
> The second way in which PCRE and Perl differ in their recursion processing is in
> the handling of captured values. In Perl, when a subpattern is called
2611,2612c2664,2665
< values that were captured outside the recursion, whereas in PCRE these values
< can be referenced. Consider this pattern:
---
> values that were captured outside the recursion. In PCRE these values can be
> referenced. Consider the following pattern:
2615c2668,2669
< ^(.)(\e1|a(?2))
---
> ^(.)(\1|a(?2))
> ```
2617,2622c2671,2675
< In PCRE, this pattern matches "bab". The first capturing parentheses match "b",
< then in the second group, when the back reference \e1 fails to match "b", the
< second alternative matches "a" and then recurses. In the recursion, \e1 does
< now match "b" and so the whole match succeeds. In Perl, the pattern fails to
< match because inside the recursive call \e1 cannot access the externally set
< value.
---
> In PCRE, it matches "bab". The first capturing parentheses match "b", then in
> the second group, when the back reference `\1` fails to match "b", the second
> alternative matches "a", and then recurses. In the recursion, `\1` does now match
> "b" and so the whole match succeeds. In Perl, the pattern fails to match because
> inside the recursive call `\1` cannot access the externally set value.
2624c2677
< <a name="subpatterns-as-subroutines"></a>
---
> [](){: #sect21 }
2628,2633c2681,2685
< 
< If the syntax for a recursive subpattern call (either by number or by
< name) is used outside the parentheses to which it refers, it operates like a
< subroutine in a programming language. The called subpattern may be defined
< before or after the reference. A numbered reference can be absolute or
< relative, as in these examples:
---
> If the syntax for a recursive subpattern call (either by number or by name) is
> used outside the parentheses to which it refers, it operates like a subroutine
> in a programming language. The called subpattern can be defined before or after
> the reference. A numbered reference can be absolute or relative, as in the
> following examples:
2640c2692,2695
< An earlier example pointed out that the pattern
---
> 
> An earlier example pointed out that the following pattern matches "sense and
> sensibility" and "response and responsibility", but not "sense and
> responsibility":
2643c2698,2699
< (sens|respons)e and \e1ibility
---
> (sens|respons)e and \1ibility
> ```
2645,2646c2701,2702
< matches "sense and sensibility" and "response and responsibility", but not
< "sense and responsibility". If instead the pattern
---
> If instead the following pattern is used, it matches "sense and responsibility"
> and the other two strings:
2649a2706
> ```
2651,2652c2708
< is used, it does match "sense and responsibility" as well as the other two
< strings. Another example is given in the discussion of DEFINE above.
---
> Another example is provided in the discussion of DEFINE earlier.
2654,2658c2710,2714
< All subroutine calls, whether recursive or not, are always treated as atomic
< groups. That is, once a subroutine has matched some of the subject string, it
< is never re-entered, even if it contains untried alternatives and there is a
< subsequent matching failure. Any capturing parentheses that are set during the
< subroutine call revert to their previous values afterwards.
---
> All subroutine calls, recursive or not, are always treated as atomic groups.
> That is, once a subroutine has matched some of the subject string, it is never
> re-entered, even if it contains untried alternatives and there is a subsequent
> matching failure. Any capturing parentheses that are set during the subroutine
> call revert to their previous values afterwards.
2662c2718,2720
< different calls. For example, consider this pattern:
---
> different calls. For example, the following pattern matches "abcabc" but not
> "abcABC", as the change of processing option does not affect the called
> subpattern:
2665a2724
> ```
2667,2670c2726
< It matches "abcabc". It does not match "abcABC" because the change of
< processing option does not affect the called subpattern.
< 
< <a name="oniguruma-subroutine-syntax"></a>
---
> [](){: #sect22 }
2674,2676c2730,2731
< 
< For compatibility with Oniguruma, the non-Perl syntax \eg followed by a name or
< a number enclosed either in angle brackets or single quotes, is an alternative
---
> For compatibility with Oniguruma, the non-Perl syntax `\g` followed by a name or
> a number enclosed either in angle brackets or single quotes, is alternative
2678c2733
< are two of the examples used above, rewritten using this syntax:
---
> follows two of the examples used above, rewritten using this syntax:
2681,2682c2736,2737
< (?&lt;pn&gt; \e( ( (?&gt;[^()]+) | \eg&lt;pn&gt; )* \e) )
< (sens|respons)e and \eg'1'ibility
---
> (?<pn> \( ( (?>[^()]+) | \g<pn> )* \) )
> (sens|respons)e and \g'1'ibility
2684,2685d2738
< PCRE supports an extension to Oniguruma: if a number is preceded by a
< plus or a minus sign it is taken as a relative reference. For example:
2687,2712c2740,2741
< ```text
< (abc)(?i:\eg&lt;-1&gt;)
< 
< Note that \eg{...} (Perl syntax) and \eg&lt;...&gt; (Oniguruma syntax) are _not_
< synonymous. The former is a back reference; the latter is a subroutine call.
< 
< <a name="callouts"></a>
< 
< ## Callouts
< 
< 
< Perl has a feature whereby using the sequence (?{...}) causes arbitrary Perl
< code to be obeyed in the middle of matching a regular expression. This makes it
< possible, amongst other things, to extract different substrings that match the
< same pair of parentheses when there is a repetition.
< 
< PCRE provides a similar feature, but of course it cannot obey arbitrary Perl
< code. The feature is called "callout". The caller of PCRE provides an external
< function by putting its entry point in the global variable _pcre\_callout_
< (8-bit library) or _pcre[16|32]\_callout_ (16-bit or 32-bit library).
< By default, this variable contains NULL, which disables all calling out.
< 
< Within a regular expression, (?C) indicates the points at which the external
< function is to be called. If you want to identify different callout points, you
< can put a number less than 256 after the letter C. The default value is zero.
< For example, this pattern has two callout points:
---
> PCRE supports an extension to Oniguruma: if a number is preceded by a plus or
> minus sign, it is taken as a relative reference, for example:
2715,2733c2744,2745
< (?C1)abc(?C2)def
< 
< If the PCRE_AUTO_CALLOUT flag is passed to a compiling function, callouts are
< automatically installed before each item in the pattern. They are all numbered
< 255. If there is a conditional group in the pattern whose condition is an
< assertion, an additional callout is inserted just before the condition. An
< explicit callout may also be set at this position, as in this example:
< 
< ```text
< (?(?C9)(?=a)abc|def)
< 
< Note that this applies only to assertion conditions, not to other types of
< condition.
< 
< During matching, when PCRE reaches a callout point, the external function is
< called. It is provided with the number of the callout, the position in the
< pattern, and, optionally, one item of data originally supplied by the caller of
< the matching function. The callout function may cause matching to proceed, to
< backtrack, or to fail altogether.
---
> (abc)(?i:\g<-1>)
> ```
2735,2741c2747,2748
< By default, PCRE implements a number of optimizations at compile time and
< matching time, and one side-effect is that sometimes callouts are skipped. If
< you need all possible callouts to happen, you need to set options that disable
< the relevant optimizations. More details, and a complete description of the
< interface to the callout function, are given in the
< `pcrecallout`
< documentation.
---
> Notice that `\g{...}` (Perl syntax) and `\g<...>` (Oniguruma syntax) are _not_
> synonymous. The former is a back reference; the latter is a subroutine call.
2743c2750
< <a name="backtracking-control"></a>
---
> [](){: #sect23 }
2747,2751c2754,2757
< 
< Perl 5.10 introduced a number of "Special Backtracking Control Verbs", which
< are still described in the Perl documentation as "experimental and subject to
< change or removal in a future version of Perl". It goes on to say: "Their usage
< in production code should be noted to avoid problems during upgrades." The same
---
> Perl 5.10 introduced some "Special Backtracking Control Verbs", which are still
> described in the Perl documentation as "experimental and subject to change or
> removal in a future version of Perl". It goes on to say: "Their usage in
> production code should be noted to avoid problems during upgrades." The same
2755,2778c2761,2767
< parenthesis followed by an asterisk. They are generally of the form
< (*VERB) or (*VERB:NAME). Some may take either form, possibly behaving
< differently depending on whether or not a name is present. A name is any
< sequence of characters that does not include a closing parenthesis. The maximum
< length of name is 255 in the 8-bit library and 65535 in the 16-bit and 32-bit
< libraries. If the name is empty, that is, if the closing parenthesis
< immediately follows the colon, the effect is as if the colon were not there.
< Any number of these verbs may occur in a pattern.
< 
< Since these verbs are specifically related to backtracking, most of them can be
< used only when the pattern is to be matched using one of the traditional
< matching functions, because these use a backtracking algorithm. With the
< exception of (*FAIL), which behaves like a failing negative assertion, the
< backtracking control verbs cause an error if encountered by a DFA matching
< function.
< 
< The behaviour of these verbs in
< repeated groups,
< assertions,
< and in
< subpatterns called as subroutines
< (whether or not recursively) is documented below.
< 
< <a name="optimizations-that-affect-backtracking-verbs"></a>
---
> parenthesis followed by an asterisk. They are generally of the form (*VERB) or
> (*VERB:NAME). Some can take either form, possibly behaving differently depending
> on whether a name is present. A name is any sequence of characters that does not
> include a closing parenthesis. The maximum name length is 255 in the 8-bit
> library and 65535 in the 16-bit and 32-bit libraries. If the name is empty, that
> is, if the closing parenthesis immediately follows the colon, the effect is as
> if the colon was not there. Any number of these verbs can occur in a pattern.
2780c2769,2770
< _Optimizations that affect backtracking verbs_
---
> The behavior of these verbs in repeated groups, assertions, and in subpatterns
> called as subroutines (whether or not recursively) is described below.
2781a2772
> _Optimizations That Affect Backtracking Verbs_
2784c2775
< some checks at the start of each match attempt. For example, it may know the
---
> some checks at the start of each match attempt. For example, it can know the
2787,2795c2778,2780
< included backtracking verbs will not, of course, be processed. You can suppress
< the start-of-match optimizations by setting the PCRE_NO_START_OPTIMIZE option
< when calling `pcre\_compile()` or `pcre\_exec()`, or by starting the
< pattern with (*NO_START_OPT). There is more discussion of this option in the
< section entitled
< "Option bits for `pcre\_exec()`"
< in the
< `pcreapi`
< documentation.
---
> included backtracking verbs are not processed. processed. You can suppress the
> start-of-match optimizations by setting option `no_start_optimize` when calling
> `compile/2` or `run/3`, or by starting the pattern with (\*NO_START_OPT).
2800c2785
< <a name="verbs-that-act-immediately"></a>
---
> _Verbs That Act Immediately_
2802,2805c2787
< _Verbs that act immediately_
< 
< 
< The following verbs act as soon as they are encountered. They may not be
---
> The following verbs act as soon as they are encountered. They must not be
2808c2790,2792
<    (*ACCEPT)
---
> ```text
> (*ACCEPT)
> ```
2811,2817c2795,2802
< pattern. However, when it is inside a subpattern that is called as a
< subroutine, only that subpattern is ended successfully. Matching then continues
< at the outer level. If (*ACCEPT) in triggered in a positive assertion, the
< assertion succeeds; in a negative assertion, the assertion fails.
< 
< If (*ACCEPT) is inside capturing parentheses, the data so far is captured. For
< example:
---
> pattern. However, when it is inside a subpattern that is called as a subroutine,
> only that subpattern is ended successfully. Matching then continues at the outer
> level. If (\*ACCEPT) is triggered in a positive assertion, the assertion
> succeeds; in a negative assertion, the assertion fails.
> 
> If (\*ACCEPT) is inside capturing parentheses, the data so far is captured. For
> example, the following matches "AB", "AAD", or "ACD". When it matches "AB", "B"
> is captured by the outer parentheses.
2820a2806
> ```
2822,2823c2808,2809
< This matches "AB", "AAD", or "ACD"; when it matches "AB", "B" is captured by
< the outer parentheses.
---
> The following verb causes a matching failure, forcing backtracking to occur. It
> is equivalent to (?\!) but easier to read.
2826a2813
> ```
2828,2835c2815,2816
< This verb causes a matching failure, forcing backtracking to occur. It is
< equivalent to (?!) but easier to read. The Perl documentation notes that it is
< probably useful only when combined with (?{}) or (??{}). Those are, of course,
< Perl features that are not present in PCRE. The nearest equivalent is the
< callout feature, as for example in this pattern:
< 
< ```text
< a+(?C)(*FAIL)
---
> The Perl documentation states that it is probably useful only when combined with
> (?\{\}) or (??\{\}). Those are Perl features that are not present in PCRE.
2838,2840c2819
< each backtrack happens (in this example, 10 times).
< 
< <a name="recording-which-path-was-taken"></a>
---
> each backtrack occurs (in this example, 10 times).
2842c2821
< _Recording which path was taken_
---
> _Recording Which Path Was Taken_
2844,2847c2823,2834
< 
< There is one verb whose main purpose is to track how a match was arrived at,
< though it also has a secondary use in conjunction with advancing the match
< starting point (see (*SKIP) below).
---
> The main purpose of this verb is to track how a match was arrived at, although
> it also has a secondary use in with advancing the match starting point (see
> (\*SKIP) below).
> 
> > #### Note {: .info }
> >
> > In Erlang, there is no interface to retrieve a mark with [`run/2,3`](`run/2`),
> > so only the secondary purpose is relevant to the Erlang programmer.
> >
> > The rest of this section is therefore deliberately not adapted for reading by
> > the Erlang programmer, but the examples can help in understanding NAMES as
> > they can be used by (\*SKIP).
2850a2838
> ```
2852,2853c2840,2841
< A name is always required with this verb. There may be as many instances of
< (*MARK) as you like in a pattern, and their names do not have to be unique.
---
> A name is always required with this verb. There can be as many instances of
> (\*MARK) as you like in a pattern, and their names do not have to be unique.
2855,2866c2843,2852
< When a match succeeds, the name of the last-encountered (*MARK:NAME),
< (*PRUNE:NAME), or (*THEN:NAME) on the matching path is passed back to the
< caller as described in the section entitled
< "Extra data for `pcre\_exec()`"
< in the
< `pcreapi`
< documentation. Here is an example of `pcretest` output, where the /K
< modifier requests the retrieval and outputting of (*MARK) data:
< 
<     re&gt; /X(*MARK:A)Y|X(*MARK:B)Z/K
< data&gt; XY
<    0: XY
---
> When a match succeeds, the name of the last encountered (*MARK:NAME),
> (*PRUNE:NAME), or (*THEN:NAME) on the matching path is passed back to the caller
> as described in section "Extra data for `pcre_exec()`" in the `pcreapi`
> documentation. In the following example of `pcretest` output, the /K modifier
> requests the retrieval and outputting of (*MARK) data:
> 
> ```text
> re> /X(*MARK:A)Y|X(*MARK:B)Z/K
> data> XY
>  0: XY
2869c2855
<    0: XZ
---
>  0: XZ
2872,2875c2858,2862
< The (*MARK) name is tagged with "MK:" in this output, and in this example it
< indicates which of the two alternatives matched. This is a more efficient way
< of obtaining this information than putting each alternative in its own
< capturing parentheses.
---
> 
> The (\*MARK) name is tagged with "MK:" in this output, and in this example it
> indicates which of the two alternatives matched. This is a more efficient way of
> obtaining this information than putting each alternative in its own capturing
> parentheses.
2878,2879c2865,2866
< name is recorded and passed back if it is the last-encountered. This does not
< happen for negative assertions or failing positive assertions.
---
> name is recorded and passed back if it is the last encountered. This does not
> occur for negative assertions or failing positive assertions.
2881,2882c2868,2869
< After a partial match or a failed match, the last encountered name in the
< entire match process is returned. For example:
---
> After a partial match or a failed match, the last encountered name in the entire
> match process is returned, for example:
2884,2885c2871,2873
<     re&gt; /X(*MARK:A)Y|X(*MARK:B)Z/K
< data&gt; XP
---
> ```text
> re> /X(*MARK:A)Y|X(*MARK:B)Z/K
> data> XP
2888,2898d2875
< Note that in this unanchored example the mark is retained from the match
< attempt that started at the letter "X" in the subject. Subsequent match
< attempts starting at "P" and then with an empty string do not get as far as the
< (*MARK) item, but nevertheless do not reset it.
< 
< If you are interested in (*MARK) values after failed matches, you should
< probably set the PCRE_NO_START_OPTIMIZE option
< (see above)
< to ensure that the match is always attempted.
< 
< <a name="verbs-that-act-after-backtracking"></a>
2900c2877,2880
< _Verbs that act after backtracking_
---
> Notice that in this unanchored example, the mark is retained from the match
> attempt that started at letter "X" in the subject. Subsequent match attempts
> starting at "P" and then with an empty string do not get as far as the (\*MARK)
> item, nevertheless do not reset it.
2901a2882
> _Verbs That Act after Backtracking_
2907,2911c2888,2892
< assertion that is true, its effect is confined to that group, because once the
< group has been matched, there is never any backtracking into it. In this
< situation, backtracking can "jump back" to the left of the entire atomic group
< or assertion. (Remember also, as stated above, that this localization also
< applies in subroutine calls.)
---
> assertion that is true, its effect is confined to that group, as once the group
> has been matched, there is never any backtracking into it. In this situation,
> backtracking can "jump back" to the left of the entire atomic group or
> assertion. (Remember also, as stated above, that this localization also applies
> in subroutine calls.)
2914,2916c2895,2901
< reaches them. The behaviour described below is what happens when the verb is
< not in a subroutine or an assertion. Subsequent sections cover these special
< cases.
---
> reaches them. The behavior described below is what occurs when the verb is not
> in a subroutine or an assertion. Subsequent sections cover these special cases.
> 
> The following verb, which must not be followed by a name, causes the whole match
> to fail outright if there is a later matching failure that causes backtracking
> to reach it. Even if the pattern is unanchored, no further attempts to find a
> match by advancing the starting point take place.
2919a2905
> ```
2921,2927c2907,2909
< This verb, which may not be followed by a name, causes the whole match to fail
< outright if there is a later matching failure that causes backtracking to reach
< it. Even if the pattern is unanchored, no further attempts to find a match by
< advancing the starting point take place. If (*COMMIT) is the only backtracking
< verb that is encountered, once it has been passed `pcre\_exec()` is
< committed to finding a match at the current starting point, or not at all. For
< example:
---
> If (\*COMMIT) is the only backtracking verb that is encountered, once it has
> been passed, [`run/2,3`](`run/2`) is committed to find a match at the current
> starting point, or not at all, for example:
2930a2913
> ```
2932,2935c2915,2917
< This matches "xxaab" but not "aacaab". It can be thought of as a kind of
< dynamic anchor, or "I've started, so I must finish." The name of the most
< recently passed (*MARK) in the path is passed back when (*COMMIT) forces a
< match failure.
---
> This matches "xxaab" but not "aacaab". It can be thought of as a kind of dynamic
> anchor, or "I've started, so I must finish". The name of the most recently
> passed (*MARK) in the path is passed back when (*COMMIT) forces a match failure.
2937,2938c2919,2920
< If there is more than one backtracking verb in a pattern, a different one that
< follows (*COMMIT) may be triggered first, so merely passing (*COMMIT) during a
---
> If more than one backtracking verb exists in a pattern, a different one that
> follows (*COMMIT) can be triggered first, so merely passing (*COMMIT) during a
2941,2949c2923,2931
< Note that (*COMMIT) at the start of a pattern is not the same as an anchor,
< unless PCRE's start-of-match optimizations are turned off, as shown in this
< output from `pcretest`:
< 
<     re&gt; /(*COMMIT)abc/
< data&gt; xyzabc
<    0: abc
< data&gt; xyzabc\eY
< No match
---
> Notice that (\*COMMIT) at the start of a pattern is not the same as an anchor,
> unless the PCRE start-of-match optimizations are turned off, as shown in the
> following example:
> 
> ```erlang
> 1> re:run("xyzabc","(*COMMIT)abc",[{capture,all,list}]).
> {match,["abc"]}
> 2> re:run("xyzabc","(*COMMIT)abc",[{capture,all,list},no_start_optimize]).
> nomatch
2950a2933
> 
2953,2958c2936,2943
< first set of data. The match attempt then succeeds. In the second set of data,
< the escape sequence \eY is interpreted by the `pcretest` program. It causes
< the PCRE_NO_START_OPTIMIZE option to be set when `pcre\_exec()` is called.
< This disables the optimization that skips along to the first character. The
< pattern is now applied starting at "x", and so the (*COMMIT) causes the match
< to fail without trying any other starting points.
---
> first set of data. The match attempt then succeeds. In the second call the
> `no_start_optimize` disables the optimization that skips along to the first
> character. The pattern is now applied starting at "x", and so the (\*COMMIT)
> causes the match to fail without trying any other starting points.
> 
> The following verb causes the match to fail at the current starting position in
> the subject if there is a later matching failure that causes backtracking to
> reach it:
2961a2947
> ```
2963,2966c2949,2950
< This verb causes the match to fail at the current starting position in the
< subject if there is a later matching failure that causes backtracking to reach
< it. If the pattern is unanchored, the normal "bumpalong" advance to the next
< starting character then happens. Backtracking can occur as usual to the left of
---
> If the pattern is unanchored, the normal "bumpalong" advance to the next
> starting character then occurs. Backtracking can occur as usual to the left of
2968,2969c2952,2953
< if there is no match to the right, backtracking cannot cross (*PRUNE). In
< simple cases, the use of (*PRUNE) is just an alternative to an atomic group or
---
> if there is no match to the right, backtracking cannot cross (*PRUNE). In simple
> cases, the use of (*PRUNE) is just an alternative to an atomic group or
2971,2972c2955,2956
< expressed in any other way. In an anchored pattern (*PRUNE) has the same effect
< as (*COMMIT).
---
> expressed in any other way. In an anchored pattern, (*PRUNE) has the same effect
> as (\*COMMIT).
2974,2976c2958,2969
< The behaviour of (*PRUNE:NAME) is the not the same as (*MARK:NAME)(*PRUNE).
< It is like (*MARK:NAME) in that the name is remembered for passing back to the
< caller. However, (*SKIP:NAME) searches only for names set with (*MARK).
---
> The behavior of (*PRUNE:NAME) is the not the same as (*MARK:NAME)(*PRUNE). It is
> like (*MARK:NAME) in that the name is remembered for passing back to the caller.
> However, (*SKIP:NAME) searches only for names set with (*MARK).
> 
> > #### Note {: .info }
> >
> > The fact that (\*PRUNE:NAME) remembers the name is useless to the Erlang
> > programmer, as names cannot be retrieved.
> 
> The following verb, when specified without a name, is like (*PRUNE), except that
> if the pattern is unanchored, the "bumpalong" advance is not to the next
> character, but to the position in the subject where (*SKIP) was encountered.
2979a2973
> ```
2981,2985c2975,2976
< This verb, when given without a name, is like (*PRUNE), except that if the
< pattern is unanchored, the "bumpalong" advance is not to the next character,
< but to the position in the subject where (*SKIP) was encountered. (*SKIP)
< signifies that whatever text was matched leading up to it cannot be part of a
< successful match. Consider:
---
> (\*SKIP) signifies that whatever text was matched leading up to it cannot be
> part of a successful match. Consider:
2988a2980
> ```
2992,2995c2984,2989
< next attempt at "c". Note that a possessive quantifier does not have the same
< effect as this example; although it would suppress backtracking during the
< first match attempt, the second attempt would start at the second character
< instead of skipping on to "c".
---
> next attempt at "c". Notice that a possessive quantifier does not have the same
> effect as this example; although it would suppress backtracking during the first
> match attempt, the second attempt would start at the second character instead of
> skipping on to "c".
> 
> When (\*SKIP) has an associated name, its behavior is modified:
2998a2993
> ```
3000,3005c2995,2999
< When (*SKIP) has an associated name, its behaviour is modified. When it is
< triggered, the previous path through the pattern is searched for the most
< recent (*MARK) that has the same name. If one is found, the "bumpalong" advance
< is to the subject position that corresponds to that (*MARK) instead of to where
< (*SKIP) was encountered. If no (*MARK) with a matching name is found, the
< (*SKIP) is ignored.
---
> When this is triggered, the previous path through the pattern is searched for
> the most recent (*MARK) that has the same name. If one is found, the "bumpalong"
> advance is to the subject position that corresponds to that (*MARK) instead of
> to where (*SKIP) was encountered. If no (*MARK) with a matching name is found,
> (\*SKIP) is ignored.
3007c3001
< Note that (*SKIP:NAME) searches only for names set by (*MARK:NAME). It ignores
---
> Notice that (*SKIP:NAME) searches only for names set by (*MARK:NAME). It ignores
3009a3004,3007
> The following verb causes a skip to the next innermost alternative when
> backtracking reaches it. That is, it cancels any further backtracking within the
> current alternative.
> 
3011a3010
> ```
3013,3016c3012,3013
< This verb causes a skip to the next innermost alternative when backtracking
< reaches it. That is, it cancels any further backtracking within the current
< alternative. Its name comes from the observation that it can be used for a
< pattern-based if-then-else block:
---
> The verb name comes from the observation that it can be used for a pattern-based
> if-then-else block:
3019a3017
> ```
3021,3035c3019,3038
< If the COND1 pattern matches, FOO is tried (and possibly further items after
< the end of the group if FOO succeeds); on failure, the matcher skips to the
< second alternative and tries COND2, without backtracking into COND1. If that
< succeeds and BAR fails, COND3 is tried. If subsequently BAZ fails, there are no
< more alternatives, so there is a backtrack to whatever came before the entire
< group. If (*THEN) is not inside an alternation, it acts like (*PRUNE).
< 
< The behaviour of (*THEN:NAME) is the not the same as (*MARK:NAME)(*THEN).
< It is like (*MARK:NAME) in that the name is remembered for passing back to the
< caller. However, (*SKIP:NAME) searches only for names set with (*MARK).
< 
< A subpattern that does not contain a | character is just a part of the
< enclosing alternative; it is not a nested alternation with only one
< alternative. The effect of (*THEN) extends beyond such a subpattern to the
< enclosing alternative. Consider this pattern, where A, B, etc. are complex
---
> If the COND1 pattern matches, FOO is tried (and possibly further items after the
> end of the group if FOO succeeds). On failure, the matcher skips to the second
> alternative and tries COND2, without backtracking into COND1. If that succeeds
> and BAR fails, COND3 is tried. If BAZ then fails, there are no more
> alternatives, so there is a backtrack to whatever came before the entire group.
> If (*THEN) is not inside an alternation, it acts like (*PRUNE).
> 
> The behavior of (*THEN:NAME) is the not the same as (*MARK:NAME)(*THEN). It is
> like (*MARK:NAME) in that the name is remembered for passing back to the caller.
> However, (*SKIP:NAME) searches only for names set with (*MARK).
> 
> > #### Note {: .info }
> >
> > The fact that (\*THEN:NAME) remembers the name is useless to the Erlang
> > programmer, as names cannot be retrieved.
> 
> A subpattern that does not contain a | character is just a part of the enclosing
> alternative; it is not a nested alternation with only one alternative. The
> effect of (\*THEN) extends beyond such a subpattern to the enclosing
> alternative. Consider the following pattern, where A, B, and so on, are complex
3039a3043
> ```
3041,3044c3045,3047
< If A and B are matched, but there is a failure in C, matching does not
< backtrack into A; instead it moves to the next alternative, that is, D.
< However, if the subpattern containing (*THEN) is given an alternative, it
< behaves differently:
---
> If A and B are matched, but there is a failure in C, matching does not backtrack
> into A; instead it moves to the next alternative, that is, D. However, if the
> subpattern containing (\*THEN) is given an alternative, it behaves differently:
3047a3051
> ```
3050,3057c3054,3060
< in C, matching moves to (*FAIL), which causes the whole subpattern to fail
< because there are no more alternatives to try. In this case, matching does now
< backtrack into A.
< 
< Note that a conditional subpattern is not considered as having two
< alternatives, because only one is ever used. In other words, the | character in
< a conditional subpattern has a different meaning. Ignoring white space,
< consider:
---
> in C, matching moves to (*FAIL), which causes the whole subpattern to fail, as
> there are no more alternatives to try. In this case, matching does now backtrack
> into A.
> 
> Notice that a conditional subpattern is not considered as having two
> alternatives, as only one is ever used. That is, the | character in a
> conditional subpattern has a different meaning. Ignoring whitespace, consider:
3060a3064
> ```
3062,3080c3066,3081
< If the subject is "ba", this pattern does not match. Because .*? is ungreedy,
< it initially matches zero characters. The condition (?=a) then fails, the
< character "b" is matched, but "c" is not. At this point, matching does not
< backtrack to .*? as might perhaps be expected from the presence of the |
< character. The conditional subpattern is part of the single alternative that
< comprises the whole pattern, and so the match fails. (If there was a backtrack
< into .*?, allowing it to match "b", the match would succeed.)
< 
< The verbs just described provide four different "strengths" of control when
< subsequent matching fails. (*THEN) is the weakest, carrying on the match at the
< next alternative. (*PRUNE) comes next, failing the match at the current
< starting position, but allowing an advance to the next character (for an
< unanchored pattern). (*SKIP) is similar, except that the advance may be more
< than one character. (*COMMIT) is the strongest, causing the entire match to
< fail.
< 
< <a name="more-than-one-backtracking-verb"></a>
< 
< _More than one backtracking verb_
---
> If the subject is "ba", this pattern does not match. As ._? is ungreedy, it
> initially matches zero characters. The condition (?=a) then fails, the character
> "b" is matched, but "c" is not. At this point, matching does not backtrack to
> ._? as can perhaps be expected from the presence of the | character. The
> conditional subpattern is part of the single alternative that comprises the
> whole pattern, and so the match fails. (If there was a backtrack into .\*?,
> allowing it to match "b", the match would succeed.)
> 
> The verbs described above provide four different "strengths" of control when
> subsequent matching fails:
> 
> - (\*THEN) is the weakest, carrying on the match at the next alternative.
> - (\*PRUNE) comes next, fails the match at the current starting position, but
>   allows an advance to the next character (for an unanchored pattern).
> - (\*SKIP) is similar, except that the advance can be more than one character.
> - (\*COMMIT) is the strongest, causing the entire match to fail.
3081a3083
> _More than One Backtracking Verb_
3084,3085c3086,3087
< backtracked onto first acts. For example, consider this pattern, where A, B,
< etc. are complex pattern fragments:
---
> backtracked onto first acts. For example, consider the following pattern, where
> A, B, and so on, are complex pattern fragments:
3088a3091
> ```
3092,3094c3095,3097
< the next alternative (ABD) to be tried. This behaviour is consistent, but is
< not always the same as Perl's. It means that if two or more backtracking verbs
< appear in succession, all the the last of them has no effect. Consider this
---
> the next alternative (ABD) to be tried. This behavior is consistent, but is not
> always the same as in Perl. It means that if two or more backtracking verbs
> appear in succession, the last of them has no effect. Consider the following
3098a3102
> ```
3101,3106c3105,3106
< it to be triggered, and its action is taken. There can never be a backtrack
< onto (*COMMIT).
< 
< <a name="backtracking-verbs-in-repeated-groups"></a>
< 
< _Backtracking verbs in repeated groups_
---
> it to be triggered, and its action is taken. There can never be a backtrack onto
> (*COMMIT).
3107a3108
> _Backtracking Verbs in Repeated Groups_
3109,3110c3110,3111
< PCRE differs from Perl in its handling of backtracking verbs in repeated
< groups. For example, consider:
---
> PCRE differs from Perl in its handling of backtracking verbs in repeated groups.
> For example, consider:
3113a3115
> ```
3115c3117
< If the subject is "abac", Perl matches, but PCRE fails because the (*COMMIT) in
---
> If the subject is "abac", Perl matches, but PCRE fails because the (\*COMMIT) in
3118,3121c3120
< <a name="backtracking-verbs-in-assertions"></a>
< 
< _Backtracking verbs in assertions_
< 
---
> _Backtracking Verbs in Assertions_
3123c3122,3123
< (*FAIL) in an assertion has its normal effect: it forces an immediate backtrack.
---
> (\*FAIL) in an assertion has its normal effect: it forces an immediate
> backtrack.
3130,3131c3130,3131
< positive assertion. In particular, (*THEN) skips to the next alternative in the
< innermost enclosing group that has alternations, whether or not this is within
---
> positive assertion. In particular, (\*THEN) skips to the next alternative in the
> innermost enclosing group that has alternations, regardless if this is within
3134,3187c3134,3156
< Negative assertions are, however, different, in order to ensure that changing a
< positive assertion into a negative assertion changes its result. Backtracking
< into (*COMMIT), (*SKIP), or (*PRUNE) causes a negative assertion to be true,
< without considering any further alternative branches in the assertion.
< Backtracking into (*THEN) causes it to skip to the next enclosing alternative
< within the assertion (the normal behaviour), but if the assertion does not have
< such an alternative, (*THEN) behaves like (*PRUNE).
< 
< <a name="backtracking-verbs-in-subroutines"></a>
< 
< _Backtracking verbs in subroutines_
< 
< 
< These behaviours occur whether or not the subpattern is called recursively.
< Perl's treatment of subroutines is different in some cases.
< 
< (*FAIL) in a subpattern called as a subroutine has its normal effect: it forces
< an immediate backtrack.
< 
< (*ACCEPT) in a subpattern called as a subroutine causes the subroutine match to
< succeed without any further processing. Matching then continues after the
< subroutine call.
< 
< (*COMMIT), (*SKIP), and (*PRUNE) in a subpattern called as a subroutine cause
< the subroutine match to fail.
< 
< (*THEN) skips to the next alternative in the innermost enclosing group within
< the subpattern that has alternatives. If there is no such group within the
< subpattern, (*THEN) causes the subroutine match to fail.
< 
< <a name="see-also"></a>
< 
< ## See Also
< 
< 
< `pcreapi`(3), `pcrecallout`(3), `pcrematching`(3),
< `pcresyntax`(3), `pcre`(3), `pcre16(3)`, `pcre32(3)`.
< 
< <a name="author"></a>
< 
< ## Author
< 
< 
<     Philip Hazel
<     University Computing Service
<     Cambridge CB2 3QH, England.
< 
< <a name="revision"></a>
< 
< ## Revision
< 
< 
<     Last updated: 23 October 2016
<     Copyright (c) 1997-2016 University of Cambridge.
---
> Negative assertions are, however, different, to ensure that changing a positive
> assertion into a negative assertion changes its result. Backtracking into
> (*COMMIT), (*SKIP), or (*PRUNE) causes a negative assertion to be true, without
> considering any further alternative branches in the assertion. Backtracking into
> (*THEN) causes it to skip to the next enclosing alternative within the assertion
> (the normal behavior), but if the assertion does not have such an alternative,
> (*THEN) behaves like (*PRUNE).
> 
> _Backtracking Verbs in Subroutines_
> 
> These behaviors occur regardless if the subpattern is called recursively. The
> treatment of subroutines in Perl is different in some cases.
> 
> - (\*FAIL) in a subpattern called as a subroutine has its normal effect: it
>   forces an immediate backtrack.
> - (\*ACCEPT) in a subpattern called as a subroutine causes the subroutine match
>   to succeed without any further processing. Matching then continues after the
>   subroutine call.
> - (*COMMIT), (*SKIP), and (\*PRUNE) in a subpattern called as a subroutine cause
>   the subroutine match to fail.
> - (*THEN) skips to the next alternative in the innermost enclosing group within
>   the subpattern that has alternatives. If there is no such group within the
>   subpattern, (*THEN) causes the subroutine match to fail.
